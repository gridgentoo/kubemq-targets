2021-06-26T13:14:19.536+0300	INFO	request: {"metadata":{"filename":"Kubemq.javax","method":"save","path":"java/kubemq-java/kubemq-java-sdk/bin/main/io/kubemq/sdk/grpc"},"data":""}, response: {"metadata":{"result":"ok"},"data":null,"is_error":false,"error":""}, error:<nil>	{"source": "sync.down"}
2021-06-26T13:14:19.623+0300	INFO	request: {"metadata":{"filename":"README.md","method":"save","path":"java/kubemq-java"},"data":""}, response: {"metadata":{"result":"ok"},"data":null,"is_error":false,"error":""}, error:<nil>	{"source": "sync.down"}
2021-06-26T13:14:19.904+0300	INFO	request: {"metadata":{"filename":"Event.java","method":"save","path":"java/kubemq-java/kubemq-java-sdk/src/main/java/io/kubemq/sdk/event/lowlevel"},"data":"LyoNCiAqIE1JVCBMaWNlbnNlDQogKg0KICogQ29weXJpZ2h0IChjKSAyMDE4IEt1YmVNUQ0KICoNCiAqIFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhIGNvcHkNCiAqIG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlICJTb2Z0d2FyZSIpLCB0byBkZWFsDQogKiBpbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzDQogKiB0byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsDQogKiBjb3BpZXMgb2YgdGhlIFNvZnR3YXJlLCBhbmQgdG8gcGVybWl0IHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXMNCiAqIGZ1cm5pc2hlZCB0byBkbyBzbywgc3ViamVjdCB0byB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnM6DQogKg0KICogVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWQgaW4gYWxsDQogKiBjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLg0KICoNCiAqIFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCAiQVMgSVMiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTIE9SDQogKiBJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWSwNCiAqIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOIE5PIEVWRU5UIFNIQUxMIFRIRQ0KICogQVVUSE9SUyBPUiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSwgREFNQUdFUyBPUiBPVEhFUg0KICogTElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUiBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSwNCiAqIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRSBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU4gVEhFDQogKiBTT0ZUV0FSRS4NCiAqLw0KcGFja2FnZSBpby5rdWJlbXEuc2RrLmV2ZW50Lmxvd2xldmVsOw0KDQppbXBvcnQgY29tLmdvb2dsZS5wcm90b2J1Zi5CeXRlU3RyaW5nOw0KaW1wb3J0IGlvLmt1YmVtcS5zZGsuZ3JwYy5LdWJlbXE7DQppbXBvcnQgb3JnLmFwYWNoZS5jb21tb25zLmxhbmczLlN0cmluZ1V0aWxzOw0KDQppbXBvcnQgamF2YS51dGlsLkhhc2hNYXA7DQppbXBvcnQgamF2YS51dGlsLk1hcDsNCmltcG9ydCBqYXZhLnV0aWwuT3B0aW9uYWw7DQppbXBvcnQgamF2YS51dGlsLmNvbmN1cnJlbnQuYXRvbWljLkF0b21pY0ludGVnZXI7DQoNCi8qKg0KICogUmVwcmVzZW50cyB0aGUgRXZlbnQgdXNlZCBpbiBwdWJzdWIgdG8gc2VuZCBpbmZvcm1hdGlvbiB1c2luZyB0aGUgS3ViZU1RDQogKi8NCnB1YmxpYyBjbGFzcyBFdmVudCB7DQoNCiAgICBwcml2YXRlIHN0YXRpYyBBdG9taWNJbnRlZ2VyIF9pZCA9IG5ldyBBdG9taWNJbnRlZ2VyKDApOw0KICAgIHByaXZhdGUgYm9vbGVhbiByZXR1cm5SZXN1bHQ7DQogICAgLyoqDQogICAgICogUmVwcmVzZW50cyBUaGUgY2hhbm5lbCBuYW1lIHRvIHNlbmQgdG8gdXNpbmcgdGhlIEt1YmVNUQ0KICAgICAqLw0KICAgIHByaXZhdGUgU3RyaW5nIGNoYW5uZWw7DQogICAgLyoqDQogICAgICogUmVwcmVzZW50cyB0ZXh0IGFzIFN5c3RlbS5TdHJpbmcNCiAgICAgKi8NCiAgICBwcml2YXRlIFN0cmluZyBtZXRhZGF0YTsNCiAgICAvKioNCiAgICAgKiBSZXByZXNlbnRzIFRoZSBjb250ZW50IG9mIHRoZSBFdmVudA0KICAgICAqLw0KICAgIHByaXZhdGUgYnl0ZVtdIGJvZHk7DQogICAgLyoqDQogICAgICogUmVwcmVzZW50cyBhIEV2ZW50IGlkZW50aWZpZXINCiAgICAgKi8NCiAgICBwcml2YXRlIFN0cmluZyBldmVudElkOw0KICAgIC8qKg0KICAgICAqIFJlcHJlc2VudHMgdGhlIHNlbmRlciBJRCB0aGF0IHRoZSBtZXNzYWdlcyB3aWxsIGJlIHNlbmQgdW5kZXINCiAgICAgKi8NCiAgICBwcml2YXRlIFN0cmluZyBjbGllbnRJRDsNCiAgICAvKioNCiAgICAgKiBSZXByZXNlbnRzIGlmIHRoZSBtZXNzYWdlcyBzaG91bGQgYmUgc2VuZCB0byBwZXJzaXN0ZW5jZQ0KICAgICAqLw0KICAgIHByaXZhdGUgYm9vbGVhbiBzdG9yZTsNCiAgICBwcml2YXRlIE1hcDxTdHJpbmcsIFN0cmluZz4gdGFnczsNCg0KICAgIC8qKg0KICAgICAqIEluaXRpYWxpemVzIGEgbmV3IGluc3RhbmNlIG9mIHRoZSBFdmVudA0KICAgICAqLw0KICAgIHB1YmxpYyBFdmVudCgpIHsNCiAgICB9DQoNCiAgICAvKioNCiAgICAgKiBJbml0aWFsaXplcyBhIG5ldyBpbnN0YW5jZSBvZiB0aGUgRXZlbnQgZGVmaW5lZCBieSBhIHNldCBvZiBwYXJhbWV0ZXJzDQogICAgICoNCiAgICAgKiBAcGFyYW0gY2hhbm5lbCAgUmVwcmVzZW50cyBUaGUgY2hhbm5lbCBuYW1lIHRvIHNlbmQgdG8gdXNpbmcgdGhlIEt1YmVNUQ0KICAgICAqIEBwYXJhbSBtZXRhZGF0YSBSZXByZXNlbnRzIHRleHQgYXMgU3lzdGVtLlN0cmluZw0KICAgICAqIEBwYXJhbSBib2R5ICAgICBSZXByZXNlbnRzIFRoZSBjb250ZW50IG9mIHRoZSBFdmVudA0KICAgICAqIEBwYXJhbSBldmVudElkICBSZXByZXNlbnRzIGEgRXZlbnQgaWRlbnRpZmllcg0KICAgICAqIEBwYXJhbSBjbGllbnRJRCBSZXByZXNlbnRzIHRoZSBzZW5kZXIgSUQgdGhhdCB0aGUgbWVzc2FnZXMgd2lsbCBiZSBzZW5kIHVuZGVyDQogICAgICogQHBhcmFtIHN0b3JlICAgIFJlcHJlc2VudHMgaWYgdGhlIG1lc3NhZ2VzIHNob3VsZCBiZSBzZW5kIHRvIHBlcnNpc3RlbmNlDQogICAgICovDQogICAgcHVibGljIEV2ZW50KFN0cmluZyBjaGFubmVsLCBTdHJpbmcgbWV0YWRhdGEsIGJ5dGVbXSBib2R5LCBTdHJpbmcgZXZlbnRJZCwgU3RyaW5nIGNsaWVudElELCBib29sZWFuIHN0b3JlLCBNYXA8U3RyaW5nLFN0cmluZz4gdGFncykgew0KICAgICAgICB0aGlzLmNoYW5uZWwgPSBjaGFubmVsOw0KICAgICAgICB0aGlzLm1ldGFkYXRhID0gbWV0YWRhdGE7DQogICAgICAgIHRoaXMuYm9keSA9IGJvZHk7DQogICAgICAgIHRoaXMuZXZlbnRJZCA9IGV2ZW50SWQ7DQogICAgICAgIHRoaXMuY2xpZW50SUQgPSBjbGllbnRJRDsNCiAgICAgICAgdGhpcy5zdG9yZSA9IHN0b3JlOw0KICAgICAgICB0aGlzLnRhZ3MgPSB0YWdzOw0KICAgIH0NCg0KICAgIEV2ZW50KEt1YmVtcS5FdmVudCBldmVudCkgew0KICAgICAgICBjaGFubmVsID0gZXZlbnQuZ2V0Q2hhbm5lbCgpOw0KICAgICAgICBtZXRhZGF0YSA9IGV2ZW50LmdldE1ldGFkYXRhKCk7DQogICAgICAgIGJvZHkgPSBldmVudC5nZXRCb2R5KCkudG9CeXRlQXJyYXkoKTsNCiAgICAgICAgZXZlbnRJZCA9IFN0cmluZ1V0aWxzLmlzRW1wdHkoZXZlbnQuZ2V0RXZlbnRJRCgpKQ0KICAgICAgICAgICAgICAgID8gR2V0TmV4dElkKCkudG9TdHJpbmcoKQ0KICAgICAgICAgICAgICAgIDogZXZlbnQuZ2V0RXZlbnRJRCgpOw0KICAgICAgICBjbGllbnRJRCA9IGV2ZW50LmdldENsaWVudElEKCk7DQogICAgICAgIHRhZ3MgPSBldmVudC5nZXRUYWdzTWFwKCk7DQogICAgICAgIHN0b3JlID0gZXZlbnQuZ2V0U3RvcmUoKTsNCiAgICB9DQoNCiAgICBLdWJlbXEuRXZlbnQgVG9Jbm5lckV2ZW50KCkgew0KICAgICAgICByZXR1cm4gS3ViZW1xLkV2ZW50Lm5ld0J1aWxkZXIoKQ0KICAgICAgICAgICAgICAgIC5zZXRDaGFubmVsKGNoYW5uZWwpDQogICAgICAgICAgICAgICAgLnNldE1ldGFkYXRhKE9wdGlvbmFsLm9mTnVsbGFibGUobWV0YWRhdGEpLm9yRWxzZSgiIikpDQogICAgICAgICAgICAgICAgLnNldEJvZHkoQnl0ZVN0cmluZy5jb3B5RnJvbShib2R5KSkNCiAgICAgICAgICAgICAgICAuc2V0RXZlbnRJRChTdHJpbmdVdGlscy5pc0VtcHR5KGV2ZW50SWQpDQogICAgICAgICAgICAgICAgICAgICAgICA/IEdldE5leHRJZCgpLnRvU3RyaW5nKCkNCiAgICAgICAgICAgICAgICAgICAgICAgIDogZXZlbnRJZCkNCiAgICAgICAgICAgICAgICAuc2V0Q2xpZW50SUQoY2xpZW50SUQpDQogICAgICAgICAgICAgICAgLnNldFN0b3JlKHN0b3JlKQ0KICAgICAgICAgICAgICAgIC5wdXRBbGxUYWdzKE9wdGlvbmFsLm9mTnVsbGFibGUodGFncykub3JFbHNlKG5ldyBIYXNoTWFwPFN0cmluZyxTdHJpbmc+KCkpKQ0KICAgICAgICAgICAgICAgIC5idWlsZCgpOw0KICAgIH0NCg0KICAgIC8qKg0KICAgICAqIEdldCBhbiB1bmlxdWUgdGhyZWFkIHNhZmV0eSBJRCBiZXR3ZWVuIDEgdG8gMzIsNzY3DQogICAgICoNCiAgICAgKiBAcmV0dXJuIHVuaXF1ZSBJRCBiZXR3ZWVuIDEgdG8gMzIsNzY3DQogICAgICovDQogICAgcHJpdmF0ZSBJbnRlZ2VyIEdldE5leHRJZCgpIHsNCiAgICAgICAgcmV0dXJuIF9pZC51cGRhdGVBbmRHZXQoaSAtPiBpID09IEludGVnZXIuTUFYX1ZBTFVFID8gMSA6IGkgKyAxKTsNCiAgICB9DQoNCiAgICBwdWJsaWMgU3RyaW5nIGdldENoYW5uZWwoKSB7DQogICAgICAgIHJldHVybiBjaGFubmVsOw0KICAgIH0NCg0KICAgIHB1YmxpYyB2b2lkIHNldENoYW5uZWwoU3RyaW5nIGNoYW5uZWwpIHsNCiAgICAgICAgdGhpcy5jaGFubmVsID0gY2hhbm5lbDsNCiAgICB9DQoNCiAgICBwdWJsaWMgU3RyaW5nIGdldE1ldGFkYXRhKCkgew0KICAgICAgICByZXR1cm4gbWV0YWRhdGE7DQogICAgfQ0KDQogICAgcHVibGljIHZvaWQgc2V0TWV0YWRhdGEoU3RyaW5nIG1ldGFkYXRhKSB7DQogICAgICAgIHRoaXMubWV0YWRhdGEgPSBtZXRhZGF0YTsNCiAgICB9DQoNCiAgICBwdWJsaWMgYnl0ZVtdIGdldEJvZHkoKSB7DQogICAgICAgIHJldHVybiBib2R5Ow0KICAgIH0NCg0KICAgIHB1YmxpYyB2b2lkIHNldEJvZHkoYnl0ZVtdIGJvZHkpIHsNCiAgICAgICAgdGhpcy5ib2R5ID0gYm9keTsNCiAgICB9DQoNCiAgICBwdWJsaWMgU3RyaW5nIGdldEV2ZW50SWQoKSB7DQogICAgICAgIHJldHVybiBldmVudElkOw0KICAgIH0NCg0KDQoNCiAgICBwdWJsaWMgdm9pZCBzZXRFdmVudElkKFN0cmluZyBldmVudElkKSB7DQogICAgICAgIHRoaXMuZXZlbnRJZCA9IGV2ZW50SWQ7DQogICAgfQ0KDQogICAgcHVibGljIFN0cmluZyBnZXRDbGllbnRJRCgpIHsNCiAgICAgICAgcmV0dXJuIGNsaWVudElEOw0KICAgIH0NCg0KICAgIHB1YmxpYyB2b2lkIHNldENsaWVudElEKFN0cmluZyBjbGllbnRJRCkgew0KICAgICAgICB0aGlzLmNsaWVudElEID0gY2xpZW50SUQ7DQogICAgfQ0KDQogICAgcHVibGljIGJvb2xlYW4gaXNTdG9yZSgpIHsNCiAgICAgICAgcmV0dXJuIHN0b3JlOw0KICAgIH0NCg0KICAgIHB1YmxpYyB2b2lkIHNldFN0b3JlKGJvb2xlYW4gc3RvcmUpIHsNCiAgICAgICAgdGhpcy5zdG9yZSA9IHN0b3JlOw0KICAgIH0NCg0KICAgIHB1YmxpYyBib29sZWFuIGlzUmV0dXJuUmVzdWx0KCkgew0KICAgICAgICByZXR1cm4gcmV0dXJuUmVzdWx0Ow0KICAgIH0NCg0KICAgIHB1YmxpYyB2b2lkIHNldFJldHVyblJlc3VsdChib29sZWFuIHJldHVyblJlc3VsdCkgew0KICAgICAgICB0aGlzLnJldHVyblJlc3VsdCA9IHJldHVyblJlc3VsdDsNCiAgICB9DQogICAgcHVibGljIE1hcDxTdHJpbmcsIFN0cmluZz4gZ2V0VGFncygpIHsNCiAgICAgICAgcmV0dXJuIHRoaXMudGFnczsNCiAgICB9DQogICAgcHVibGljIHZvaWQgc2V0VGFnKFN0cmluZyBrZXksIFN0cmluZyB2YWx1ZSl7DQogICAgICAgIGlmICh0YWdzPT1udWxsKXsNCiAgICAgICAgICAgIHRhZ3MgPSAgbmV3IEhhc2hNYXA8U3RyaW5nLFN0cmluZz4oKTsNCiAgICAgICAgfQ0KICAgICAgICB0aGlzLnRhZ3MucHV0SWZBYnNlbnQoa2V5LCB2YWx1ZSk7DQogICAgfQ0KDQoNCn0NCg=="}, response: {"metadata":{"result":"ok"},"data":null,"is_error":false,"error":""}, error:<nil>	{"source": "sync.down"}
2021-06-26T13:14:19.912+0300	INFO	request: {"metadata":{"filename":"Subscriber.java","method":"save","path":"java/kubemq-java/kubemq-java-sdk/src/main/java/io/kubemq/sdk/event"},"data":"LyoNCiAqIE1JVCBMaWNlbnNlDQogKg0KICogQ29weXJpZ2h0IChjKSAyMDE4IEt1YmVNUQ0KICoNCiAqIFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhIGNvcHkNCiAqIG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlICJTb2Z0d2FyZSIpLCB0byBkZWFsDQogKiBpbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzDQogKiB0byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsDQogKiBjb3BpZXMgb2YgdGhlIFNvZnR3YXJlLCBhbmQgdG8gcGVybWl0IHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXMNCiAqIGZ1cm5pc2hlZCB0byBkbyBzbywgc3ViamVjdCB0byB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnM6DQogKg0KICogVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWQgaW4gYWxsDQogKiBjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLg0KICoNCiAqIFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCAiQVMgSVMiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTIE9SDQogKiBJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWSwNCiAqIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOIE5PIEVWRU5UIFNIQUxMIFRIRQ0KICogQVVUSE9SUyBPUiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSwgREFNQUdFUyBPUiBPVEhFUg0KICogTElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUiBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSwNCiAqIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRSBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU4gVEhFDQogKiBTT0ZUV0FSRS4NCiAqLw0KcGFja2FnZSBpby5rdWJlbXEuc2RrLmV2ZW50Ow0KDQppbXBvcnQgaW8ua3ViZW1xLnNkay5iYXNpYy5HcnBjQ2xpZW50Ow0KaW1wb3J0IGlvLmt1YmVtcS5zZGsuYmFzaWMuU2VydmVyQWRkcmVzc05vdFN1cHBsaWVkRXhjZXB0aW9uOw0KaW1wb3J0IGlvLmt1YmVtcS5zZGsuZ3JwYy5LdWJlbXE7DQppbXBvcnQgaW8ua3ViZW1xLnNkay5ncnBjLkt1YmVtcS5QaW5nUmVzdWx0Ow0KaW1wb3J0IGlvLmt1YmVtcS5zZGsuc3Vic2NyaXB0aW9uLkV2ZW50c1N0b3JlVHlwZTsNCmltcG9ydCBpby5rdWJlbXEuc2RrLnN1YnNjcmlwdGlvbi5TdWJzY3JpYmVSZXF1ZXN0Ow0KaW1wb3J0IGlvLmt1YmVtcS5zZGsuc3Vic2NyaXB0aW9uLlN1YnNjcmliZVR5cGU7DQppbXBvcnQgaW8uZ3JwYy5zdHViLlN0cmVhbU9ic2VydmVyOw0KaW1wb3J0IG9yZy5hcGFjaGUuY29tbW9ucy5sYW5nMy5TdHJpbmdVdGlsczsNCmltcG9ydCBvcmcuc2xmNGouTG9nZ2VyOw0KaW1wb3J0IG9yZy5zbGY0ai5Mb2dnZXJGYWN0b3J5Ow0KDQppbXBvcnQgamF2YXgubmV0LnNzbC5TU0xFeGNlcHRpb247DQppbXBvcnQgamF2YS51dGlsLkl0ZXJhdG9yOw0KDQpwdWJsaWMgY2xhc3MgU3Vic2NyaWJlciBleHRlbmRzIEdycGNDbGllbnQgew0KDQogICAgcHJpdmF0ZSBzdGF0aWMgTG9nZ2VyIGxvZ2dlciA9IExvZ2dlckZhY3RvcnkuZ2V0TG9nZ2VyKFN1YnNjcmliZXIuY2xhc3MpOw0KIA0KICAgIC8qKg0KICAgICAqIEluaXRpYWxpemUgYSBuZXcgU3Vic2NyaWJlciB0byBpbmNvbWluZyBtZXNzYWdlcyBLdWJlTVFBZGRyZXNzIHdpbGwgYmUgcGFyc2VkDQogICAgICogZnJvbSBDb25maWcgb3IgZW52aXJvbm1lbnQgcGFyYW1ldGVyDQogICAgICovDQogICAgcHVibGljIFN1YnNjcmliZXIoKSB7DQogICAgICAgIHRoaXMobnVsbCk7DQogICAgfQ0KDQogICAgLyoqDQogICAgICogSW5pdGlhbGl6ZSBhIG5ldyBTdWJzY3JpYmVyIHRvIGluY29taW5nIG1lc3NhZ2VzDQogICAgICoNCiAgICAgKiBAcGFyYW0gS3ViZU1RQWRkcmVzcyBLdWJlTVEgc2VydmVyIGFkZHJlc3MNCiAgICAgKi8NCiAgICBwdWJsaWMgU3Vic2NyaWJlcihTdHJpbmcgS3ViZU1RQWRkcmVzcykgew0KICAgICAgICBfa3ViZW1xQWRkcmVzcyA9IEt1YmVNUUFkZHJlc3M7DQogICAgfQ0KDQogICAgICAvKioNCiAgICAgKiBJbml0aWFsaXplIGEgbmV3IFN1YnNjcmliZXIgdG8gaW5jb21pbmcgbWVzc2FnZXMNCiAgICAgKg0KICAgICAqIEBwYXJhbSBLdWJlTVFBZGRyZXNzIEt1YmVNUSBzZXJ2ZXIgYWRkcmVzcw0KICAgICAqIEBwYXJhbSBhdXRoVG9rZW4gICAgIFNldCBLdWJlTVEgSldUIEF1dGggdG9rZW4gdG8gYmUgdXNlZCBmb3IgS3ViZU1RDQogICAgICogICAgICAgICAgICAgICAgICAgICAgY29ubmVjdGlvbi4NCiAgICAgKi8NCiAgICBwdWJsaWMgU3Vic2NyaWJlcihTdHJpbmcgS3ViZU1RQWRkcmVzcywgU3RyaW5nIGF1dGhUb2tlbikgew0KICAgICAgICBfa3ViZW1xQWRkcmVzcyA9IEt1YmVNUUFkZHJlc3M7DQogICAgICAgIHRoaXMuYWRkQXV0aFRva2VuKGF1dGhUb2tlbik7DQogICAgfQ0KDQogICAgLyoqDQogICAgICogUmVnaXN0ZXIgdG8ga3ViZU1RIENoYW5uZWwgdXNpbmcgaW8ua3ViZW1xLnNkay5TdWJzY3JpcHRpb24uU3Vic2NyaWJlUmVxdWVzdC4NCiAgICAgKiBUaGlzIG1ldGhvZCBpcyBibG9ja2luZy4NCiAgICAgKg0KICAgICAqIEBwYXJhbSBzdWJzY3JpYmVSZXF1ZXN0IFBhcmFtZXRlcnMgbGlzdCByZXByZXNlbnQgYnkNCiAgICAgKiAgICAgICAgICAgICAgICAgICAgICAgICBpby5rdWJlbXEuc2RrLlN1YnNjcmlwdGlvbi5TdWJzY3JpYmVSZXF1ZXN0IHRoYXQgd2lsbA0KICAgICAqICAgICAgICAgICAgICAgICAgICAgICAgIGRldGVybWluZSB0aGUgc3Vic2NyaXB0aW9uIGNvbmZpZ3VyYXRpb24uDQogICAgICogQHJldHVybiBpby5rdWJlbXEuc2RrLlB1YlN1Yi5NZXNzYWdlUmVjZWl2ZS4NCiAgICAgKiBAdGhyb3dzIFNlcnZlckFkZHJlc3NOb3RTdXBwbGllZEV4Y2VwdGlvbiBUaHJvd24gZXhjZXB0aW9uIHdoZW4gS3ViZU1RIHNlcnZlcg0KICAgICAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFkZHJlc3MgY2FuIG5vdCBiZSBkZXRlcm1pbmVkLg0KICAgICAqIEB0aHJvd3MgU1NMRXhjZXB0aW9uICAgICAgICAgICAgICAgICAgICAgIEluZGljYXRlcyBzb21lIGtpbmQgb2YgZXJyb3INCiAgICAgKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZXRlY3RlZCBieSBhbiBTU0wgc3Vic3lzdGVtLg0KICAgICAqLw0KICAgIHB1YmxpYyBFdmVudFJlY2VpdmUgU3Vic2NyaWJlVG9FdmVudHMoU3Vic2NyaWJlUmVxdWVzdCBzdWJzY3JpYmVSZXF1ZXN0KQ0KICAgICAgICAgICAgdGhyb3dzIFNlcnZlckFkZHJlc3NOb3RTdXBwbGllZEV4Y2VwdGlvbiwgU1NMRXhjZXB0aW9uIHsNCg0KICAgICAgICBWYWxpZGF0ZVN1YnNjcmliZVJlcXVlc3Qoc3Vic2NyaWJlUmVxdWVzdCk7DQoNCiAgICAgICAgdGhpcy5QaW5nKCk7DQoNCiAgICAgICAgSXRlcmF0b3I8S3ViZW1xLkV2ZW50UmVjZWl2ZT4gY2FsbCA9IEdldEt1YmVNUUNsaWVudCgpDQogICAgICAgICAgICAgICAgLnN1YnNjcmliZVRvRXZlbnRzKHN1YnNjcmliZVJlcXVlc3QuVG9Jbm5lclN1YnNjcmliZVJlcXVlc3QoKSk7DQoNCiAgICAgICAgaWYgKGNhbGwuaGFzTmV4dCgpKSB7DQogICAgICAgICAgICBLdWJlbXEuRXZlbnRSZWNlaXZlIGlubmVyTWVzc2FnZSA9IGNhbGwubmV4dCgpOw0KICAgICAgICAgICAgTG9nSW5jb21pbmdNZXNzYWdlKGlubmVyTWVzc2FnZSk7DQogICAgICAgICAgICByZXR1cm4gbmV3IEV2ZW50UmVjZWl2ZShpbm5lck1lc3NhZ2UpOw0KICAgICAgICB9DQogICAgICAgIHJldHVybiBudWxsOw0KICAgIH0NCg0KICAgLyoqDQogICAgICogUGluZyBjaGVjayBLdWJlbXEgcmVzcG9uc2UuDQogICAgICogDQogICAgICogQHJldHVybiBQaW5nUmVzdWx0DQogICAgICogQHRocm93cyBTZXJ2ZXJBZGRyZXNzTm90U3VwcGxpZWRFeGNlcHRpb24gS3ViZU1RIHNlcnZlciBhZGRyZXNzIGNhbiBub3QgYmUNCiAgICAgKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZXRlcm1pbmVkLg0KICAgICAqIEB0aHJvd3MgU1NMRXhjZXB0aW9uICAgICAgICAgICAgICAgICAgICAgIEluZGljYXRlcyBzb21lIGtpbmQgb2YgZXJyb3INCiAgICAgKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZXRlY3RlZCBieSBhbiBTU0wgc3Vic3lzdGVtLiAgDQogICAgICovDQogICAgcHVibGljIFBpbmdSZXN1bHQgUGluZygpIHRocm93cyBTU0xFeGNlcHRpb24sIFNlcnZlckFkZHJlc3NOb3RTdXBwbGllZEV4Y2VwdGlvbiB7DQogICAgICAgIHJldHVybiBHZXRLdWJlTVFDbGllbnQoKS5waW5nKG51bGwpOw0KICAgIH0NCg0KICAgIC8qKg0KICAgICAqIFJlZ2lzdGVyIHRvIGt1YmVNUSBDaGFubmVsIHVzaW5nIGlvLmt1YmVtcS5zZGsuU3Vic2NyaXB0aW9uLlN1YnNjcmliZVJlcXVlc3QuDQogICAgICogVGhpcyBtZXRob2QgaXMgYXN5bmMuDQogICAgICoNCiAgICAgKiBAcGFyYW0gc3Vic2NyaWJlUmVxdWVzdCBQYXJhbWV0ZXJzIGxpc3QgcmVwcmVzZW50IGJ5DQogICAgICogICAgICAgICAgICAgICAgICAgICAgICAgaW8ua3ViZW1xLnNkay5TdWJzY3JpcHRpb24uU3Vic2NyaWJlUmVxdWVzdCB0aGF0IHdpbGwNCiAgICAgKiAgICAgICAgICAgICAgICAgICAgICAgICBkZXRlcm1pbmUgdGhlIHN1YnNjcmlwdGlvbiBjb25maWd1cmF0aW9uLg0KICAgICAqIEBwYXJhbSBzdHJlYW1PYnNlcnZlciAgIEFzeW5jIFN0cmVhbU9ic2VydmVyIHRvIGhhbmRsZSBldmVudCBtZXNzYWdlcw0KICAgICAqIEB0aHJvd3MgU2VydmVyQWRkcmVzc05vdFN1cHBsaWVkRXhjZXB0aW9uIFRocm93biBleGNlcHRpb24gd2hlbiBLdWJlTVEgc2VydmVyDQogICAgICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYWRkcmVzcyBjYW4gbm90IGJlIGRldGVybWluZWQuDQogICAgICogQHRocm93cyBTU0xFeGNlcHRpb24gICAgICAgICAgICAgICAgICAgICAgSW5kaWNhdGVzIHNvbWUga2luZCBvZiBlcnJvcg0KICAgICAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRldGVjdGVkIGJ5IGFuIFNTTCBzdWJzeXN0ZW0uICAgDQogICAgICovDQogICAgcHVibGljIHZvaWQgU3Vic2NyaWJlVG9FdmVudHMoDQogICAgICAgICAgICBTdWJzY3JpYmVSZXF1ZXN0IHN1YnNjcmliZVJlcXVlc3QsDQogICAgICAgICAgICBTdHJlYW1PYnNlcnZlcjxFdmVudFJlY2VpdmU+IHN0cmVhbU9ic2VydmVyDQogICAgKSB0aHJvd3MgU2VydmVyQWRkcmVzc05vdFN1cHBsaWVkRXhjZXB0aW9uLCBTU0xFeGNlcHRpb24gew0KDQogICAgICAgIFZhbGlkYXRlU3Vic2NyaWJlUmVxdWVzdChzdWJzY3JpYmVSZXF1ZXN0KTsNCg0KICAgICAgICBLdWJlbXEuU3Vic2NyaWJlIGlubmVyU3Vic2NyaWJlUmVxdWVzdCA9IHN1YnNjcmliZVJlcXVlc3QuVG9Jbm5lclN1YnNjcmliZVJlcXVlc3QoKTsNCiAgICAgICANCiAgICAgICAgU3RyZWFtT2JzZXJ2ZXI8S3ViZW1xLkV2ZW50UmVjZWl2ZT4gb2JzZXJ2ZXIgPSBuZXcgU3RyZWFtT2JzZXJ2ZXI8S3ViZW1xLkV2ZW50UmVjZWl2ZT4oKSB7DQogICAgICAgICAgICBAT3ZlcnJpZGUNCiAgICAgICAgICAgIHB1YmxpYyB2b2lkIG9uTmV4dChLdWJlbXEuRXZlbnRSZWNlaXZlIG1lc3NhZ2VSZWNlaXZlKSB7DQogICAgICAgICAgICAgICAgTG9nSW5jb21pbmdNZXNzYWdlKG1lc3NhZ2VSZWNlaXZlKTsNCiAgICAgICAgICAgICAgICBzdHJlYW1PYnNlcnZlci5vbk5leHQobmV3IEV2ZW50UmVjZWl2ZShtZXNzYWdlUmVjZWl2ZSkpOw0KICAgICAgICAgICAgfQ0KDQogICAgICAgICAgICBAT3ZlcnJpZGUNCiAgICAgICAgICAgIHB1YmxpYyB2b2lkIG9uRXJyb3IoVGhyb3dhYmxlIHQpIHsNCiAgICAgICAgICAgICAgICBzdHJlYW1PYnNlcnZlci5vbkVycm9yKHQpOw0KICAgICAgICAgICAgfQ0KDQogICAgICAgICAgICBAT3ZlcnJpZGUNCiAgICAgICAgICAgIHB1YmxpYyB2b2lkIG9uQ29tcGxldGVkKCkgew0KICAgICAgICAgICAgICAgIHN0cmVhbU9ic2VydmVyLm9uQ29tcGxldGVkKCk7DQogICAgICAgICAgICB9DQogICAgICAgIH07DQogICAgICAgICBHZXRLdWJlTVFBc3luY0NsaWVudCgpLnN1YnNjcmliZVRvRXZlbnRzKGlubmVyU3Vic2NyaWJlUmVxdWVzdCwgb2JzZXJ2ZXIpOw0KICAgIH0NCg0KICAgIHByaXZhdGUgdm9pZCBWYWxpZGF0ZVN1YnNjcmliZVJlcXVlc3QoU3Vic2NyaWJlUmVxdWVzdCBzdWJzY3JpYmVSZXF1ZXN0KSB7DQogICAgICAgIGlmIChTdHJpbmdVdGlscy5pc0JsYW5rKHN1YnNjcmliZVJlcXVlc3QuZ2V0Q2hhbm5lbCgpKSkgew0KICAgICAgICAgICAgdGhyb3cgbmV3IElsbGVnYWxBcmd1bWVudEV4Y2VwdGlvbigiUGFyYW1ldGVyIENoYW5uZWwgaXMgbWFuZGF0b3J5Iik7DQogICAgICAgIH0NCiAgICAgICAgaWYgKHN1YnNjcmliZVJlcXVlc3QuSXNOb3RWYWxpZFR5cGUoIkV2ZW50cyIpKSB7DQogICAgICAgICAgICB0aHJvdyBuZXcgSWxsZWdhbEFyZ3VtZW50RXhjZXB0aW9uKCJJbnZhbGlkIFN1YnNjcmliZSBUeXBlIGZvciB0aGlzIENsYXNzIik7DQogICAgICAgIH0NCiAgICAgICAgaWYgKHN1YnNjcmliZVJlcXVlc3QuZ2V0U3Vic2NyaWJlVHlwZSgpID09IFN1YnNjcmliZVR5cGUuRXZlbnRzU3RvcmUpIHsNCiAgICAgICAgICAgIGlmIChTdHJpbmdVdGlscy5pc0JsYW5rKHN1YnNjcmliZVJlcXVlc3QuZ2V0Q2xpZW50SUQoKSkpIHsNCiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgSWxsZWdhbEFyZ3VtZW50RXhjZXB0aW9uKCJQYXJhbWV0ZXIgQ2xpZW50SUQgaXMgbWFuZGF0b3J5Iik7DQogICAgICAgICAgICB9DQogICAgICAgICAgICBpZiAoc3Vic2NyaWJlUmVxdWVzdC5nZXRFdmVudHNTdG9yZVR5cGUoKSA9PSBFdmVudHNTdG9yZVR5cGUuVW5kZWZpbmVkKSB7DQogICAgICAgICAgICAgICAgdGhyb3cgbmV3IElsbGVnYWxBcmd1bWVudEV4Y2VwdGlvbigiUGFyYW1ldGVyIEV2ZW50c1N0b3JlVHlwZSBpcyBtYW5kYXRvcnkgZm9yIHRoaXMgdHlwZSIpOw0KICAgICAgICAgICAgfQ0KICAgICAgICB9DQogICAgfQ0KDQogICAgcHJpdmF0ZSB2b2lkIExvZ0luY29taW5nTWVzc2FnZShLdWJlbXEuRXZlbnRSZWNlaXZlIG1lc3NhZ2UpIHsNCiAgICAgICAgaWYgKGxvZ2dlci5pc1RyYWNlRW5hYmxlZCgpKSB7DQogICAgICAgICAgICBsb2dnZXIudHJhY2UoDQogICAgICAgICAgICAgICAgICAgICJTdWJzY3JpYmVyIFJlY2VpdmVkIEV2ZW50OiBFdmVudElEOid7fScsIENoYW5uZWw6J3t9JywgTWV0YWRhdGE6ICd7fSciLA0KICAgICAgICAgICAgICAgICAgICBtZXNzYWdlLmdldEV2ZW50SUQoKSwNCiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZS5nZXRDaGFubmVsKCksDQogICAgICAgICAgICAgICAgICAgIG1lc3NhZ2UuZ2V0TWV0YWRhdGEoKQ0KICAgICAgICAgICAgKTsNCiAgICAgICAgfQ0KICAgIH0NCn0NCg=="}, response: {"metadata":{"result":"ok"},"data":null,"is_error":false,"error":""}, error:<nil>	{"source": "sync.down"}
2021-06-26T13:14:19.940+0300	INFO	request: {"metadata":{"filename":"Event.java","method":"save","path":"java/kubemq-java/kubemq-java-sdk/src/main/java/io/kubemq/sdk/event"},"data":"LyoNCiAqIE1JVCBMaWNlbnNlDQogKg0KICogQ29weXJpZ2h0IChjKSAyMDE4IEt1YmVNUQ0KICoNCiAqIFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhIGNvcHkNCiAqIG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlICJTb2Z0d2FyZSIpLCB0byBkZWFsDQogKiBpbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzDQogKiB0byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsDQogKiBjb3BpZXMgb2YgdGhlIFNvZnR3YXJlLCBhbmQgdG8gcGVybWl0IHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXMNCiAqIGZ1cm5pc2hlZCB0byBkbyBzbywgc3ViamVjdCB0byB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnM6DQogKg0KICogVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWQgaW4gYWxsDQogKiBjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLg0KICoNCiAqIFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCAiQVMgSVMiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTIE9SDQogKiBJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWSwNCiAqIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOIE5PIEVWRU5UIFNIQUxMIFRIRQ0KICogQVVUSE9SUyBPUiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSwgREFNQUdFUyBPUiBPVEhFUg0KICogTElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUiBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSwNCiAqIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRSBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU4gVEhFDQogKiBTT0ZUV0FSRS4NCiAqLw0KcGFja2FnZSBpby5rdWJlbXEuc2RrLmV2ZW50Ow0KDQppbXBvcnQgamF2YS51dGlsLkhhc2hNYXA7DQppbXBvcnQgamF2YS51dGlsLk1hcDsNCg0KcHVibGljIGNsYXNzIEV2ZW50IHsNCiAgICBwcml2YXRlIFN0cmluZyBldmVudElkOw0KICAgIHByaXZhdGUgU3RyaW5nIG1ldGFkYXRhOw0KICAgIHByaXZhdGUgYnl0ZVtdIGJvZHk7DQogICAgcHJpdmF0ZSBNYXA8U3RyaW5nLFN0cmluZz4gdGFnczsNCg0KICANCiAgICBwdWJsaWMgRXZlbnQoKSB7DQogICAgfQ0KDQogDQogICAgcHVibGljIEV2ZW50KFN0cmluZyBldmVudElkLCBTdHJpbmcgbWV0YWRhdGEsIGJ5dGVbXSBib2R5KSB7DQogICAgICAgIHRoaXMuZXZlbnRJZCA9IGV2ZW50SWQ7DQogICAgICAgIHRoaXMubWV0YWRhdGEgPSBtZXRhZGF0YTsNCiAgICAgICAgdGhpcy5ib2R5ID0gYm9keTsNCiAgICB9DQoNCiAgIA0KICAgIHB1YmxpYyBTdHJpbmcgZ2V0RXZlbnRJZCgpIHsNCiAgICAgICAgcmV0dXJuIGV2ZW50SWQ7DQogICAgfQ0KDQogICAgDQogICAgcHVibGljIHZvaWQgc2V0RXZlbnRJZChTdHJpbmcgZXZlbnRJZCkgew0KICAgICAgICB0aGlzLmV2ZW50SWQgPSBldmVudElkOw0KICAgIH0NCg0KICAgIHB1YmxpYyBTdHJpbmcgZ2V0TWV0YWRhdGEoKSB7DQogICAgICAgIHJldHVybiBtZXRhZGF0YTsNCiAgICB9DQoNCiAgICBwdWJsaWMgdm9pZCBzZXRNZXRhZGF0YShTdHJpbmcgbWV0YWRhdGEpIHsNCiAgICAgICAgdGhpcy5tZXRhZGF0YSA9IG1ldGFkYXRhOw0KICAgIH0NCg0KICAgIHB1YmxpYyBieXRlW10gZ2V0Qm9keSgpIHsNCiAgICAgICAgcmV0dXJuIGJvZHk7DQogICAgfQ0KDQogICAgcHVibGljIHZvaWQgc2V0Qm9keShieXRlW10gYm9keSkgew0KICAgICAgICB0aGlzLmJvZHkgPSBib2R5Ow0KICAgIH0NCg0KICAgIHB1YmxpYyBNYXA8U3RyaW5nLCBTdHJpbmc+IGdldFRhZ3MoKSB7DQogICAgICAgIHJldHVybiB0aGlzLnRhZ3M7DQogICAgfQ0KICAgIHB1YmxpYyB2b2lkIHNldFRhZyhTdHJpbmcga2V5LCBTdHJpbmcgdmFsdWUpew0KICAgICAgICBpZiAodGFncz09bnVsbCl7DQogICAgICAgICAgICB0YWdzID0gIG5ldyBIYXNoTWFwPFN0cmluZyxTdHJpbmc+KCk7DQogICAgICAgIH0NCiAgICAgICAgdGhpcy50YWdzLnB1dElmQWJzZW50KGtleSwgdmFsdWUpOw0KICAgIH0NCg0KfQ0K"}, response: {"metadata":{"result":"ok"},"data":null,"is_error":false,"error":""}, error:<nil>	{"source": "sync.down"}
2021-06-26T13:14:20.099+0300	INFO	request: {"metadata":{"filename":"EventsStoreType.java","method":"save","path":"java/kubemq-java/kubemq-java-sdk/src/main/java/io/kubemq/sdk/subscription"},"data":"LyoNCiAqIE1JVCBMaWNlbnNlDQogKg0KICogQ29weXJpZ2h0IChjKSAyMDE4IEt1YmVNUQ0KICoNCiAqIFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhIGNvcHkNCiAqIG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlICJTb2Z0d2FyZSIpLCB0byBkZWFsDQogKiBpbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzDQogKiB0byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsDQogKiBjb3BpZXMgb2YgdGhlIFNvZnR3YXJlLCBhbmQgdG8gcGVybWl0IHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXMNCiAqIGZ1cm5pc2hlZCB0byBkbyBzbywgc3ViamVjdCB0byB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnM6DQogKg0KICogVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWQgaW4gYWxsDQogKiBjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLg0KICoNCiAqIFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCAiQVMgSVMiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTIE9SDQogKiBJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWSwNCiAqIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOIE5PIEVWRU5UIFNIQUxMIFRIRQ0KICogQVVUSE9SUyBPUiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSwgREFNQUdFUyBPUiBPVEhFUg0KICogTElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUiBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSwNCiAqIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRSBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU4gVEhFDQogKiBTT0ZUV0FSRS4NCiAqLw0KcGFja2FnZSBpby5rdWJlbXEuc2RrLnN1YnNjcmlwdGlvbjsNCg0KcHVibGljIGVudW0gRXZlbnRzU3RvcmVUeXBlIHsNCiAgICBVbmRlZmluZWQoMCksDQogICAgU3RhcnROZXdPbmx5KDEpLA0KICAgIFN0YXJ0RnJvbUZpcnN0KDIpLA0KICAgIFN0YXJ0RnJvbUxhc3QoMyksDQogICAgU3RhcnRBdFNlcXVlbmNlKDQpLA0KICAgIFN0YXJ0QXRUaW1lKDUpLA0KICAgIFN0YXJ0QXRUaW1lRGVsdGEoNik7DQoNCiAgICBwcml2YXRlIGludCB2YWx1ZTsNCg0KICAgIHByaXZhdGUgRXZlbnRzU3RvcmVUeXBlKGludCB2YWx1ZSkgew0KICAgICAgICB0aGlzLnZhbHVlID0gdmFsdWU7DQogICAgfQ0KDQogICAgcHVibGljIGludCBnZXRWYWx1ZSgpIHsNCiAgICAgICAgcmV0dXJuIHZhbHVlOw0KICAgIH0NCn0NCg=="}, response: {"metadata":{"result":"ok"},"data":null,"is_error":false,"error":""}, error:<nil>	{"source": "sync.down"}
