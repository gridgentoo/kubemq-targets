2021-06-26T13:14:07.750+0300	INFO	request: {"metadata":{"bucket_name":"kubemq-targets","item_name":"java/kubemq-java/kubemq-java-sdk/src/main/java/io/kubemq/sdk/grpc/Kubemq.javax","method":"upload_item"},"data":""}, response: {"metadata":{"result":"ok"},"data":"eyJMb2NhdGlvbiI6Imh0dHBzOi8va3ViZW1xLXRhcmdldHMuczMuYW1hem9uYXdzLmNvbS9qYXZhL2t1YmVtcS1qYXZhL2t1YmVtcS1qYXZhLXNkay9zcmMvbWFpbi9qYXZhL2lvL2t1YmVtcS9zZGsvZ3JwYy9LdWJlbXEuamF2YXgiLCJWZXJzaW9uSUQiOm51bGwsIlVwbG9hZElEIjoiIiwiRVRhZyI6IlwiN2E3ODdjY2U2OWQ3ZTMzZTU3MzBhMWZmZTc4Njk0YzFcIiJ9","is_error":false,"error":""}, error:<nil>	{"source": "sync.up"}
2021-06-26T13:14:08.571+0300	INFO	request: {"metadata":{"filename":"gradle.xml","method":"save","path":"java/kubemq-java/.idea"},"data":"PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0iVVRGLTgiPz4NCjxwcm9qZWN0IHZlcnNpb249IjQiPg0KICA8Y29tcG9uZW50IG5hbWU9IkdyYWRsZU1pZ3JhdGlvblNldHRpbmdzIiBtaWdyYXRpb25WZXJzaW9uPSIxIiAvPg0KICA8Y29tcG9uZW50IG5hbWU9IkdyYWRsZVNldHRpbmdzIj4NCiAgICA8b3B0aW9uIG5hbWU9ImxpbmtlZEV4dGVybmFsUHJvamVjdHNTZXR0aW5ncyI+DQogICAgICA8R3JhZGxlUHJvamVjdFNldHRpbmdzPg0KICAgICAgICA8b3B0aW9uIG5hbWU9ImRpc3RyaWJ1dGlvblR5cGUiIHZhbHVlPSJERUZBVUxUX1dSQVBQRUQiIC8+DQogICAgICAgIDxvcHRpb24gbmFtZT0iZXh0ZXJuYWxQcm9qZWN0UGF0aCIgdmFsdWU9IiRQUk9KRUNUX0RJUiQiIC8+DQogICAgICAgIDxvcHRpb24gbmFtZT0iZ3JhZGxlSnZtIiB2YWx1ZT0iY29ycmV0dG8tMS44IiAvPg0KICAgICAgICA8b3B0aW9uIG5hbWU9Im1vZHVsZXMiPg0KICAgICAgICAgIDxzZXQ+DQogICAgICAgICAgICA8b3B0aW9uIHZhbHVlPSIkUFJPSkVDVF9ESVIkIiAvPg0KICAgICAgICAgICAgPG9wdGlvbiB2YWx1ZT0iJFBST0pFQ1RfRElSJC9leGFtcGxlcyIgLz4NCiAgICAgICAgICAgIDxvcHRpb24gdmFsdWU9IiRQUk9KRUNUX0RJUiQva3ViZW1xLWphdmEtc2RrIiAvPg0KICAgICAgICAgIDwvc2V0Pg0KICAgICAgICA8L29wdGlvbj4NCiAgICAgIDwvR3JhZGxlUHJvamVjdFNldHRpbmdzPg0KICAgIDwvb3B0aW9uPg0KICA8L2NvbXBvbmVudD4NCjwvcHJvamVjdD4="}, response: {"metadata":{"result":"ok"},"data":null,"is_error":false,"error":""}, error:<nil>	{"source": "sync.down"}
2021-06-26T13:14:08.696+0300	INFO	request: {"metadata":{"filename":"buildOutputCleanup.lock","method":"save","path":"java/kubemq-java/.gradle/buildOutputCleanup"},"data":"Ayo2eCAalwSnAAAAAAAAAAE="}, response: {"metadata":{"result":"ok"},"data":null,"is_error":false,"error":""}, error:<nil>	{"source": "sync.down"}
2021-06-26T13:14:08.723+0300	INFO	request: {"metadata":{"filename":"Main.class","method":"save","path":"java/poc/test/out/production/test/com/company"},"data":"yv66vgAAADwAIgoAAgADBwAEDAAFAAYBABBqYXZhL2xhbmcvT2JqZWN0AQAGPGluaXQ+AQADKClWCQAIAAkHAAoMAAsADAEAEGphdmEvbGFuZy9TeXN0ZW0BAANvdXQBABVMamF2YS9pby9QcmludFN0cmVhbTsIAA4BAANoaXQKABAAEQcAEgwAEwAUAQATamF2YS9pby9QcmludFN0cmVhbQEAB3ByaW50bG4BABUoTGphdmEvbGFuZy9TdHJpbmc7KVYHABYBABBjb20vY29tcGFueS9NYWluAQAEQ29kZQEAD0xpbmVOdW1iZXJUYWJsZQEAEkxvY2FsVmFyaWFibGVUYWJsZQEABHRoaXMBABJMY29tL2NvbXBhbnkvTWFpbjsBAARtYWluAQAWKFtMamF2YS9sYW5nL1N0cmluZzspVgEABGFyZ3MBABNbTGphdmEvbGFuZy9TdHJpbmc7AQAKU291cmNlRmlsZQEACU1haW4uamF2YQAhABUAAgAAAAAAAgABAAUABgABABcAAAAvAAEAAQAAAAUqtwABsQAAAAIAGAAAAAYAAQAAAAQAGQAAAAwAAQAAAAUAGgAbAAAACQAcAB0AAQAXAAAANwACAAEAAAAJsgAHEg22AA+xAAAAAgAYAAAACgACAAAABwAIAAgAGQAAAAwAAQAAAAkAHgAfAAAAAQAgAAAAAgAh"}, response: {"metadata":{"result":"ok"},"data":null,"is_error":false,"error":""}, error:<nil>	{"source": "sync.down"}
2021-06-26T13:14:08.850+0300	INFO	request: {"metadata":{"filename":"ChannelParameters.java","method":"save","path":"java/kubemq-java/kubemq-java-sdk/src/main/java/io/kubemq/sdk/event"},"data":"LyoNCiAqIE1JVCBMaWNlbnNlDQogKg0KICogQ29weXJpZ2h0IChjKSAyMDE4IEt1YmVNUQ0KICoNCiAqIFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhIGNvcHkNCiAqIG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlICJTb2Z0d2FyZSIpLCB0byBkZWFsDQogKiBpbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzDQogKiB0byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsDQogKiBjb3BpZXMgb2YgdGhlIFNvZnR3YXJlLCBhbmQgdG8gcGVybWl0IHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXMNCiAqIGZ1cm5pc2hlZCB0byBkbyBzbywgc3ViamVjdCB0byB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnM6DQogKg0KICogVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWQgaW4gYWxsDQogKiBjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLg0KICoNCiAqIFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCAiQVMgSVMiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTIE9SDQogKiBJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWSwNCiAqIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOIE5PIEVWRU5UIFNIQUxMIFRIRQ0KICogQVVUSE9SUyBPUiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSwgREFNQUdFUyBPUiBPVEhFUg0KICogTElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUiBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSwNCiAqIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRSBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU4gVEhFDQogKiBTT0ZUV0FSRS4NCiAqLw0KcGFja2FnZSBpby5rdWJlbXEuc2RrLmV2ZW50Ow0KDQpwdWJsaWMgY2xhc3MgQ2hhbm5lbFBhcmFtZXRlcnMgew0KDQogICAgLyoqDQogICAgICogUmVwcmVzZW50cyBUaGUgY2hhbm5lbCBuYW1lIHRvIHNlbmQgdG8gdXNpbmcgdGhlIEt1YmVNUS4NCiAgICAgKi8NCiAgICBwcml2YXRlIFN0cmluZyBjaGFubmVsTmFtZTsNCg0KICAgIC8qKg0KICAgICAqIFJlcHJlc2VudHMgdGhlIHNlbmRlciBJRCB0aGF0IHRoZSBtZXNzYWdlcyB3aWxsIGJlIHNlbmQgdW5kZXIuDQogICAgICovDQogICAgcHJpdmF0ZSBTdHJpbmcgY2xpZW50SUQ7DQoNCiAgICAvKioNCiAgICAgKiBSZXByZXNlbnRzIGlmIHRoZSBtZXNzYWdlcyBzaG91bGQgYmUgc2VuZCB0byBwZXJzaXN0ZW5jZS4NCiAgICAgKi8NCiAgICBwcml2YXRlIGJvb2xlYW4gc3RvcmU7DQoNCiAgICAvKioNCiAgICAgKiBSZXByZXNlbnRzIGlmIHRoZSBlbmQgdXNlciBkb2VzIG5vdCBuZWVkIHRoZSBSZXN1bHQuDQogICAgICovDQogICAgcHJpdmF0ZSBib29sZWFuIHJldHVyblJlc3VsdDsNCg0KICAgIC8qKg0KICAgICAqIEt1YmVNUSBzZXJ2ZXIgYWRkcmVzcy4NCiAgICAgKi8NCiAgICBwcml2YXRlIFN0cmluZyBrdWJlTVFBZGRyZXNzOw0KDQogICAgLyoqDQogICAgICogS3ViZU1RIEpXVCBBdXRoIHRva2VuIHRvIGJlIHVzZWQgZm9yIEt1YmVNUSBjb25uZWN0aW9uLg0KICAgICAqLw0KICAgIHByaXZhdGUgU3RyaW5nIGF1dGhUb2tlbjsNCg0KDQogICAgcHVibGljIENoYW5uZWxQYXJhbWV0ZXJzKCkgew0KICAgIH0NCg0KICAgIHB1YmxpYyBDaGFubmVsUGFyYW1ldGVycyhTdHJpbmcgY2hhbm5lbE5hbWUsIFN0cmluZyBjbGllbnRJRCwgYm9vbGVhbiBzdG9yZSwgU3RyaW5nIGt1YmVNUUFkZHJlc3MsIFN0cmluZyBhdXRoVG9rZW4pIHsNCiAgICAgICAgdGhpcy5jaGFubmVsTmFtZSA9IGNoYW5uZWxOYW1lOw0KICAgICAgICB0aGlzLmNsaWVudElEID0gY2xpZW50SUQ7DQogICAgICAgIHRoaXMuc3RvcmUgPSBzdG9yZTsNCiAgICAgICAgdGhpcy5rdWJlTVFBZGRyZXNzID0ga3ViZU1RQWRkcmVzczsNCiAgICAgICAgdGhpcy5hdXRoVG9rZW4gPWF1dGhUb2tlbjsNCiAgICB9DQoNCiAgICBwdWJsaWMgU3RyaW5nIGdldENoYW5uZWxOYW1lKCkgew0KICAgICAgICByZXR1cm4gY2hhbm5lbE5hbWU7DQogICAgfQ0KDQogICAgcHVibGljIHZvaWQgc2V0Q2hhbm5lbE5hbWUoU3RyaW5nIGNoYW5uZWxOYW1lKSB7DQogICAgICAgIHRoaXMuY2hhbm5lbE5hbWUgPSBjaGFubmVsTmFtZTsNCiAgICB9DQoNCiAgICBwdWJsaWMgU3RyaW5nIGdldENsaWVudElEKCkgew0KICAgICAgICByZXR1cm4gY2xpZW50SUQ7DQogICAgfQ0KDQogICAgcHVibGljIHZvaWQgc2V0Q2xpZW50SUQoU3RyaW5nIGNsaWVudElEKSB7DQogICAgICAgIHRoaXMuY2xpZW50SUQgPSBjbGllbnRJRDsNCiAgICB9DQoNCiAgICBwdWJsaWMgYm9vbGVhbiBpc1N0b3JlKCkgew0KICAgICAgICByZXR1cm4gc3RvcmU7DQogICAgfQ0KDQogICAgcHVibGljIHZvaWQgc2V0U3RvcmUoYm9vbGVhbiBzdG9yZSkgew0KICAgICAgICB0aGlzLnN0b3JlID0gc3RvcmU7DQogICAgfQ0KDQogICAgcHVibGljIGJvb2xlYW4gaXNSZXR1cm5SZXN1bHQoKSB7DQogICAgICAgIHJldHVybiByZXR1cm5SZXN1bHQ7DQogICAgfQ0KDQogICAgcHVibGljIHZvaWQgc2V0UmV0dXJuUmVzdWx0KGJvb2xlYW4gcmV0dXJuUmVzdWx0KSB7DQogICAgICAgIHRoaXMucmV0dXJuUmVzdWx0ID0gcmV0dXJuUmVzdWx0Ow0KICAgIH0NCg0KICAgIHB1YmxpYyBTdHJpbmcgZ2V0S3ViZU1RQWRkcmVzcygpIHsNCiAgICAgICAgcmV0dXJuIGt1YmVNUUFkZHJlc3M7DQogICAgfQ0KDQogICAgcHVibGljIHZvaWQgc2V0S3ViZU1RQWRkcmVzcyhTdHJpbmcga3ViZU1RQWRkcmVzcykgew0KICAgICAgICB0aGlzLmt1YmVNUUFkZHJlc3MgPSBrdWJlTVFBZGRyZXNzOw0KICAgIH0NCg0KICAgIHB1YmxpYyBTdHJpbmcgZ2V0QXV0aFRva2VuKCl7DQogICAgICAgIHJldHVybiB0aGlzLmF1dGhUb2tlbjsNCiAgICB9DQogICAgDQogICAgcHVibGljIHZvaWQgc2V0QXV0aFRva2VuKFN0cmluZyBhdXRoVG9rZW4pew0KICAgICAgICB0aGlzLmF1dGhUb2tlbiA9IGF1dGhUb2tlbjsNCiAgICB9DQoNCn0NCg=="}, response: {"metadata":{"result":"ok"},"data":null,"is_error":false,"error":""}, error:<nil>	{"source": "sync.down"}
2021-06-26T13:14:08.867+0300	INFO	request: {"metadata":{"filename":"last-build.bin","method":"save","path":"java/kubemq-java/.gradle/4.8/fileChanges"},"data":"AA=="}, response: {"metadata":{"result":"ok"},"data":null,"is_error":false,"error":""}, error:<nil>	{"source": "sync.down"}
2021-06-26T13:14:09.318+0300	INFO	request: {"metadata":{"filename":"project-template.xml","method":"save","path":"java/poc/test/.idea"},"data":"PHRlbXBsYXRlPg0KICA8aW5wdXQtZmllbGQgZGVmYXVsdD0iY29tLmNvbXBhbnkiPklKX0JBU0VfUEFDS0FHRTwvaW5wdXQtZmllbGQ+DQo8L3RlbXBsYXRlPg=="}, response: {"metadata":{"result":"ok"},"data":null,"is_error":false,"error":""}, error:<nil>	{"source": "sync.down"}
2021-06-26T13:14:09.320+0300	INFO	request: {"metadata":{"filename":"logback-test.xml","method":"save","path":"java/kubemq-java/examples/bin/test"},"data":"PGNvbmZpZ3VyYXRpb24+DQogICAgPGFwcGVuZGVyIG5hbWU9IlNURE9VVCIgY2xhc3M9ImNoLnFvcy5sb2diYWNrLmNvcmUuQ29uc29sZUFwcGVuZGVyIj4NCiAgICAgICAgPGVuY29kZXIgY2xhc3M9ImNoLnFvcy5sb2diYWNrLmNsYXNzaWMuZW5jb2Rlci5QYXR0ZXJuTGF5b3V0RW5jb2RlciI+DQogICAgICAgICAgICA8cGF0dGVybj4lZHtISDptbTpzcy5TU1N9IFsldGhyZWFkXSAlLTVsZXZlbCAlbG9nZ2VyezM2fSAtICVtc2clbjwvcGF0dGVybj4NCiAgICAgICAgPC9lbmNvZGVyPg0KICAgIDwvYXBwZW5kZXI+DQogICAgPHJvb3QgbGV2ZWw9ImRlYnVnIj4NCiAgICAgICAgPGFwcGVuZGVyLXJlZiByZWY9IlNURE9VVCIvPg0KICAgIDwvcm9vdD4NCjwvY29uZmlndXJhdGlvbj4="}, response: {"metadata":{"result":"ok"},"data":null,"is_error":false,"error":""}, error:<nil>	{"source": "sync.down"}
2021-06-26T13:14:09.332+0300	INFO	request: {"metadata":{"filename":"AckAllMessagesResponse.java","method":"save","path":"java/kubemq-java/kubemq-java-sdk/src/main/java/io/kubemq/sdk/queue"},"data":"LyoNCiAqIE1JVCBMaWNlbnNlDQogKg0KICogQ29weXJpZ2h0IChjKSAyMDE4IEt1YmVNUQ0KICoNCiAqIFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhIGNvcHkNCiAqIG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlICJTb2Z0d2FyZSIpLCB0byBkZWFsDQogKiBpbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzDQogKiB0byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsDQogKiBjb3BpZXMgb2YgdGhlIFNvZnR3YXJlLCBhbmQgdG8gcGVybWl0IHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXMNCiAqIGZ1cm5pc2hlZCB0byBkbyBzbywgc3ViamVjdCB0byB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnM6DQogKg0KICogVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWQgaW4gYWxsDQogKiBjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLg0KICoNCiAqIFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCAiQVMgSVMiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTIE9SDQogKiBJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWSwNCiAqIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOIE5PIEVWRU5UIFNIQUxMIFRIRQ0KICogQVVUSE9SUyBPUiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSwgREFNQUdFUyBPUiBPVEhFUg0KICogTElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUiBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSwNCiAqIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRSBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU4gVEhFDQogKiBTT0ZUV0FSRS4NCiAqLw0KcGFja2FnZSBpby5rdWJlbXEuc2RrLnF1ZXVlOw0KDQppbXBvcnQgaW8ua3ViZW1xLnNkay5ncnBjLkt1YmVtcS5BY2tBbGxRdWV1ZU1lc3NhZ2VzUmVzcG9uc2U7DQoNCi8qKg0KICogUXVldWUgcHVyZ2UgbWVzc2FnZXMgcmVxdWVzdCBleGVjdXRpb24gcmVzdWx0ICh3aWxsIG5vdCBkZWxldGUgZGF0YSkuDQogKi8NCnB1YmxpYyBjbGFzcyBBY2tBbGxNZXNzYWdlc1Jlc3BvbnNlIHsNCg0KCXByaXZhdGUgQWNrQWxsUXVldWVNZXNzYWdlc1Jlc3BvbnNlIGFja0FsbFF1ZXVlTWVzc2FnZXNSZXNwb25zZTsNCg0KICAgIHByb3RlY3RlZCBBY2tBbGxNZXNzYWdlc1Jlc3BvbnNlKEFja0FsbFF1ZXVlTWVzc2FnZXNSZXNwb25zZSByZWMpIHsNCiAgICAgICAgYWNrQWxsUXVldWVNZXNzYWdlc1Jlc3BvbnNlID1yZWM7ICAgICAgICANCiAgICB9DQogICAgDQogICAgLyoqDQogICAgICogVW5pcXVlIGZvciBSZXF1ZXN0Lg0KICAgICAqIEByZXR1cm4gUmVxdWVzdCBJRC4NCiAgICAgKi8NCiAgICBwdWJsaWMgU3RyaW5nIGdldFJlcXVlc3RJRCgpIHsNCiAgICAgICAgcmV0dXJuIHRoaXMuYWNrQWxsUXVldWVNZXNzYWdlc1Jlc3BvbnNlLmdldFJlcXVlc3RJRCgpOw0KICAgIH0NCiAgIC8qKg0KICAgICAqIFJldHVybmVkIGZyb20gS3ViZU1RLCBmYWxzZSBpZiBubyBlcnJvci4NCiAgICAgKiANCiAgICAgKiBAcmV0dXJuIEZhbHNlIGlmIG5vIGVycm9yLg0KICAgICAqLw0KICAgIHB1YmxpYyBCb29sZWFuIGdldElzRXJyb3IoKSB7DQogICAgICAgIHJldHVybiB0aGlzLmFja0FsbFF1ZXVlTWVzc2FnZXNSZXNwb25zZS5nZXRJc0Vycm9yKCk7DQogICAgfQ0KDQogICAgLyoqDQogICAgICogRXJyb3IgbWVzc2FnZSwgdmFsaWQgb25seSBpZiBJc0Vycm9yIHRydWUuDQogICAgICogDQogICAgICogQHJldHVybiBFcnJvciBtZXNzYWdlLg0KICAgICAqLw0KICAgIHB1YmxpYyBTdHJpbmcgZ2V0RXJyb3IoKSB7DQogICAgICAgIHJldHVybiB0aGlzLmFja0FsbFF1ZXVlTWVzc2FnZXNSZXNwb25zZS5nZXRFcnJvcigpOw0KICAgIH0NCg0KICAgIC8qKg0KICAgICAqIE51bWJlciBvZiBhZmZlY3RlZCBtZXNzYWdlcy4NCiAgICAgKiBAcmV0dXJuIE51bWJlciBvZiBhZmZlY3RlZCBtZXNzYWdlcy4NCiAgICAgKi8NCiAgICBwdWJsaWMgbG9uZyBnZXRBZmZlY3RlZE1lc3NhZ2VzKCl7DQogICAgICAgIHJldHVybiB0aGlzLmFja0FsbFF1ZXVlTWVzc2FnZXNSZXNwb25zZS5nZXRBZmZlY3RlZE1lc3NhZ2VzKCk7DQogICAgfQ0KDQp9"}, response: {"metadata":{"result":"ok"},"data":null,"is_error":false,"error":""}, error:<nil>	{"source": "sync.down"}
2021-06-26T13:14:09.360+0300	INFO	request: {"metadata":{"filename":".project","method":"save","path":"java/kubemq-java/examples"},"data":"PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0iVVRGLTgiPz4NCjxwcm9qZWN0RGVzY3JpcHRpb24+DQoJPG5hbWU+ZXhhbXBsZXM8L25hbWU+DQoJPGNvbW1lbnQ+UHJvamVjdCBleGFtcGxlcyBjcmVhdGVkIGJ5IEJ1aWxkc2hpcC48L2NvbW1lbnQ+DQoJPHByb2plY3RzPg0KCTwvcHJvamVjdHM+DQoJPGJ1aWxkU3BlYz4NCgkJPGJ1aWxkQ29tbWFuZD4NCgkJCTxuYW1lPm9yZy5lY2xpcHNlLmpkdC5jb3JlLmphdmFidWlsZGVyPC9uYW1lPg0KCQkJPGFyZ3VtZW50cz4NCgkJCTwvYXJndW1lbnRzPg0KCQk8L2J1aWxkQ29tbWFuZD4NCgkJPGJ1aWxkQ29tbWFuZD4NCgkJCTxuYW1lPm9yZy5lY2xpcHNlLmJ1aWxkc2hpcC5jb3JlLmdyYWRsZXByb2plY3RidWlsZGVyPC9uYW1lPg0KCQkJPGFyZ3VtZW50cz4NCgkJCTwvYXJndW1lbnRzPg0KCQk8L2J1aWxkQ29tbWFuZD4NCgk8L2J1aWxkU3BlYz4NCgk8bmF0dXJlcz4NCgkJPG5hdHVyZT5vcmcuZWNsaXBzZS5qZHQuY29yZS5qYXZhbmF0dXJlPC9uYXR1cmU+DQoJCTxuYXR1cmU+b3JnLmVjbGlwc2UuYnVpbGRzaGlwLmNvcmUuZ3JhZGxlcHJvamVjdG5hdHVyZTwvbmF0dXJlPg0KCTwvbmF0dXJlcz4NCjwvcHJvamVjdERlc2NyaXB0aW9uPg0K"}, response: {"metadata":{"result":"ok"},"data":null,"is_error":false,"error":""}, error:<nil>	{"source": "sync.down"}
2021-06-26T13:14:09.360+0300	INFO	request: {"metadata":{"filename":".classpath","method":"save","path":"java/kubemq-java/examples"},"data":"PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0iVVRGLTgiPz4NCjxjbGFzc3BhdGg+DQoJPGNsYXNzcGF0aGVudHJ5IGtpbmQ9InNyYyIgb3V0cHV0PSJiaW4vbWFpbiIgcGF0aD0ic3JjL21haW4vamF2YSI+DQoJCTxhdHRyaWJ1dGVzPg0KCQkJPGF0dHJpYnV0ZSBuYW1lPSJncmFkbGVfc2NvcGUiIHZhbHVlPSJtYWluIi8+DQoJCQk8YXR0cmlidXRlIG5hbWU9ImdyYWRsZV91c2VkX2J5X3Njb3BlIiB2YWx1ZT0ibWFpbix0ZXN0Ii8+DQoJCTwvYXR0cmlidXRlcz4NCgk8L2NsYXNzcGF0aGVudHJ5Pg0KCTxjbGFzc3BhdGhlbnRyeSBraW5kPSJzcmMiIG91dHB1dD0iYmluL21haW4iIHBhdGg9InNyYy9tYWluL3Jlc291cmNlcyI+DQoJCTxhdHRyaWJ1dGVzPg0KCQkJPGF0dHJpYnV0ZSBuYW1lPSJncmFkbGVfc2NvcGUiIHZhbHVlPSJtYWluIi8+DQoJCQk8YXR0cmlidXRlIG5hbWU9ImdyYWRsZV91c2VkX2J5X3Njb3BlIiB2YWx1ZT0ibWFpbix0ZXN0Ii8+DQoJCTwvYXR0cmlidXRlcz4NCgk8L2NsYXNzcGF0aGVudHJ5Pg0KCTxjbGFzc3BhdGhlbnRyeSBraW5kPSJzcmMiIG91dHB1dD0iYmluL3Rlc3QiIHBhdGg9InNyYy90ZXN0L2phdmEiPg0KCQk8YXR0cmlidXRlcz4NCgkJCTxhdHRyaWJ1dGUgbmFtZT0iZ3JhZGxlX3Njb3BlIiB2YWx1ZT0idGVzdCIvPg0KCQkJPGF0dHJpYnV0ZSBuYW1lPSJncmFkbGVfdXNlZF9ieV9zY29wZSIgdmFsdWU9InRlc3QiLz4NCgkJPC9hdHRyaWJ1dGVzPg0KCTwvY2xhc3NwYXRoZW50cnk+DQoJPGNsYXNzcGF0aGVudHJ5IGtpbmQ9ImNvbiIgcGF0aD0ib3JnLmVjbGlwc2UuamR0LmxhdW5jaGluZy5KUkVfQ09OVEFJTkVSL29yZy5lY2xpcHNlLmpkdC5pbnRlcm5hbC5kZWJ1Zy51aS5sYXVuY2hlci5TdGFuZGFyZFZNVHlwZS9KYXZhU0UtMS44LyIvPg0KCTxjbGFzc3BhdGhlbnRyeSBraW5kPSJjb24iIHBhdGg9Im9yZy5lY2xpcHNlLmJ1aWxkc2hpcC5jb3JlLmdyYWRsZWNsYXNzcGF0aGNvbnRhaW5lciIvPg0KCTxjbGFzc3BhdGhlbnRyeSBraW5kPSJvdXRwdXQiIHBhdGg9ImJpbi9kZWZhdWx0Ii8+DQo8L2NsYXNzcGF0aD4NCg=="}, response: {"metadata":{"result":"ok"},"data":null,"is_error":false,"error":""}, error:<nil>	{"source": "sync.down"}
2021-06-26T13:14:09.787+0300	INFO	request: {"metadata":{"filename":"TransactionTest.javax","method":"save","path":"java/kubemq-java/examples/src/test/java/io/kubemq/sdk/transaction"},"data":""}, response: {"metadata":{"result":"ok"},"data":null,"is_error":false,"error":""}, error:<nil>	{"source": "sync.down"}
2021-06-26T13:14:09.800+0300	INFO	request: {"metadata":{"filename":".project","method":"save","path":"java/kubemq-java/kubemq-java-sdk"},"data":"PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0iVVRGLTgiPz4NCjxwcm9qZWN0RGVzY3JpcHRpb24+DQoJPG5hbWU+a3ViZW1xLWphdmEtc2RrPC9uYW1lPg0KCTxjb21tZW50PlByb2plY3Qga3ViZW1xLWphdmEtc2RrIGNyZWF0ZWQgYnkgQnVpbGRzaGlwLjwvY29tbWVudD4NCgk8cHJvamVjdHM+DQoJPC9wcm9qZWN0cz4NCgk8YnVpbGRTcGVjPg0KCQk8YnVpbGRDb21tYW5kPg0KCQkJPG5hbWU+b3JnLmVjbGlwc2UuamR0LmNvcmUuamF2YWJ1aWxkZXI8L25hbWU+DQoJCQk8YXJndW1lbnRzPg0KCQkJPC9hcmd1bWVudHM+DQoJCTwvYnVpbGRDb21tYW5kPg0KCQk8YnVpbGRDb21tYW5kPg0KCQkJPG5hbWU+b3JnLmVjbGlwc2UuYnVpbGRzaGlwLmNvcmUuZ3JhZGxlcHJvamVjdGJ1aWxkZXI8L25hbWU+DQoJCQk8YXJndW1lbnRzPg0KCQkJPC9hcmd1bWVudHM+DQoJCTwvYnVpbGRDb21tYW5kPg0KCTwvYnVpbGRTcGVjPg0KCTxuYXR1cmVzPg0KCQk8bmF0dXJlPm9yZy5lY2xpcHNlLmpkdC5jb3JlLmphdmFuYXR1cmU8L25hdHVyZT4NCgkJPG5hdHVyZT5vcmcuZWNsaXBzZS5idWlsZHNoaXAuY29yZS5ncmFkbGVwcm9qZWN0bmF0dXJlPC9uYXR1cmU+DQoJPC9uYXR1cmVzPg0KPC9wcm9qZWN0RGVzY3JpcHRpb24+DQo="}, response: {"metadata":{"result":"ok"},"data":null,"is_error":false,"error":""}, error:<nil>	{"source": "sync.down"}
2021-06-26T13:14:09.834+0300	INFO	request: {"metadata":{"filename":"CommandQueryResponder.java","method":"save","path":"java/kubemq-java/examples/src/main/java/io/kubemq/sdk/examples/commandqueryresponder"},"data":"LyoNCiAqIE1JVCBMaWNlbnNlDQogKg0KICogQ29weXJpZ2h0IChjKSAyMDE4IEt1YmVNUQ0KICoNCiAqIFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhIGNvcHkNCiAqIG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlICJTb2Z0d2FyZSIpLCB0byBkZWFsDQogKiBpbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzDQogKiB0byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsDQogKiBjb3BpZXMgb2YgdGhlIFNvZnR3YXJlLCBhbmQgdG8gcGVybWl0IHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXMNCiAqIGZ1cm5pc2hlZCB0byBkbyBzbywgc3ViamVjdCB0byB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnM6DQogKg0KICogVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWQgaW4gYWxsDQogKiBjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLg0KICoNCiAqIFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCAiQVMgSVMiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTIE9SDQogKiBJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWSwNCiAqIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOIE5PIEVWRU5UIFNIQUxMIFRIRQ0KICogQVVUSE9SUyBPUiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSwgREFNQUdFUyBPUiBPVEhFUg0KICogTElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUiBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSwNCiAqIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRSBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU4gVEhFDQogKiBTT0ZUV0FSRS4NCiAqLw0KcGFja2FnZSBpby5rdWJlbXEuc2RrLmV4YW1wbGVzLmNvbW1hbmRxdWVyeXJlc3BvbmRlcjsNCg0KaW1wb3J0IGlvLmt1YmVtcS5zZGsuYmFzaWMuU2VydmVyQWRkcmVzc05vdFN1cHBsaWVkRXhjZXB0aW9uOw0KaW1wb3J0IGlvLmt1YmVtcS5zZGsuY29tbWFuZHF1ZXJ5LlJlc3BvbmRlcjsNCmltcG9ydCBpby5rdWJlbXEuc2RrLmNvbW1hbmRxdWVyeS5SZXNwb25zZTsNCmltcG9ydCBpby5rdWJlbXEuc2RrLmV4YW1wbGVzLmNvbW1vbmV4YW1wbGUuQmFzZUV4YW1wbGU7DQppbXBvcnQgaW8ua3ViZW1xLnNkay5zdWJzY3JpcHRpb24uU3Vic2NyaWJlUmVxdWVzdDsNCmltcG9ydCBpby5rdWJlbXEuc2RrLnN1YnNjcmlwdGlvbi5TdWJzY3JpYmVUeXBlOw0KDQppbXBvcnQgamF2YXgubmV0LnNzbC5TU0xFeGNlcHRpb247DQppbXBvcnQgamF2YS50ZXh0Lk1lc3NhZ2VGb3JtYXQ7DQppbXBvcnQgamF2YS50aW1lLkxvY2FsRGF0ZVRpbWU7DQoNCmNsYXNzIENvbW1hbmRRdWVyeVJlc3BvbmRlciBleHRlbmRzIEJhc2VFeGFtcGxlIHsNCg0KICAgIHByaXZhdGUgUmVzcG9uZGVyLlJlcXVlc3RSZXNwb25zZU9ic2VydmVyIEhhbmRsZUluY29taW5nUmVxdWVzdHM7DQogICAgcHJpdmF0ZSBSZXNwb25kZXIgcmVzcG9uZGVyOw0KDQogICAgQ29tbWFuZFF1ZXJ5UmVzcG9uZGVyKCkgdGhyb3dzIFNlcnZlckFkZHJlc3NOb3RTdXBwbGllZEV4Y2VwdGlvbiwgU1NMRXhjZXB0aW9uIHsNCiAgICAgICAgc3VwZXIoIkNvbW1hbmRRdWVyeVJlc3BvbmRlciIpOw0KICAgICAgICByZXNwb25kZXIgPSBuZXcgUmVzcG9uZGVyKCk7DQogICAgICAgIEhhbmRsZUluY29taW5nUmVxdWVzdHMgPSByZXF1ZXN0IC0+IHsNCiAgICAgICAgICAgIHRoaXMubG9nZ2VyLndhcm4oTWVzc2FnZUZvcm1hdC5mb3JtYXQoIlN1YnNjcmliZXIgUmVjZWl2ZWQgRXZlbnQ6IE1ldGFkYXRhOicnezB9JycsIENoYW5uZWw6Jyd7MX0nJyIsDQogICAgICAgICAgICAgICAgICAgIHJlcXVlc3QuZ2V0TWV0YWRhdGEoKSwgcmVxdWVzdC5nZXRDaGFubmVsKCkpKTsNCg0KICAgICAgICAgICAgUmVzcG9uc2UgcmVzcG9uc2UgPSBuZXcgUmVzcG9uc2UocmVxdWVzdCk7DQogICAgICAgICAgICByZXNwb25zZS5zZXRDYWNoZUhpdChmYWxzZSk7DQogICAgICAgICAgICByZXNwb25zZS5zZXRFcnJvcigiTm9uZSIpOw0KICAgICAgICAgICAgcmVzcG9uc2Uuc2V0Q2xpZW50SUQodGhpcy5nZXRDbGllbnRJRCgpKTsNCiAgICAgICAgICAgIHJlc3BvbnNlLnNldEJvZHkoIk9LIi5nZXRCeXRlcygpKTsNCiAgICAgICAgICAgIHJlc3BvbnNlLnNldEV4ZWN1dGVkKHRydWUpOw0KICAgICAgICAgICAgcmVzcG9uc2Uuc2V0TWV0YWRhdGEoIk9LIik7DQogICAgICAgICAgICByZXNwb25zZS5zZXRUaW1lc3RhbXAoTG9jYWxEYXRlVGltZS5ub3coKSk7DQogICAgICAgICAgICByZXR1cm4gcmVzcG9uc2U7DQogICAgICAgIH07DQogICAgICAgIENyZWF0ZVN1YnNjcmliZVRvUXVlcmllcygpOw0KICAgICAgICBDcmVhdGVTdWJzY3JpYmVUb0NvbW1hbmRzKCk7DQogICAgfQ0KDQogICAgcHJpdmF0ZSB2b2lkIENyZWF0ZVN1YnNjcmliZVRvQ29tbWFuZHMoKQ0KICAgICAgICAgICAgdGhyb3dzIFNlcnZlckFkZHJlc3NOb3RTdXBwbGllZEV4Y2VwdGlvbiwgU1NMRXhjZXB0aW9uIHsNCiAgICAgICAgU3Vic2NyaWJlUmVxdWVzdCBzdWJzY3JpYmVSZXF1ZXN0ID0gQ3JlYXRlU3Vic2NyaWJlUmVxdWVzdChTdWJzY3JpYmVUeXBlLlF1ZXJpZXMpOw0KICAgICAgICByZXNwb25kZXIuU3Vic2NyaWJlVG9SZXF1ZXN0cyhzdWJzY3JpYmVSZXF1ZXN0LCBIYW5kbGVJbmNvbWluZ1JlcXVlc3RzKTsNCiAgICB9DQoNCiAgICBwcml2YXRlIHZvaWQgQ3JlYXRlU3Vic2NyaWJlVG9RdWVyaWVzKCkgdGhyb3dzIFNlcnZlckFkZHJlc3NOb3RTdXBwbGllZEV4Y2VwdGlvbiwgU1NMRXhjZXB0aW9uIHsNCiAgICAgICAgU3Vic2NyaWJlUmVxdWVzdCBzdWJzY3JpYmVSZXF1ZXN0ID0gQ3JlYXRlU3Vic2NyaWJlUmVxdWVzdChTdWJzY3JpYmVUeXBlLkNvbW1hbmRzKTsNCiAgICAgICAgcmVzcG9uZGVyLlN1YnNjcmliZVRvUmVxdWVzdHMoc3Vic2NyaWJlUmVxdWVzdCwgSGFuZGxlSW5jb21pbmdSZXF1ZXN0cyk7DQogICAgfQ0KDQp9DQo="}, response: {"metadata":{"result":"ok"},"data":null,"is_error":false,"error":""}, error:<nil>	{"source": "sync.down"}
2021-06-26T13:14:09.841+0300	INFO	request: {"metadata":{"filename":"org.eclipse.jdt.core.prefs","method":"save","path":"java/kubemq-java/examples/.settings"},"data":"ZWNsaXBzZS5wcmVmZXJlbmNlcy52ZXJzaW9uPTENCm9yZy5lY2xpcHNlLmpkdC5jb3JlLmNvbXBpbGVyLmNvZGVnZW4udGFyZ2V0UGxhdGZvcm09MS44DQpvcmcuZWNsaXBzZS5qZHQuY29yZS5jb21waWxlci5jb21wbGlhbmNlPTEuOA0Kb3JnLmVjbGlwc2UuamR0LmNvcmUuY29tcGlsZXIuc291cmNlPTEuOA0K"}, response: {"metadata":{"result":"ok"},"data":null,"is_error":false,"error":""}, error:<nil>	{"source": "sync.down"}
2021-06-26T13:14:09.857+0300	INFO	request: {"metadata":{"filename":"Program.java","method":"save","path":"java/kubemq-java/examples/src/main/java/io/kubemq/sdk/examples/eventsender"},"data":"LyoNCiAqIE1JVCBMaWNlbnNlDQogKg0KICogQ29weXJpZ2h0IChjKSAyMDE4IEt1YmVNUQ0KICoNCiAqIFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhIGNvcHkNCiAqIG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlICJTb2Z0d2FyZSIpLCB0byBkZWFsDQogKiBpbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzDQogKiB0byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsDQogKiBjb3BpZXMgb2YgdGhlIFNvZnR3YXJlLCBhbmQgdG8gcGVybWl0IHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXMNCiAqIGZ1cm5pc2hlZCB0byBkbyBzbywgc3ViamVjdCB0byB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnM6DQogKg0KICogVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWQgaW4gYWxsDQogKiBjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLg0KICoNCiAqIFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCAiQVMgSVMiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTIE9SDQogKiBJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWSwNCiAqIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOIE5PIEVWRU5UIFNIQUxMIFRIRQ0KICogQVVUSE9SUyBPUiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSwgREFNQUdFUyBPUiBPVEhFUg0KICogTElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUiBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSwNCiAqIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRSBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU4gVEhFDQogKiBTT0ZUV0FSRS4NCiAqLw0KcGFja2FnZSBpby5rdWJlbXEuc2RrLmV4YW1wbGVzLmV2ZW50c2VuZGVyOw0KDQoNCmltcG9ydCBpby5rdWJlbXEuc2RrLmJhc2ljLlNlcnZlckFkZHJlc3NOb3RTdXBwbGllZEV4Y2VwdGlvbjsNCg0KaW1wb3J0IGphdmF4Lm5ldC5zc2wuU1NMRXhjZXB0aW9uOw0KaW1wb3J0IGphdmEuaW8uSU9FeGNlcHRpb247DQoNCnB1YmxpYyBjbGFzcyBQcm9ncmFtIHsNCg0KICAgIHB1YmxpYyBzdGF0aWMgdm9pZCBtYWluKFN0cmluZ1tdIGFyZ3MpIHsNCiAgICAgICAgU3lzdGVtLm91dC5wcmludGxuKCk7DQogICAgICAgIFN5c3RlbS5vdXQucHJpbnRsbigiU3RhcnRpbmcgUHViU3ViU2VuZGVyLi4uIik7DQogICAgICAgIFN5c3RlbS5vdXQucHJpbnRsbigpOw0KICAgICAgICBTeXN0ZW0ub3V0LnByaW50bG4oIlByZXNzICdFbnRlcicgdG8gc3RvcCB0aGUgYXBwbGljYXRpb24uLi4iKTsNCiAgICAgICAgU3lzdGVtLm91dC5wcmludGxuKCk7DQoNCiAgICAgICAgdHJ5IHsNCiAgICAgICAgICAgIG5ldyBFdmVudFNlbmRlcigpOw0KICAgICAgICB9IGNhdGNoIChTZXJ2ZXJBZGRyZXNzTm90U3VwcGxpZWRFeGNlcHRpb24gZSkgew0KICAgICAgICAgICAgU3lzdGVtLm91dC5wcmludGxuKCJFcnJvcjogQ2FuIG5vdCBkZXRlcm1pbmUgS3ViZU1RIHNlcnZlciBhZGRyZXNzLiIpOw0KICAgICAgICB9ICBjYXRjaCAoU1NMRXhjZXB0aW9uIGUpIHsNCiAgICAgICAgICAgIFN5c3RlbS5vdXQucHJpbnRsbigiRXJyb3I6IGVycm9yIGRldGVjdGVkIGJ5IGFuIFNTTCBzdWJzeXN0ZW0iKTsNCiAgICAgICAgfQ0KDQogICAgICAgIHRyeSB7DQogICAgICAgICAgICBpbnQgcmVhZCA9IFN5c3RlbS5pbi5yZWFkKCk7DQogICAgICAgIH0gY2F0Y2ggKElPRXhjZXB0aW9uIGUpIHsNCiAgICAgICAgICAgIFN5c3RlbS5vdXQucHJpbnRsbigiRXJyb3I6ICBJL08gZXJyb3Igb2NjdXJyZWQuIik7DQogICAgICAgIH0NCiAgICB9DQoNCn0NCg=="}, response: {"metadata":{"result":"ok"},"data":null,"is_error":false,"error":""}, error:<nil>	{"source": "sync.down"}
2021-06-26T13:14:10.243+0300	INFO	request: {"metadata":{"filename":"misc.xml","method":"save","path":"java/kubemq-java/.idea"},"data":"PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0iVVRGLTgiPz4NCjxwcm9qZWN0IHZlcnNpb249IjQiPg0KICA8Y29tcG9uZW50IG5hbWU9IkV4dGVybmFsU3RvcmFnZUNvbmZpZ3VyYXRpb25NYW5hZ2VyIiBlbmFibGVkPSJ0cnVlIiAvPg0KICA8Y29tcG9uZW50IG5hbWU9IlByb2plY3RSb290TWFuYWdlciIgdmVyc2lvbj0iMiIgbGFuZ3VhZ2VMZXZlbD0iSkRLXzFfOCIgcHJvamVjdC1qZGstbmFtZT0iMS44IiBwcm9qZWN0LWpkay10eXBlPSJKYXZhU0RLIiAvPg0KPC9wcm9qZWN0Pg=="}, response: {"metadata":{"result":"ok"},"data":null,"is_error":false,"error":""}, error:<nil>	{"source": "sync.down"}
2021-06-26T13:14:10.270+0300	INFO	request: {"metadata":{"filename":"lombok.config","method":"save","path":"java/kubemq-java/kubemq-java-sdk"},"data":"IyBUaGlzIGZpbGUgaXMgZ2VuZXJhdGVkIGJ5IHRoZSAnaW8uZnJlZWZhaXIubG9tYm9rJyBHcmFkbGUgcGx1Z2luDQpjb25maWcuc3RvcEJ1YmJsaW5nID0gdHJ1ZQ0K"}, response: {"metadata":{"result":"ok"},"data":null,"is_error":false,"error":""}, error:<nil>	{"source": "sync.down"}
2021-06-26T13:14:10.335+0300	INFO	request: {"metadata":{"filename":"commit-msg.sample","method":"save","path":"java/kubemq-java/.git/hooks"},"data":"IyEvYmluL3NoCiMKIyBBbiBleGFtcGxlIGhvb2sgc2NyaXB0IHRvIGNoZWNrIHRoZSBjb21taXQgbG9nIG1lc3NhZ2UuCiMgQ2FsbGVkIGJ5ICJnaXQgY29tbWl0IiB3aXRoIG9uZSBhcmd1bWVudCwgdGhlIG5hbWUgb2YgdGhlIGZpbGUKIyB0aGF0IGhhcyB0aGUgY29tbWl0IG1lc3NhZ2UuICBUaGUgaG9vayBzaG91bGQgZXhpdCB3aXRoIG5vbi16ZXJvCiMgc3RhdHVzIGFmdGVyIGlzc3VpbmcgYW4gYXBwcm9wcmlhdGUgbWVzc2FnZSBpZiBpdCB3YW50cyB0byBzdG9wIHRoZQojIGNvbW1pdC4gIFRoZSBob29rIGlzIGFsbG93ZWQgdG8gZWRpdCB0aGUgY29tbWl0IG1lc3NhZ2UgZmlsZS4KIwojIFRvIGVuYWJsZSB0aGlzIGhvb2ssIHJlbmFtZSB0aGlzIGZpbGUgdG8gImNvbW1pdC1tc2ciLgoKIyBVbmNvbW1lbnQgdGhlIGJlbG93IHRvIGFkZCBhIFNpZ25lZC1vZmYtYnkgbGluZSB0byB0aGUgbWVzc2FnZS4KIyBEb2luZyB0aGlzIGluIGEgaG9vayBpcyBhIGJhZCBpZGVhIGluIGdlbmVyYWwsIGJ1dCB0aGUgcHJlcGFyZS1jb21taXQtbXNnCiMgaG9vayBpcyBtb3JlIHN1aXRlZCB0byBpdC4KIwojIFNPQj0kKGdpdCB2YXIgR0lUX0FVVEhPUl9JREVOVCB8IHNlZCAtbiAncy9eXCguKj5cKS4qJC9TaWduZWQtb2ZmLWJ5OiBcMS9wJykKIyBncmVwIC1xcyAiXiRTT0IiICIkMSIgfHwgZWNobyAiJFNPQiIgPj4gIiQxIgoKIyBUaGlzIGV4YW1wbGUgY2F0Y2hlcyBkdXBsaWNhdGUgU2lnbmVkLW9mZi1ieSBsaW5lcy4KCnRlc3QgIiIgPSAiJChncmVwICdeU2lnbmVkLW9mZi1ieTogJyAiJDEiIHwKCSBzb3J0IHwgdW5pcSAtYyB8IHNlZCAtZSAnL15bIAldKjFbIAldL2QnKSIgfHwgewoJZWNobyA+JjIgRHVwbGljYXRlIFNpZ25lZC1vZmYtYnkgbGluZXMuCglleGl0IDEKfQo="}, response: {"metadata":{"result":"ok"},"data":null,"is_error":false,"error":""}, error:<nil>	{"source": "sync.down"}
2021-06-26T13:14:10.335+0300	INFO	request: {"metadata":{"filename":"Initiator.java","method":"save","path":"java/kubemq-java/kubemq-java-sdk/src/main/java/io/kubemq/sdk/commandquery/lowlevel"},"data":""}, response: {"metadata":{"result":"ok"},"data":null,"is_error":false,"error":""}, error:<nil>	{"source": "sync.down"}
2021-06-26T13:14:10.361+0300	INFO	request: {"metadata":{"filename":"CommandQueryInitiator.java","method":"save","path":"java/kubemq-java/examples/src/main/java/io/kubemq/sdk/examples/commandqueryinitiator"},"data":"LyoNCiAqIE1JVCBMaWNlbnNlDQogKg0KICogQ29weXJpZ2h0IChjKSAyMDE4IEt1YmVNUQ0KICoNCiAqIFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhIGNvcHkNCiAqIG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlICJTb2Z0d2FyZSIpLCB0byBkZWFsDQogKiBpbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzDQogKiB0byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsDQogKiBjb3BpZXMgb2YgdGhlIFNvZnR3YXJlLCBhbmQgdG8gcGVybWl0IHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXMNCiAqIGZ1cm5pc2hlZCB0byBkbyBzbywgc3ViamVjdCB0byB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnM6DQogKg0KICogVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWQgaW4gYWxsDQogKiBjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLg0KICoNCiAqIFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCAiQVMgSVMiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTIE9SDQogKiBJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWSwNCiAqIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOIE5PIEVWRU5UIFNIQUxMIFRIRQ0KICogQVVUSE9SUyBPUiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSwgREFNQUdFUyBPUiBPVEhFUg0KICogTElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUiBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSwNCiAqIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRSBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU4gVEhFDQogKiBTT0ZUV0FSRS4NCiAqLw0KcGFja2FnZSBpby5rdWJlbXEuc2RrLmV4YW1wbGVzLmNvbW1hbmRxdWVyeWluaXRpYXRvcjsNCg0KaW1wb3J0IGlvLmt1YmVtcS5zZGsuYmFzaWMuU2VydmVyQWRkcmVzc05vdFN1cHBsaWVkRXhjZXB0aW9uOw0KaW1wb3J0IGlvLmt1YmVtcS5zZGsuY29tbWFuZHF1ZXJ5LlJlcXVlc3RUeXBlOw0KaW1wb3J0IGlvLmt1YmVtcS5zZGsuY29tbWFuZHF1ZXJ5LlJlc3BvbnNlOw0KaW1wb3J0IGlvLmt1YmVtcS5zZGsuY29tbWFuZHF1ZXJ5Lmxvd2xldmVsLkluaXRpYXRvcjsNCmltcG9ydCBpby5rdWJlbXEuc2RrLmV4YW1wbGVzLmNvbW1vbmV4YW1wbGUuQmFzZUV4YW1wbGU7DQoNCmltcG9ydCBqYXZheC5uZXQuc3NsLlNTTEV4Y2VwdGlvbjsNCg0KY2xhc3MgQ29tbWFuZFF1ZXJ5SW5pdGlhdG9yIGV4dGVuZHMgQmFzZUV4YW1wbGUgew0KDQogICAgQ29tbWFuZFF1ZXJ5SW5pdGlhdG9yKCkgdGhyb3dzIFNlcnZlckFkZHJlc3NOb3RTdXBwbGllZEV4Y2VwdGlvbiwgU1NMRXhjZXB0aW9uIHsNCiAgICAgICAgc3VwZXIoIkNvbW1hbmRRdWVyeUluaXRpYXRvciIpOw0KICAgICAgICBTZW5kTG93TGV2ZWxSZXF1ZXN0KCk7DQogICAgfQ0KDQogICAgcHJpdmF0ZSB2b2lkIFNlbmRMb3dMZXZlbFJlcXVlc3QoKSB0aHJvd3MgU1NMRXhjZXB0aW9uLCBTZXJ2ZXJBZGRyZXNzTm90U3VwcGxpZWRFeGNlcHRpb24gew0KICAgICAgICBJbml0aWF0b3IgaW5pdGlhdG9yID0gbmV3IEluaXRpYXRvcigpOw0KICAgICAgICBSZXNwb25zZSByZXNwb25zZSA9IGluaXRpYXRvci5TZW5kUmVxdWVzdChDcmVhdGVMb3dMZXZlbFJlcXVlc3QoUmVxdWVzdFR5cGUuUXVlcnkpKTsNCiAgICAgICAgaW5pdGlhdG9yLlNlbmRSZXF1ZXN0KENyZWF0ZUxvd0xldmVsUmVxdWVzdChSZXF1ZXN0VHlwZS5Db21tYW5kKSk7DQogICAgfQ0KfQ0K"}, response: {"metadata":{"result":"ok"},"data":null,"is_error":false,"error":""}, error:<nil>	{"source": "sync.down"}
2021-06-26T13:14:10.737+0300	INFO	request: {"metadata":{"filename":".gitignore","method":"save","path":"java/poc/test/.idea"},"data":"IyBEZWZhdWx0IGlnbm9yZWQgZmlsZXMNCi9zaGVsZi8NCi93b3Jrc3BhY2UueG1sDQojIERhdGFzb3VyY2UgbG9jYWwgc3RvcmFnZSBpZ25vcmVkIGZpbGVzDQovLi4vLi4vLi4vLi4vLi4vLi4vLi4vOlxEZXZlbG9wbWVudFxiaXRidWNrZXRcamF2YVxwb2NcdGVzdFwuaWRlYS9kYXRhU291cmNlcy8NCi9kYXRhU291cmNlcy5sb2NhbC54bWwNCiMgRWRpdG9yLWJhc2VkIEhUVFAgQ2xpZW50IHJlcXVlc3RzDQovaHR0cFJlcXVlc3RzLw0K"}, response: {"metadata":{"result":"ok"},"data":null,"is_error":false,"error":""}, error:<nil>	{"source": "sync.down"}
2021-06-26T13:14:10.806+0300	INFO	request: {"metadata":{"filename":"Program.java","method":"save","path":"java/kubemq-java/examples/src/main/java/io/kubemq/sdk/examples/commandqueryresponderasync"},"data":"cGFja2FnZSBpby5rdWJlbXEuc2RrLmV4YW1wbGVzLmNvbW1hbmRxdWVyeXJlc3BvbmRlcmFzeW5jOw0KDQppbXBvcnQgaW8ua3ViZW1xLnNkay5iYXNpYy5TZXJ2ZXJBZGRyZXNzTm90U3VwcGxpZWRFeGNlcHRpb247DQoNCmltcG9ydCBqYXZheC5uZXQuc3NsLlNTTEV4Y2VwdGlvbjsNCmltcG9ydCBqYXZhLmlvLklPRXhjZXB0aW9uOw0KDQpwdWJsaWMgY2xhc3MgUHJvZ3JhbSB7DQogICAgcHVibGljIHN0YXRpYyB2b2lkIG1haW4oU3RyaW5nW10gYXJncykgew0KICAgICAgICBTeXN0ZW0ub3V0LnByaW50bG4oKTsNCiAgICAgICAgU3lzdGVtLm91dC5wcmludGxuKCJTdGFydGluZyBSZXFSZXBSZXNwb25kZXJBc3luYy4uLiIpOw0KICAgICAgICBTeXN0ZW0ub3V0LnByaW50bG4oKTsNCiAgICAgICAgU3lzdGVtLm91dC5wcmludGxuKCJQcmVzcyAnRW50ZXInIHRvIHN0b3AgdGhlIGFwcGxpY2F0aW9uLi4uIik7DQogICAgICAgIFN5c3RlbS5vdXQucHJpbnRsbigpOw0KDQogICAgICAgIHRyeSB7DQogICAgICAgICAgICBuZXcgQ29tbWFuZFF1ZXJ5UmVzcG9uZGVyQXN5bmMoKTsNCiAgICAgICAgfSBjYXRjaCAoU2VydmVyQWRkcmVzc05vdFN1cHBsaWVkRXhjZXB0aW9uIGUpIHsNCiAgICAgICAgICAgIFN5c3RlbS5vdXQucHJpbnRsbigiRXJyb3I6IENhbiBub3QgZGV0ZXJtaW5lIEt1YmVNUSBzZXJ2ZXIgYWRkcmVzcy4iKTsNCiAgICAgICAgfSBjYXRjaCAoU1NMRXhjZXB0aW9uIGUpIHsNCiAgICAgICAgICAgIFN5c3RlbS5vdXQucHJpbnRsbigiRXJyb3I6IGVycm9yIGRldGVjdGVkIGJ5IGFuIFNTTCBzdWJzeXN0ZW0iKTsNCiAgICAgICAgfQ0KDQogICAgICAgIHRyeSB7DQogICAgICAgICAgICBpbnQgcmVhZCA9IFN5c3RlbS5pbi5yZWFkKCk7DQogICAgICAgIH0gY2F0Y2ggKElPRXhjZXB0aW9uIGUpIHsNCiAgICAgICAgICAgIFN5c3RlbS5vdXQucHJpbnRsbigiRXJyb3I6ICBJL08gZXJyb3Igb2NjdXJyZWQuIik7DQogICAgICAgIH0NCiAgICB9DQp9DQo="}, response: {"metadata":{"result":"ok"},"data":null,"is_error":false,"error":""}, error:<nil>	{"source": "sync.down"}
2021-06-26T13:14:10.807+0300	INFO	request: {"metadata":{"filename":"misc.xml","method":"save","path":"java/poc/test/.idea"},"data":"PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0iVVRGLTgiPz4NCjxwcm9qZWN0IHZlcnNpb249IjQiPg0KICA8Y29tcG9uZW50IG5hbWU9IlByb2plY3RLZXkiPg0KICAgIDxvcHRpb24gbmFtZT0ic3RhdGUiIHZhbHVlPSJwcm9qZWN0Oi8vZTI4MDRmMDUtNTMxNS00ZmM2LWExMjEtYzUyMmE2YzI2NDcwIiAvPg0KICA8L2NvbXBvbmVudD4NCiAgPGNvbXBvbmVudCBuYW1lPSJQcm9qZWN0Um9vdE1hbmFnZXIiIHZlcnNpb249IjIiIGxhbmd1YWdlTGV2ZWw9IkpES18xNiIgZGVmYXVsdD0idHJ1ZSIgcHJvamVjdC1qZGstbmFtZT0iMTYiIHByb2plY3QtamRrLXR5cGU9IkphdmFTREsiPg0KICAgIDxvdXRwdXQgdXJsPSJmaWxlOi8vJFBST0pFQ1RfRElSJC9vdXQiIC8+DQogIDwvY29tcG9uZW50Pg0KPC9wcm9qZWN0Pg=="}, response: {"metadata":{"result":"ok"},"data":null,"is_error":false,"error":""}, error:<nil>	{"source": "sync.down"}
2021-06-26T13:14:10.870+0300	INFO	request: {"metadata":{"filename":"org.eclipse.buildship.core.prefs","method":"save","path":"java/kubemq-java/.settings"},"data":"Y29ubmVjdGlvbi5wcm9qZWN0LmRpcj0NCmVjbGlwc2UucHJlZmVyZW5jZXMudmVyc2lvbj0xDQo="}, response: {"metadata":{"result":"ok"},"data":null,"is_error":false,"error":""}, error:<nil>	{"source": "sync.down"}
2021-06-26T13:14:11.037+0300	INFO	request: {"metadata":{"filename":"Transaction.java","method":"save","path":"java/kubemq-java/kubemq-java-sdk/src/main/java/io/kubemq/sdk/queue"},"data":""}, response: {"metadata":{"result":"ok"},"data":null,"is_error":false,"error":""}, error:<nil>	{"source": "sync.down"}
2021-06-26T13:14:11.288+0300	INFO	request: {"metadata":{"filename":"CommandQueryResponderAsync.java","method":"save","path":"java/kubemq-java/examples/src/main/java/io/kubemq/sdk/examples/commandqueryresponderasync"},"data":"LyoNCiAqIE1JVCBMaWNlbnNlDQogKg0KICogQ29weXJpZ2h0IChjKSAyMDE4IEt1YmVNUQ0KICoNCiAqIFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhIGNvcHkNCiAqIG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlICJTb2Z0d2FyZSIpLCB0byBkZWFsDQogKiBpbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzDQogKiB0byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsDQogKiBjb3BpZXMgb2YgdGhlIFNvZnR3YXJlLCBhbmQgdG8gcGVybWl0IHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXMNCiAqIGZ1cm5pc2hlZCB0byBkbyBzbywgc3ViamVjdCB0byB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnM6DQogKg0KICogVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWQgaW4gYWxsDQogKiBjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLg0KICoNCiAqIFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCAiQVMgSVMiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTIE9SDQogKiBJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWSwNCiAqIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOIE5PIEVWRU5UIFNIQUxMIFRIRQ0KICogQVVUSE9SUyBPUiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSwgREFNQUdFUyBPUiBPVEhFUg0KICogTElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUiBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSwNCiAqIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRSBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU4gVEhFDQogKiBTT0ZUV0FSRS4NCiAqLw0KcGFja2FnZSBpby5rdWJlbXEuc2RrLmV4YW1wbGVzLmNvbW1hbmRxdWVyeXJlc3BvbmRlcmFzeW5jOw0KDQppbXBvcnQgaW8ua3ViZW1xLnNkay5iYXNpYy5TZXJ2ZXJBZGRyZXNzTm90U3VwcGxpZWRFeGNlcHRpb247DQppbXBvcnQgaW8ua3ViZW1xLnNkay5jb21tYW5kcXVlcnkuUmVxdWVzdFJlY2VpdmU7DQppbXBvcnQgaW8ua3ViZW1xLnNkay5jb21tYW5kcXVlcnkuUmVzcG9uZGVyOw0KaW1wb3J0IGlvLmt1YmVtcS5zZGsuY29tbWFuZHF1ZXJ5LlJlc3BvbnNlOw0KaW1wb3J0IGlvLmt1YmVtcS5zZGsuZXhhbXBsZXMuY29tbW9uZXhhbXBsZS5CYXNlRXhhbXBsZTsNCmltcG9ydCBpby5rdWJlbXEuc2RrLnN1YnNjcmlwdGlvbi5TdWJzY3JpYmVSZXF1ZXN0Ow0KaW1wb3J0IGlvLmt1YmVtcS5zZGsuc3Vic2NyaXB0aW9uLlN1YnNjcmliZVR5cGU7DQppbXBvcnQgb3JnLnNsZjRqLkxvZ2dlcjsNCg0KaW1wb3J0IGphdmF4Lm5ldC5zc2wuU1NMRXhjZXB0aW9uOw0KaW1wb3J0IGphdmEudGV4dC5NZXNzYWdlRm9ybWF0Ow0KaW1wb3J0IGphdmEudGltZS5Mb2NhbERhdGVUaW1lOw0KDQpjbGFzcyBDb21tYW5kUXVlcnlSZXNwb25kZXJBc3luYyBleHRlbmRzIEJhc2VFeGFtcGxlIHsNCg0KICAgIHByaXZhdGUgUmVzcG9uZGVyLlJlcXVlc3RSZXNwb25zZUFzeW5jT2JzZXJ2ZXIgSGFuZGxlSW5jb21pbmdSZXF1ZXN0czsNCiAgICBwcml2YXRlIFJlc3BvbmRlciByZXNwb25kZXI7DQoNCiAgICBDb21tYW5kUXVlcnlSZXNwb25kZXJBc3luYygpIHRocm93cyBTZXJ2ZXJBZGRyZXNzTm90U3VwcGxpZWRFeGNlcHRpb24sIFNTTEV4Y2VwdGlvbiB7DQogICAgICAgIHN1cGVyKCJDb21tYW5kUXVlcnlSZXNwb25kZXIiKTsNCiAgICAgICAgU3RyaW5nIGNsaWVudElkID0gdGhpcy5nZXRDbGllbnRJRCgpOw0KICAgICAgICBMb2dnZXIgbG9nID0gdGhpcy5sb2dnZXI7DQogICAgICAgIHJlc3BvbmRlciA9IG5ldyBSZXNwb25kZXIoKTsNCiAgICAgICAgSGFuZGxlSW5jb21pbmdSZXF1ZXN0cyA9IG5ldyBSZXNwb25kZXIuUmVxdWVzdFJlc3BvbnNlQXN5bmNPYnNlcnZlcigpIHsNCiAgICAgICAgICAgIEBPdmVycmlkZQ0KICAgICAgICAgICAgcHVibGljIFJlc3BvbnNlIG9uTmV4dChSZXF1ZXN0UmVjZWl2ZSByZXF1ZXN0KSB7DQogICAgICAgICAgICAgICAgbG9nLndhcm4oTWVzc2FnZUZvcm1hdC5mb3JtYXQoDQogICAgICAgICAgICAgICAgICAgICAgICAiU3Vic2NyaWJlciBSZWNlaXZlZCBFdmVudDogTWV0YWRhdGE6Jyd7MH0nJywgQ2hhbm5lbDonJ3sxfScnIiwNCiAgICAgICAgICAgICAgICAgICAgICAgIHJlcXVlc3QuZ2V0TWV0YWRhdGEoKSwNCiAgICAgICAgICAgICAgICAgICAgICAgIHJlcXVlc3QuZ2V0Q2hhbm5lbCgpDQogICAgICAgICAgICAgICAgKSk7DQoNCiAgICAgICAgICAgICAgICBSZXNwb25zZSByZXNwb25zZSA9IG5ldyBSZXNwb25zZShyZXF1ZXN0KTsNCiAgICAgICAgICAgICAgICByZXNwb25zZS5zZXRDYWNoZUhpdChmYWxzZSk7DQogICAgICAgICAgICAgICAgcmVzcG9uc2Uuc2V0RXJyb3IoIk5vbmUiKTsNCiAgICAgICAgICAgICAgICByZXNwb25zZS5zZXRDbGllbnRJRChjbGllbnRJZCk7DQogICAgICAgICAgICAgICAgcmVzcG9uc2Uuc2V0Qm9keSgiT0siLmdldEJ5dGVzKCkpOw0KICAgICAgICAgICAgICAgIHJlc3BvbnNlLnNldEV4ZWN1dGVkKHRydWUpOw0KICAgICAgICAgICAgICAgIHJlc3BvbnNlLnNldE1ldGFkYXRhKCJPSyIpOw0KICAgICAgICAgICAgICAgIHJlc3BvbnNlLnNldFRpbWVzdGFtcChMb2NhbERhdGVUaW1lLm5vdygpKTsNCiAgICAgICAgICAgICAgICByZXR1cm4gcmVzcG9uc2U7DQogICAgICAgICAgICB9DQoNCiAgICAgICAgICAgIEBPdmVycmlkZQ0KICAgICAgICAgICAgcHVibGljIHZvaWQgb25FcnJvcihUaHJvd2FibGUgdCkgew0KICAgICAgICAgICAgICAgIGxvZy53YXJuKE1lc3NhZ2VGb3JtYXQuZm9ybWF0KCJFcnJvcjogezF9IiwgdC5nZXRNZXNzYWdlKCkpKTsNCiAgICAgICAgICAgIH0NCg0KICAgICAgICAgICAgQE92ZXJyaWRlDQogICAgICAgICAgICBwdWJsaWMgdm9pZCBvbkNvbXBsZXRlZCgpIHsNCiAgICAgICAgICAgICAgICBsb2cuaW5mbygiU3Vic2NyaWJlciBzdWJzY3JpcHRpb24gY29tcGxldGVkLiIpOw0KICAgICAgICAgICAgfQ0KICAgICAgICB9Ow0KICAgICAgICBDcmVhdGVTdWJzY3JpYmVUb1F1ZXJpZXMoKTsNCiAgICAgICAgQ3JlYXRlU3Vic2NyaWJlVG9Db21tYW5kcygpOw0KICAgIH0NCg0KICAgIHByaXZhdGUgdm9pZCBDcmVhdGVTdWJzY3JpYmVUb0NvbW1hbmRzKCkgdGhyb3dzIFNlcnZlckFkZHJlc3NOb3RTdXBwbGllZEV4Y2VwdGlvbiwgU1NMRXhjZXB0aW9uIHsNCiAgICAgICAgU3Vic2NyaWJlUmVxdWVzdCBzdWJzY3JpYmVSZXF1ZXN0ID0gQ3JlYXRlU3Vic2NyaWJlUmVxdWVzdChTdWJzY3JpYmVUeXBlLlF1ZXJpZXMpOw0KICAgICAgICByZXNwb25kZXIuU3Vic2NyaWJlVG9SZXF1ZXN0c0FzeW5jKHN1YnNjcmliZVJlcXVlc3QsIEhhbmRsZUluY29taW5nUmVxdWVzdHMpOw0KICAgIH0NCg0KICAgIHByaXZhdGUgdm9pZCBDcmVhdGVTdWJzY3JpYmVUb1F1ZXJpZXMoKSB0aHJvd3MgU2VydmVyQWRkcmVzc05vdFN1cHBsaWVkRXhjZXB0aW9uLCBTU0xFeGNlcHRpb24gew0KICAgICAgICBTdWJzY3JpYmVSZXF1ZXN0IHN1YnNjcmliZVJlcXVlc3QgPSBDcmVhdGVTdWJzY3JpYmVSZXF1ZXN0KFN1YnNjcmliZVR5cGUuQ29tbWFuZHMpOw0KICAgICAgICByZXNwb25kZXIuU3Vic2NyaWJlVG9SZXF1ZXN0c0FzeW5jKHN1YnNjcmliZVJlcXVlc3QsIEhhbmRsZUluY29taW5nUmVxdWVzdHMpOw0KICAgIH0NCg0KfQ0K"}, response: {"metadata":{"result":"ok"},"data":null,"is_error":false,"error":""}, error:<nil>	{"source": "sync.down"}
2021-06-26T13:14:11.289+0300	INFO	request: {"metadata":{"filename":"gradle-wrapper.properties","method":"save","path":"java/kubemq-java/gradle/wrapper"},"data":"I1dlZCBPY3QgMzEgMDI6NDI6NTYgSVNUIDIwMTgNCmRpc3RyaWJ1dGlvbkJhc2U9R1JBRExFX1VTRVJfSE9NRQ0KZGlzdHJpYnV0aW9uUGF0aD13cmFwcGVyL2Rpc3RzDQp6aXBTdG9yZUJhc2U9R1JBRExFX1VTRVJfSE9NRQ0KemlwU3RvcmVQYXRoPXdyYXBwZXIvZGlzdHMNCmRpc3RyaWJ1dGlvblVybD1odHRwc1w6Ly9zZXJ2aWNlcy5ncmFkbGUub3JnL2Rpc3RyaWJ1dGlvbnMvZ3JhZGxlLTQuOC1hbGwuemlwDQpncm91cElkPWt1YmVtcS1zZGstamF2YQ0K"}, response: {"metadata":{"result":"ok"},"data":null,"is_error":false,"error":""}, error:<nil>	{"source": "sync.down"}
2021-06-26T13:14:11.344+0300	INFO	request: {"metadata":{"filename":"build.gradle","method":"save","path":"java/kubemq-java/kubemq-java-sdk"},"data":"YnVpbGRzY3JpcHQgew0KICAgIHJlcG9zaXRvcmllcyB7DQogICAgICAgIG1hdmVuQ2VudHJhbCgpDQogICAgfQ0KICAgIGRlcGVuZGVuY2llcyB7DQogICAgICAgIGNsYXNzcGF0aCAnY29tLmdvb2dsZS5wcm90b2J1Zjpwcm90b2J1Zi1ncmFkbGUtcGx1Z2luOjAuOC42JyAgICAgDQogICAgICAgIGNsYXNzcGF0aCAnY29tLnZhbm5pa3RlY2g6Z3JhZGxlLW1hdmVuLXB1Ymxpc2gtcGx1Z2luOjAuOC4wJw0KICAgIH0NCn0NCg0KcGx1Z2lucyB7DQogICAgaWQgJ2lvLmZyYW56YmVja2VyLmdyYWRsZS1sb21ib2snIHZlcnNpb24gJzEuMTQnDQogICAgaWQgImNvbS5nb29nbGUucHJvdG9idWYiIHZlcnNpb24gIjAuOC42Ig0KICAgIGlkICdqYXZhJw0KfQ0KDQoNCg0KYXBwbHkgcGx1Z2luOiAnaWRlYScNCmFwcGx5IHBsdWdpbjogImNvbS52YW5uaWt0ZWNoLm1hdmVuLnB1Ymxpc2giDQoNCg0KDQoNCnNvdXJjZUNvbXBhdGliaWxpdHkgPSAxLjgNCg0KcmVwb3NpdG9yaWVzIHsNCiAgICBtYXZlbkNlbnRyYWwoKQ0KfQ0KDQpkZWYgZ3JwY1ZlcnNpb24gPSAnMS4xNi4xJw0KDQpkZXBlbmRlbmNpZXMgew0KICAgIHRlc3RDb21waWxlIGdyb3VwOiAnanVuaXQnLCBuYW1lOiAnanVuaXQnLCB2ZXJzaW9uOiAnNC4xMicNCiAgICBjb21waWxlIGdyb3VwOiAnY29tLmdvb2dsZS5wcm90b2J1ZicsIG5hbWU6ICdwcm90b2J1Zi1qYXZhJywgdmVyc2lvbjogJzMuNS4xJw0KICAgIGNvbXBpbGUgZ3JvdXA6ICdvcmcuYXBhY2hlLmNvbW1vbnMnLCBuYW1lOiAnY29tbW9ucy1sYW5nMycsIHZlcnNpb246ICczLjguMScNCiAgICBjb21waWxlICJpby5ncnBjOmdycGMtYWx0czoke2dycGNWZXJzaW9ufSINCiAgICBjb21waWxlICJpby5ncnBjOmdycGMtbmV0dHktc2hhZGVkOiR7Z3JwY1ZlcnNpb259Ig0KICAgIGNvbXBpbGUgImlvLmdycGM6Z3JwYy1wcm90b2J1Zjoke2dycGNWZXJzaW9ufSINCiAgICBjb21waWxlICJpby5ncnBjOmdycGMtc3R1Yjoke2dycGNWZXJzaW9ufSINCiAgICBjb21waWxlT25seSAiamF2YXguYW5ub3RhdGlvbjpqYXZheC5hbm5vdGF0aW9uLWFwaToxLjMuMiINCg0KICAgIGNvbXBpbGUgZ3JvdXA6ICdvcmcuc2xmNGonLCBuYW1lOiAnc2xmNGotYXBpJywgdmVyc2lvbjogJzEuNy4yNScNCn0NCg0KcHJvdG9idWYgew0KICAgIHByb3RvYyB7DQogICAgICAgIGFydGlmYWN0ID0gJ2NvbS5nb29nbGUucHJvdG9idWY6cHJvdG9jOjMuNS4xLTEnDQogICAgfQ0KICAgIHBsdWdpbnMgew0KICAgICAgICBncnBjIHsNCiAgICAgICAgICAgIGFydGlmYWN0ID0gJ2lvLmdycGM6cHJvdG9jLWdlbi1ncnBjLWphdmE6MS4xNi4xJw0KICAgICAgICB9DQogICAgfQ0KICAgIGdlbmVyYXRlUHJvdG9UYXNrcyB7DQogICAgICAgIGFsbCgpKi5wbHVnaW5zIHsNCiAgICAgICAgICAgIGdycGMge30NCiAgICAgICAgfQ0KICAgIH0NCn0NCg0KbG9tYm9rIHsNCiAgICB2ZXJzaW9uID0gJzEuMTguNCcNCiAgICBzaGEyNTYgPSAiIg0KfQ=="}, response: {"metadata":{"result":"ok"},"data":null,"is_error":false,"error":""}, error:<nil>	{"source": "sync.down"}
2021-06-26T13:14:11.506+0300	INFO	request: {"metadata":{"filename":"EventChannel.java","method":"save","path":"java/kubemq-java/examples/src/main/java/io/kubemq/sdk/examples/eventchannel"},"data":"LyoNCiAqIE1JVCBMaWNlbnNlDQogKg0KICogQ29weXJpZ2h0IChjKSAyMDE4IEt1YmVNUQ0KICoNCiAqIFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhIGNvcHkNCiAqIG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlICJTb2Z0d2FyZSIpLCB0byBkZWFsDQogKiBpbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzDQogKiB0byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsDQogKiBjb3BpZXMgb2YgdGhlIFNvZnR3YXJlLCBhbmQgdG8gcGVybWl0IHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXMNCiAqIGZ1cm5pc2hlZCB0byBkbyBzbywgc3ViamVjdCB0byB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnM6DQogKg0KICogVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWQgaW4gYWxsDQogKiBjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLg0KICoNCiAqIFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCAiQVMgSVMiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTIE9SDQogKiBJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWSwNCiAqIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOIE5PIEVWRU5UIFNIQUxMIFRIRQ0KICogQVVUSE9SUyBPUiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSwgREFNQUdFUyBPUiBPVEhFUg0KICogTElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUiBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSwNCiAqIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRSBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU4gVEhFDQogKiBTT0ZUV0FSRS4NCiAqLw0KcGFja2FnZSBpby5rdWJlbXEuc2RrLmV4YW1wbGVzLmV2ZW50Y2hhbm5lbDsNCg0KaW1wb3J0IGlvLmt1YmVtcS5zZGsuYmFzaWMuU2VydmVyQWRkcmVzc05vdFN1cHBsaWVkRXhjZXB0aW9uOw0KaW1wb3J0IGlvLmt1YmVtcS5zZGsuZXZlbnQuQ2hhbm5lbDsNCmltcG9ydCBpby5rdWJlbXEuc2RrLmV2ZW50LkNoYW5uZWxQYXJhbWV0ZXJzOw0KaW1wb3J0IGlvLmt1YmVtcS5zZGsuZXZlbnQuRXZlbnQ7DQppbXBvcnQgaW8ua3ViZW1xLnNkay5leGFtcGxlcy5jb21tb25leGFtcGxlLkJhc2VFeGFtcGxlOw0KDQppbXBvcnQgamF2YXgubmV0LnNzbC5TU0xFeGNlcHRpb247DQoNCmNsYXNzIEV2ZW50Q2hhbm5lbCBleHRlbmRzIEJhc2VFeGFtcGxlIHsNCg0KICAgIEV2ZW50Q2hhbm5lbCgpIHRocm93cyBTU0xFeGNlcHRpb24sIFNlcnZlckFkZHJlc3NOb3RTdXBwbGllZEV4Y2VwdGlvbiB7DQogICAgICAgIHN1cGVyKCJFdmVudENoYW5uZWwiKTsNCiAgICAgICAgQ2hhbm5lbFBhcmFtZXRlcnMgY2hhbm5lbFBhcmFtZXRlcnMgPSBDcmVhdGVNZXNzYWdlQ2hhbm5lbFBhcmFtKCk7DQogICAgICAgIENoYW5uZWwgY2hhbm5lbCA9IG5ldyBDaGFubmVsKGNoYW5uZWxQYXJhbWV0ZXJzKTsNCiAgICAgICAgY2hhbm5lbC5TZW5kRXZlbnQoQ3JlYXRlQ2hhbm5lbE1lc3NhZ2UoKSk7DQoNCiAgICB9DQoNCiAgICBwcml2YXRlIEV2ZW50IENyZWF0ZUNoYW5uZWxNZXNzYWdlKCkgew0KICAgICAgICBFdmVudCBldmVudCA9IG5ldyBFdmVudCgpOw0KICAgICAgICBldmVudC5zZXRNZXRhZGF0YSgiRXZlbnRDaGFubmVsIik7DQogICAgICAgIGV2ZW50LnNldEJvZHkoIkV2ZW50Ii5nZXRCeXRlcygpKTsNCiAgICAgICAgcmV0dXJuIGV2ZW50Ow0KICAgIH0NCg0KICAgIHByaXZhdGUgQ2hhbm5lbFBhcmFtZXRlcnMgQ3JlYXRlTWVzc2FnZUNoYW5uZWxQYXJhbSgpIHsNCiAgICAgICAgQ2hhbm5lbFBhcmFtZXRlcnMgcGFyYW1ldGVycyA9IG5ldyBDaGFubmVsUGFyYW1ldGVycygpOw0KICAgICAgICBwYXJhbWV0ZXJzLnNldENoYW5uZWxOYW1lKHRoaXMuZ2V0Q2hhbm5lbE5hbWUoKSk7DQogICAgICAgIHBhcmFtZXRlcnMuc2V0Q2xpZW50SUQoIkV2ZW50Q2hhbm5lbElEIik7DQogICAgICAgIHBhcmFtZXRlcnMuc2V0U3RvcmUodHJ1ZSk7DQogICAgICAgIHBhcmFtZXRlcnMuc2V0UmV0dXJuUmVzdWx0KGZhbHNlKTsNCiAgICAgICAgcmV0dXJuIHBhcmFtZXRlcnM7DQogICAgfQ0KDQp9DQo="}, response: {"metadata":{"result":"ok"},"data":null,"is_error":false,"error":""}, error:<nil>	{"source": "sync.down"}
2021-06-26T13:14:11.537+0300	INFO	request: {"metadata":{"filename":"Channel.java","method":"save","path":"java/kubemq-java/kubemq-java-sdk/src/main/java/io/kubemq/sdk/commandquery"},"data":""}, response: {"metadata":{"result":"ok"},"data":null,"is_error":false,"error":""}, error:<nil>	{"source": "sync.down"}
2021-06-26T13:14:11.764+0300	INFO	request: {"metadata":{"filename":"build.gradle","method":"save","path":"java/kubemq-java"},"data":"cGx1Z2lucyB7DQogICAgaWQgJ2phdmEnDQp9DQoNCg0KDQpncm91cCAnaW8ua3ViZW1xLnNkaycNCnZlcnNpb24gJzEuMC4zJw0KDQpzb3VyY2VDb21wYXRpYmlsaXR5ID0gMS44DQoNCnJlcG9zaXRvcmllcyB7DQogICAgbWF2ZW5DZW50cmFsKCkNCn0NCg0KZGVwZW5kZW5jaWVzIHsNCiAgICB0ZXN0Q29tcGlsZSBncm91cDogJ2p1bml0JywgbmFtZTogJ2p1bml0JywgdmVyc2lvbjogJzQuMTInDQp9DQo="}, response: {"metadata":{"result":"ok"},"data":null,"is_error":false,"error":""}, error:<nil>	{"source": "sync.down"}
2021-06-26T13:14:11.767+0300	INFO	request: {"metadata":{"filename":"master","method":"save","path":"java/kubemq-java/.git/logs/refs/heads"},"data":"MDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMCA0MjllNWUyODMzNDg0MzkwMDJkZjAxNTRmNDIxZDExZjVlMTk0YzBkIGt1YmVtcSA8bGlvci5uYWJhdEBrdWJlbXEuaW8+IDE2MTgzODUyNjkgKzAzMDAJY2xvbmU6IGZyb20gaHR0cHM6Ly9naXRodWIuY29tL2t1YmVtcS1pby9rdWJlbXEtSmF2YS5naXQK"}, response: {"metadata":{"result":"ok"},"data":null,"is_error":false,"error":""}, error:<nil>	{"source": "sync.down"}
2021-06-26T13:14:11.823+0300	INFO	request: {"metadata":{"filename":"ConfigurationLoader.java","method":"save","path":"java/kubemq-java/kubemq-java-sdk/src/main/java/io/kubemq/sdk/basic"},"data":"LyoNCiAqIE1JVCBMaWNlbnNlDQogKg0KICogQ29weXJpZ2h0IChjKSAyMDE4IEt1YmVNUQ0KICoNCiAqIFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhIGNvcHkNCiAqIG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlICJTb2Z0d2FyZSIpLCB0byBkZWFsDQogKiBpbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzDQogKiB0byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsDQogKiBjb3BpZXMgb2YgdGhlIFNvZnR3YXJlLCBhbmQgdG8gcGVybWl0IHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXMNCiAqIGZ1cm5pc2hlZCB0byBkbyBzbywgc3ViamVjdCB0byB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnM6DQogKg0KICogVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWQgaW4gYWxsDQogKiBjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLg0KICoNCiAqIFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCAiQVMgSVMiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTIE9SDQogKiBJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWSwNCiAqIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOIE5PIEVWRU5UIFNIQUxMIFRIRQ0KICogQVVUSE9SUyBPUiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSwgREFNQUdFUyBPUiBPVEhFUg0KICogTElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUiBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSwNCiAqIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRSBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU4gVEhFDQogKiBTT0ZUV0FSRS4NCiAqLw0KcGFja2FnZSBpby5rdWJlbXEuc2RrLmJhc2ljOw0KDQppbXBvcnQgb3JnLmFwYWNoZS5jb21tb25zLmxhbmczLlN0cmluZ1V0aWxzOw0KaW1wb3J0IG9yZy5zbGY0ai5Mb2dnZXI7DQppbXBvcnQgb3JnLnNsZjRqLkxvZ2dlckZhY3Rvcnk7DQoNCmltcG9ydCBqYXZhLnRleHQuTWVzc2FnZUZvcm1hdDsNCg0KY2xhc3MgQ29uZmlndXJhdGlvbkxvYWRlciB7DQoNCiAgICBwcml2YXRlIHN0YXRpYyBMb2dnZXIgbG9nZ2VyID0gTG9nZ2VyRmFjdG9yeS5nZXRMb2dnZXIoQ29uZmlndXJhdGlvbkxvYWRlci5jbGFzcyk7DQoNCiAgICAvKioNCiAgICAgKiBzdGF0aWMgY2FjaGUgdmFyaWFibGUgdG8gc3RvcmUgdGhlIEt1YmVNUSBzZXJ2ZXIgYWRkcmVzcw0KICAgICAqIG9uY2UgZGV0ZXJtaW5lZCBmcm9tIGVudmlyb25tZW50IHZhcmlhYmxlIG9yIEphdmEgcHJvcGVydHkNCiAgICAgKg0KICAgICAqIEBzaW5jZSAxLjANCiAgICAgKi8NCiAgICBwcml2YXRlIHN0YXRpYyBTdHJpbmcgX3BhdGggPSBudWxsOw0KDQogICAgLyoqDQogICAgICogc3RhdGljIGNhY2hlIHZhcmlhYmxlIHRvIHN0b3JlIHRoZSBLdWJlTVEgcmVnaXN0cmF0aW9uIGtleQ0KICAgICAqDQogICAgICogQHNpbmNlIDEuMA0KICAgICAqLw0KICAgIHByaXZhdGUgc3RhdGljIFN0cmluZyBfa2V5ID0gbnVsbDsNCg0KICAgIC8qKg0KICAgICAqIHN0YXRpYyBjYWNoZSB2YXJpYWJsZSB0byBzdG9yZSB0aGUgS3ViZU1RIGNlcnRpZmljYXRlIGZpbGUNCiAgICAgKg0KICAgICAqIEBzaW5jZSAxLjANCiAgICAgKi8NCiAgICBwcml2YXRlIHN0YXRpYyBTdHJpbmcgX2NlcnQgPSBudWxsOw0KDQogICAgLyoqDQogICAgICogR2V0IEt1YmVNUSBTZXJ2ZXIgQWRkcmVzcyBieSBwcmlvcml0eToNCiAgICAgKiAxLiBFbnZpcm9ubWVudCBWYXJpYWJsZSAoS3ViZU1RU2VydmVyQWRkcmVzcykNCiAgICAgKiAyLiBKYXZhIFByb3BlcnR5IChieSBwYXNzaW5nIHRoZSAtREt1YmVNUVNlcnZlckFkZHJlc3M9IG9wdGlvbiB0byB0aGUgSlZNKQ0KICAgICAqDQogICAgICogQHJldHVybiBLdWJlTVEgc2VydmVyIGNvbm5lY3Rpb24gc3RyaW5nIG9yIG51bGwgaWYgY2FuJ3QgYmUgZGV0ZXJtaW5lZA0KICAgICAqIEBhcGlOb3RlIFRoZSByZXN1bHQgaXMgY2FjaGVkIGFmdGVyIHRoZSBmdW5jdGlvbiBpcyBjYWxsZWQgb25jZQ0KICAgICAqIEBzaW5jZSAxLjANCiAgICAgKi8NCiAgICBzdGF0aWMgU3RyaW5nIEdldFNlcnZlckFkZHJlc3MoKSB7DQogICAgICAgIGlmIChTdHJpbmdVdGlscy5pc05vdEJsYW5rKF9wYXRoKSkgcmV0dXJuIF9wYXRoOw0KDQogICAgICAgIF9wYXRoID0gR2V0RnJvbUVudmlyb25tZW50VmFyaWFibGUoIkt1YmVNUVNlcnZlckFkZHJlc3MiKTsNCiAgICAgICAgaWYgKFN0cmluZ1V0aWxzLmlzTm90QmxhbmsoX3BhdGgpKSB7DQogICAgICAgICAgICBsb2dnZXIuaW5mbyhNZXNzYWdlRm9ybWF0LmZvcm1hdCgiS3ViZU1RIFNlcnZlciBhZGRyZXNzIGZvdW5kIGluIEVudmlyb25tZW50OiB7MH0iLCBfcGF0aCkpOw0KICAgICAgICAgICAgcmV0dXJuIF9wYXRoOw0KICAgICAgICB9DQoNCiAgICAgICAgX3BhdGggPSBHZXRGcm9tUHJvcGVydHkoInNlcnZlckFkZHJlc3MiKTsNCiAgICAgICAgaWYgKFN0cmluZ1V0aWxzLmlzTm90QmxhbmsoX3BhdGgpKSB7DQogICAgICAgICAgICBsb2dnZXIuaW5mbyhNZXNzYWdlRm9ybWF0LmZvcm1hdCgiS3ViZU1RIFNlcnZlciBhZGRyZXNzIHNldCBmcm9tIHByb3BlcnR5OiB7MH0iLCBfcGF0aCkpOw0KICAgICAgICAgICAgcmV0dXJuIF9wYXRoOw0KICAgICAgICB9DQoNCiAgICAgICAgbG9nZ2VyLmluZm8oTWVzc2FnZUZvcm1hdC5mb3JtYXQoIkt1YmVNUSBTZXJ2ZXIgYWRkcmVzcyBub3QgZm91bmQuIHVzaW5nIHswfSIsIF9wYXRoKSk7DQogICAgICAgIHJldHVybiBfcGF0aDsNCiAgICB9DQoNCiAgICAvKioNCiAgICAgKiBHZXQgdGhlIEt1YmVNUSBsaWNlbnNlIGtleSBmcm9tIGVudmlyb25tZW50IHZhcmlhYmxlIG9yIGZyb20gSmF2YSBwcm9wZXJ0eQ0KICAgICAqDQogICAgICogQHJldHVybiBLdWJlTVEgTGljZW5zZSBLZXkgb3IgZW1wdHkgc3RyaW5nIGlmIGNhbid0IGJlIGRldGVybWluZWQNCiAgICAgKiBAYXBpTm90ZSBUaGUgcmVzdWx0IGlzIGNhY2hlZCBhZnRlciB0aGUgZnVuY3Rpb24gaXMgY2FsbGVkIG9uY2UNCiAgICAgKiBAc2luY2UgMS4wDQogICAgICovDQogICAgc3RhdGljIFN0cmluZyBHZXRSZWdpc3RyYXRpb25LZXkoKSB7DQogICAgICAgIGlmIChfa2V5ICE9IG51bGwpIHJldHVybiBfa2V5Ow0KDQogICAgICAgIF9rZXkgPSBHZXRGcm9tRW52aXJvbm1lbnRWYXJpYWJsZSgiS3ViZU1RUmVnaXN0cmF0aW9uS2V5Iik7DQoNCiAgICAgICAgaWYgKFN0cmluZ1V0aWxzLmlzTm90QmxhbmsoX2tleSkpIHJldHVybiBfa2V5Ow0KDQogICAgICAgIF9rZXkgPSBHZXRGcm9tUHJvcGVydHkoInJlZ2lzdHJhdGlvbktleSIpOw0KDQogICAgICAgIGlmIChTdHJpbmdVdGlscy5pc0JsYW5rKF9rZXkpKSB7DQogICAgICAgICAgICBfa2V5ID0gIiI7DQogICAgICAgIH0NCg0KICAgICAgICByZXR1cm4gX2tleTsNCiAgICB9DQoNCiAgICAvKioNCiAgICAgKiBHZXQgdGhlIEt1YmVNUSBjZXJ0aWZpY2F0aW9uIGZpbGUgcGF0aCBmcm9tIGVudmlyb25tZW50IHZhcmlhYmxlIG9yIGZyb20gSmF2YSBwcm9wZXJ0eQ0KICAgICAqDQogICAgICogQHJldHVybiBLdWJlTVEgQ2VydGlmaWNhdGlvbiBmaWxlIHBhdGggb3IgZW1wdHkgc3RyaW5nIGlmIGNhbid0IGJlIGRldGVybWluZWQNCiAgICAgKiBAYXBpTm90ZSBUaGUgcmVzdWx0IGlzIGNhY2hlZCBhZnRlciB0aGUgZnVuY3Rpb24gaXMgY2FsbGVkIG9uY2UNCiAgICAgKiBAc2luY2UgMS4wDQogICAgICovDQogICAgc3RhdGljIFN0cmluZyBHZXRDZXJpZmljYXRlRmlsZSgpIHsNCiAgICAgICAgaWYgKF9jZXJ0ICE9IG51bGwpIHJldHVybiBfY2VydDsNCg0KICAgICAgICBfY2VydCA9IEdldEZyb21FbnZpcm9ubWVudFZhcmlhYmxlKCJLdWJlTVFDZXJ0aWZpY2F0ZUZpbGUiKTsNCg0KICAgICAgICBpZiAoU3RyaW5nVXRpbHMuaXNOb3RCbGFuayhfY2VydCkpIHJldHVybiBfY2VydDsNCg0KICAgICAgICBfY2VydCA9IEdldEZyb21Qcm9wZXJ0eSgiY2VydGlmaWNhdGVGaWxlIik7DQoNCiAgICAgICAgaWYgKFN0cmluZ1V0aWxzLmlzQmxhbmsoX2NlcnQpKSB7DQogICAgICAgICAgICBfY2VydCA9ICIiOw0KICAgICAgICB9DQoNCiAgICAgICAgcmV0dXJuIF9jZXJ0Ow0KICAgIH0NCg0KICAgIHByaXZhdGUgc3RhdGljIFN0cmluZyBHZXRGcm9tRW52aXJvbm1lbnRWYXJpYWJsZShTdHJpbmcga2V5KSB7DQogICAgICAgIHJldHVybiBTeXN0ZW0uZ2V0ZW52KGtleSk7DQogICAgfQ0KDQogICAgcHJpdmF0ZSBzdGF0aWMgU3RyaW5nIEdldEZyb21Qcm9wZXJ0eShTdHJpbmcga2V5KSB7DQogICAgICAgIHJldHVybiBTeXN0ZW0uZ2V0UHJvcGVydHkoa2V5KTsNCiAgICB9DQoNCn0NCg=="}, response: {"metadata":{"result":"ok"},"data":null,"is_error":false,"error":""}, error:<nil>	{"source": "sync.down"}
2021-06-26T13:14:11.976+0300	INFO	request: {"metadata":{"filename":"pre-push.sample","method":"save","path":"java/kubemq-java/.git/hooks"},"data":"IyEvYmluL3NoCgojIEFuIGV4YW1wbGUgaG9vayBzY3JpcHQgdG8gdmVyaWZ5IHdoYXQgaXMgYWJvdXQgdG8gYmUgcHVzaGVkLiAgQ2FsbGVkIGJ5ICJnaXQKIyBwdXNoIiBhZnRlciBpdCBoYXMgY2hlY2tlZCB0aGUgcmVtb3RlIHN0YXR1cywgYnV0IGJlZm9yZSBhbnl0aGluZyBoYXMgYmVlbgojIHB1c2hlZC4gIElmIHRoaXMgc2NyaXB0IGV4aXRzIHdpdGggYSBub24temVybyBzdGF0dXMgbm90aGluZyB3aWxsIGJlIHB1c2hlZC4KIwojIFRoaXMgaG9vayBpcyBjYWxsZWQgd2l0aCB0aGUgZm9sbG93aW5nIHBhcmFtZXRlcnM6CiMKIyAkMSAtLSBOYW1lIG9mIHRoZSByZW1vdGUgdG8gd2hpY2ggdGhlIHB1c2ggaXMgYmVpbmcgZG9uZQojICQyIC0tIFVSTCB0byB3aGljaCB0aGUgcHVzaCBpcyBiZWluZyBkb25lCiMKIyBJZiBwdXNoaW5nIHdpdGhvdXQgdXNpbmcgYSBuYW1lZCByZW1vdGUgdGhvc2UgYXJndW1lbnRzIHdpbGwgYmUgZXF1YWwuCiMKIyBJbmZvcm1hdGlvbiBhYm91dCB0aGUgY29tbWl0cyB3aGljaCBhcmUgYmVpbmcgcHVzaGVkIGlzIHN1cHBsaWVkIGFzIGxpbmVzIHRvCiMgdGhlIHN0YW5kYXJkIGlucHV0IGluIHRoZSBmb3JtOgojCiMgICA8bG9jYWwgcmVmPiA8bG9jYWwgc2hhMT4gPHJlbW90ZSByZWY+IDxyZW1vdGUgc2hhMT4KIwojIFRoaXMgc2FtcGxlIHNob3dzIGhvdyB0byBwcmV2ZW50IHB1c2ggb2YgY29tbWl0cyB3aGVyZSB0aGUgbG9nIG1lc3NhZ2Ugc3RhcnRzCiMgd2l0aCAiV0lQIiAod29yayBpbiBwcm9ncmVzcykuCgpyZW1vdGU9IiQxIgp1cmw9IiQyIgoKejQwPTAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAKCndoaWxlIHJlYWQgbG9jYWxfcmVmIGxvY2FsX3NoYSByZW1vdGVfcmVmIHJlbW90ZV9zaGEKZG8KCWlmIFsgIiRsb2NhbF9zaGEiID0gJHo0MCBdCgl0aGVuCgkJIyBIYW5kbGUgZGVsZXRlCgkJOgoJZWxzZQoJCWlmIFsgIiRyZW1vdGVfc2hhIiA9ICR6NDAgXQoJCXRoZW4KCQkJIyBOZXcgYnJhbmNoLCBleGFtaW5lIGFsbCBjb21taXRzCgkJCXJhbmdlPSIkbG9jYWxfc2hhIgoJCWVsc2UKCQkJIyBVcGRhdGUgdG8gZXhpc3RpbmcgYnJhbmNoLCBleGFtaW5lIG5ldyBjb21taXRzCgkJCXJhbmdlPSIkcmVtb3RlX3NoYS4uJGxvY2FsX3NoYSIKCQlmaQoKCQkjIENoZWNrIGZvciBXSVAgY29tbWl0CgkJY29tbWl0PWBnaXQgcmV2LWxpc3QgLW4gMSAtLWdyZXAgJ15XSVAnICIkcmFuZ2UiYAoJCWlmIFsgLW4gIiRjb21taXQiIF0KCQl0aGVuCgkJCWVjaG8gPiYyICJGb3VuZCBXSVAgY29tbWl0IGluICRsb2NhbF9yZWYsIG5vdCBwdXNoaW5nIgoJCQlleGl0IDEKCQlmaQoJZmkKZG9uZQoKZXhpdCAwCg=="}, response: {"metadata":{"result":"ok"},"data":null,"is_error":false,"error":""}, error:<nil>	{"source": "sync.down"}
2021-06-26T13:14:12.045+0300	INFO	request: {"metadata":{"filename":".classpath","method":"save","path":"java/kubemq-java/kubemq-java-sdk"},"data":"PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0iVVRGLTgiPz4NCjxjbGFzc3BhdGg+DQoJPGNsYXNzcGF0aGVudHJ5IGtpbmQ9InNyYyIgb3V0cHV0PSJiaW4vbWFpbiIgcGF0aD0ic3JjL21haW4vamF2YSI+DQoJCTxhdHRyaWJ1dGVzPg0KCQkJPGF0dHJpYnV0ZSBuYW1lPSJncmFkbGVfc2NvcGUiIHZhbHVlPSJtYWluIi8+DQoJCQk8YXR0cmlidXRlIG5hbWU9ImdyYWRsZV91c2VkX2J5X3Njb3BlIiB2YWx1ZT0ibWFpbix0ZXN0Ii8+DQoJCTwvYXR0cmlidXRlcz4NCgk8L2NsYXNzcGF0aGVudHJ5Pg0KCTxjbGFzc3BhdGhlbnRyeSBraW5kPSJjb24iIHBhdGg9Im9yZy5lY2xpcHNlLmpkdC5sYXVuY2hpbmcuSlJFX0NPTlRBSU5FUi9vcmcuZWNsaXBzZS5qZHQuaW50ZXJuYWwuZGVidWcudWkubGF1bmNoZXIuU3RhbmRhcmRWTVR5cGUvSmF2YVNFLTEuOC8iLz4NCgk8Y2xhc3NwYXRoZW50cnkga2luZD0iY29uIiBwYXRoPSJvcmcuZWNsaXBzZS5idWlsZHNoaXAuY29yZS5ncmFkbGVjbGFzc3BhdGhjb250YWluZXIiLz4NCgk8Y2xhc3NwYXRoZW50cnkga2luZD0ib3V0cHV0IiBwYXRoPSJiaW4vZGVmYXVsdCIvPg0KPC9jbGFzc3BhdGg+DQo="}, response: {"metadata":{"result":"ok"},"data":null,"is_error":false,"error":""}, error:<nil>	{"source": "sync.down"}
2021-06-26T13:14:12.224+0300	INFO	request: {"metadata":{"filename":"gradlew.bat","method":"save","path":"java/kubemq-java"},"data":"QGlmICIlREVCVUclIiA9PSAiIiBAZWNobyBvZmYNCkByZW0gIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMNCkByZW0NCkByZW0gIEdyYWRsZSBzdGFydHVwIHNjcmlwdCBmb3IgV2luZG93cw0KQHJlbQ0KQHJlbSAjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIw0KDQpAcmVtIFNldCBsb2NhbCBzY29wZSBmb3IgdGhlIHZhcmlhYmxlcyB3aXRoIHdpbmRvd3MgTlQgc2hlbGwNCmlmICIlT1MlIj09IldpbmRvd3NfTlQiIHNldGxvY2FsDQoNCnNldCBESVJOQU1FPSV+ZHAwDQppZiAiJURJUk5BTUUlIiA9PSAiIiBzZXQgRElSTkFNRT0uDQpzZXQgQVBQX0JBU0VfTkFNRT0lfm4wDQpzZXQgQVBQX0hPTUU9JURJUk5BTUUlDQoNCkByZW0gQWRkIGRlZmF1bHQgSlZNIG9wdGlvbnMgaGVyZS4gWW91IGNhbiBhbHNvIHVzZSBKQVZBX09QVFMgYW5kIEdSQURMRV9PUFRTIHRvIHBhc3MgSlZNIG9wdGlvbnMgdG8gdGhpcyBzY3JpcHQuDQpzZXQgREVGQVVMVF9KVk1fT1BUUz0NCg0KQHJlbSBGaW5kIGphdmEuZXhlDQppZiBkZWZpbmVkIEpBVkFfSE9NRSBnb3RvIGZpbmRKYXZhRnJvbUphdmFIb21lDQoNCnNldCBKQVZBX0VYRT1qYXZhLmV4ZQ0KJUpBVkFfRVhFJSAtdmVyc2lvbiA+TlVMIDI+JjENCmlmICIlRVJST1JMRVZFTCUiID09ICIwIiBnb3RvIGluaXQNCg0KZWNoby4NCmVjaG8gRVJST1I6IEpBVkFfSE9NRSBpcyBub3Qgc2V0IGFuZCBubyAnamF2YScgY29tbWFuZCBjb3VsZCBiZSBmb3VuZCBpbiB5b3VyIFBBVEguDQplY2hvLg0KZWNobyBQbGVhc2Ugc2V0IHRoZSBKQVZBX0hPTUUgdmFyaWFibGUgaW4geW91ciBlbnZpcm9ubWVudCB0byBtYXRjaCB0aGUNCmVjaG8gbG9jYXRpb24gb2YgeW91ciBKYXZhIGluc3RhbGxhdGlvbi4NCg0KZ290byBmYWlsDQoNCjpmaW5kSmF2YUZyb21KYXZhSG9tZQ0Kc2V0IEpBVkFfSE9NRT0lSkFWQV9IT01FOiI9JQ0Kc2V0IEpBVkFfRVhFPSVKQVZBX0hPTUUlL2Jpbi9qYXZhLmV4ZQ0KDQppZiBleGlzdCAiJUpBVkFfRVhFJSIgZ290byBpbml0DQoNCmVjaG8uDQplY2hvIEVSUk9SOiBKQVZBX0hPTUUgaXMgc2V0IHRvIGFuIGludmFsaWQgZGlyZWN0b3J5OiAlSkFWQV9IT01FJQ0KZWNoby4NCmVjaG8gUGxlYXNlIHNldCB0aGUgSkFWQV9IT01FIHZhcmlhYmxlIGluIHlvdXIgZW52aXJvbm1lbnQgdG8gbWF0Y2ggdGhlDQplY2hvIGxvY2F0aW9uIG9mIHlvdXIgSmF2YSBpbnN0YWxsYXRpb24uDQoNCmdvdG8gZmFpbA0KDQo6aW5pdA0KQHJlbSBHZXQgY29tbWFuZC1saW5lIGFyZ3VtZW50cywgaGFuZGxpbmcgV2luZG93cyB2YXJpYW50cw0KDQppZiBub3QgIiVPUyUiID09ICJXaW5kb3dzX05UIiBnb3RvIHdpbjl4TUVfYXJncw0KDQo6d2luOXhNRV9hcmdzDQpAcmVtIFNsdXJwIHRoZSBjb21tYW5kIGxpbmUgYXJndW1lbnRzLg0Kc2V0IENNRF9MSU5FX0FSR1M9DQpzZXQgX1NLSVA9Mg0KDQo6d2luOXhNRV9hcmdzX3NsdXJwDQppZiAieCV+MSIgPT0gIngiIGdvdG8gZXhlY3V0ZQ0KDQpzZXQgQ01EX0xJTkVfQVJHUz0lKg0KDQo6ZXhlY3V0ZQ0KQHJlbSBTZXR1cCB0aGUgY29tbWFuZCBsaW5lDQoNCnNldCBDTEFTU1BBVEg9JUFQUF9IT01FJVxncmFkbGVcd3JhcHBlclxncmFkbGUtd3JhcHBlci5qYXINCg0KQHJlbSBFeGVjdXRlIEdyYWRsZQ0KIiVKQVZBX0VYRSUiICVERUZBVUxUX0pWTV9PUFRTJSAlSkFWQV9PUFRTJSAlR1JBRExFX09QVFMlICItRG9yZy5ncmFkbGUuYXBwbmFtZT0lQVBQX0JBU0VfTkFNRSUiIC1jbGFzc3BhdGggIiVDTEFTU1BBVEglIiBvcmcuZ3JhZGxlLndyYXBwZXIuR3JhZGxlV3JhcHBlck1haW4gJUNNRF9MSU5FX0FSR1MlDQoNCjplbmQNCkByZW0gRW5kIGxvY2FsIHNjb3BlIGZvciB0aGUgdmFyaWFibGVzIHdpdGggd2luZG93cyBOVCBzaGVsbA0KaWYgIiVFUlJPUkxFVkVMJSI9PSIwIiBnb3RvIG1haW5FbmQNCg0KOmZhaWwNCnJlbSBTZXQgdmFyaWFibGUgR1JBRExFX0VYSVRfQ09OU09MRSBpZiB5b3UgbmVlZCB0aGUgX3NjcmlwdF8gcmV0dXJuIGNvZGUgaW5zdGVhZCBvZg0KcmVtIHRoZSBfY21kLmV4ZSAvY18gcmV0dXJuIGNvZGUhDQppZiAgbm90ICIiID09ICIlR1JBRExFX0VYSVRfQ09OU09MRSUiIGV4aXQgMQ0KZXhpdCAvYiAxDQoNCjptYWluRW5kDQppZiAiJU9TJSI9PSJXaW5kb3dzX05UIiBlbmRsb2NhbA0KDQo6b21lZ2ENCg=="}, response: {"metadata":{"result":"ok"},"data":null,"is_error":false,"error":""}, error:<nil>	{"source": "sync.down"}
2021-06-26T13:14:12.299+0300	INFO	request: {"metadata":{"filename":"TransactionTest.javax","method":"save","path":"java/kubemq-java/examples/bin/test/io/kubemq/sdk/transaction"},"data":""}, response: {"metadata":{"result":"ok"},"data":null,"is_error":false,"error":""}, error:<nil>	{"source": "sync.down"}
2021-06-26T13:14:12.442+0300	INFO	request: {"metadata":{"filename":"Program.java","method":"save","path":"java/kubemq-java/examples/src/main/java/io/kubemq/sdk/examples/get_Started/rPC_Send_a_Command_Channel"},"data":"LyoNCiAqIE1JVCBMaWNlbnNlDQogKg0KICogQ29weXJpZ2h0IChjKSAyMDE4IEt1YmVNUQ0KICoNCiAqIFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhIGNvcHkNCiAqIG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlICJTb2Z0d2FyZSIpLCB0byBkZWFsDQogKiBpbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzDQogKiB0byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsDQogKiBjb3BpZXMgb2YgdGhlIFNvZnR3YXJlLCBhbmQgdG8gcGVybWl0IHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXMNCiAqIGZ1cm5pc2hlZCB0byBkbyBzbywgc3ViamVjdCB0byB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnM6DQogKg0KICogVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWQgaW4gYWxsDQogKiBjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLg0KICoNCiAqIFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCAiQVMgSVMiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTIE9SDQogKiBJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWSwNCiAqIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOIE5PIEVWRU5UIFNIQUxMIFRIRQ0KICogQVVUSE9SUyBPUiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSwgREFNQUdFUyBPUiBPVEhFUg0KICogTElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUiBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSwNCiAqIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRSBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU4gVEhFDQogKiBTT0ZUV0FSRS4NCiAqLw0KcGFja2FnZSBpby5rdWJlbXEuc2RrLmV4YW1wbGVzLmdldF9TdGFydGVkLnJQQ19TZW5kX2FfQ29tbWFuZF9DaGFubmVsOw0KDQppbXBvcnQgamF2YS5pby5JT0V4Y2VwdGlvbjsNCg0KDQppbXBvcnQgaW8ua3ViZW1xLnNkay5iYXNpYy5TZXJ2ZXJBZGRyZXNzTm90U3VwcGxpZWRFeGNlcHRpb247DQppbXBvcnQgaW8ua3ViZW1xLnNkay5jb21tYW5kcXVlcnkuQ2hhbm5lbFBhcmFtZXRlcnM7DQppbXBvcnQgaW8ua3ViZW1xLnNkay5jb21tYW5kcXVlcnkuUmVxdWVzdDsNCmltcG9ydCBpby5rdWJlbXEuc2RrLmNvbW1hbmRxdWVyeS5SZXF1ZXN0VHlwZTsNCmltcG9ydCBpby5rdWJlbXEuc2RrLmNvbW1hbmRxdWVyeS5SZXNwb25zZTsNCmltcG9ydCBpby5rdWJlbXEuc2RrLnRvb2xzLkNvbnZlcnRlcjsNCg0KcHVibGljIGNsYXNzIFByb2dyYW0gew0KDQogICAgcHVibGljIHN0YXRpYyB2b2lkIG1haW4oU3RyaW5nW10gYXJncykgdGhyb3dzIElPRXhjZXB0aW9uIHsNCg0KICAgICAgICBTdHJpbmcgQ2hhbm5lbE5hbWUgPSAiY21kIiwgQ2xpZW50SUQgPSAiaGVsbG8td29ybGQtc2VuZGVyIiwNCiAgICAgICAgICAgICAgICBLdWJlTVFTZXJ2ZXJBZGRyZXNzID0gImxvY2FsaG9zdDo1MDAwMCI7DQogICAgICAgIENoYW5uZWxQYXJhbWV0ZXJzIGNoYW5uZWxQYXJhbWV0ZXJzID0gbmV3IENoYW5uZWxQYXJhbWV0ZXJzKCk7DQogICAgICAgIGNoYW5uZWxQYXJhbWV0ZXJzLnNldENoYW5uZWxOYW1lKENoYW5uZWxOYW1lKTsNCiAgICAgICAgY2hhbm5lbFBhcmFtZXRlcnMuc2V0Q2xpZW50SUQoQ2xpZW50SUQpOw0KICAgICAgICBjaGFubmVsUGFyYW1ldGVycy5zZXRLdWJlTVFBZGRyZXNzKEt1YmVNUVNlcnZlckFkZHJlc3MpOw0KICAgICAgICBjaGFubmVsUGFyYW1ldGVycy5zZXRSZXF1ZXN0VHlwZShSZXF1ZXN0VHlwZS5Db21tYW5kKTsNCiAgICAgICAgY2hhbm5lbFBhcmFtZXRlcnMuc2V0VGltZW91dCgxMDAwMCk7DQogICAgICAgICAgY2hhbm5lbFBhcmFtZXRlcnMuc2V0QXV0aFRva2VuKCJleUpoYkdjaU9pSklVekkxTmlKOS5lMzAudE5pQl9xNFFrLW94LVpyRUFEYUxpOWdKcEtaOUtKVVNQMTZ1cWpIQWRURSIpOw0KICAgICAgICBpby5rdWJlbXEuc2RrLmNvbW1hbmRxdWVyeS5DaGFubmVsIGNoYW5uZWwgPSBuZXcgaW8ua3ViZW1xLnNkay5jb21tYW5kcXVlcnkuQ2hhbm5lbChjaGFubmVsUGFyYW1ldGVycyk7DQogICAgICAgIFJlcXVlc3QgcmVxdWVzdCA9IG5ldyBSZXF1ZXN0KCk7DQogICAgICAgIHJlcXVlc3Quc2V0Qm9keShDb252ZXJ0ZXIuVG9CeXRlQXJyYXkoImhlbGxvIGt1YmVtcSAtIHNlbmRpbmcgYSBjb21tYW5kLCBwbGVhc2UgcmVwbHkiKSk7DQogICAgICAgIFJlc3BvbnNlIHJlc3VsdDsNCiAgICAgICAgd2hpbGUodHJ1ZSl7DQogICAgICAgIHRyeSB7DQogICAgICAgICAgICByZXN1bHQgPSBjaGFubmVsLlNlbmRSZXF1ZXN0KHJlcXVlc3QpOw0KICAgICAgICAgICAgaWYgKCFyZXN1bHQuaXNFeGVjdXRlZCgpKSB7DQogICAgICAgICAgICAgICAgU3lzdGVtLm91dC5wcmludGYoIlJlc3BvbnNlIGVycm9yOiAlcyIsIHJlc3VsdC5nZXRFcnJvcigpKTsNCiAgICAgICAgICAgICAgICByZXR1cm47DQogICAgICAgICAgICB9DQogICAgICAgICAgICBTeXN0ZW0ub3V0LnByaW50ZigiUmVzcG9uc2UgUmVjZWl2ZWQ6ICVzLCBFeGVjdXRlZEF0OiAlcyIsIHJlc3VsdC5nZXRSZXF1ZXN0SUQoKSwgcmVzdWx0LmdldFRpbWVzdGFtcCgpLnRvU3RyaW5nKCkpOw0KICAgICAgICB9IGNhdGNoIChTZXJ2ZXJBZGRyZXNzTm90U3VwcGxpZWRFeGNlcHRpb24gZSkgew0KICAgICAgICAgICAgU3lzdGVtLm91dC5wcmludGYoIlNlcnZlckFkZHJlc3NOb3RTdXBwbGllZEV4Y2VwdGlvbjogJXMiLCBlLnRvU3RyaW5nKCkpOw0KICAgICAgICAgICAgZS5wcmludFN0YWNrVHJhY2UoKTsNCiAgICAgICAgfQ0KICAgIH0NCiAgICAgICAgDQogICAgDQogICAgfQ0KfQ0K"}, response: {"metadata":{"result":"ok"},"data":null,"is_error":false,"error":""}, error:<nil>	{"source": "sync.down"}
2021-06-26T13:14:12.510+0300	INFO	request: {"metadata":{"filename":"kubemqGrpc.javax","method":"save","path":"java/kubemq-java/kubemq-java-sdk/bin/main/io/kubemq/sdk/grpc"},"data":""}, response: {"metadata":{"result":"ok"},"data":null,"is_error":false,"error":""}, error:<nil>	{"source": "sync.down"}
2021-06-26T13:14:12.556+0300	INFO	request: {"metadata":{"filename":"libraries-with-intellij-classes.xml","method":"save","path":"java/kubemq-java/.idea"},"data":"PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0iVVRGLTgiPz4NCjxwcm9qZWN0IHZlcnNpb249IjQiPg0KICA8Y29tcG9uZW50IG5hbWU9ImxpYnJhcmllcy13aXRoLWludGVsbGlqLWNsYXNzZXMiPg0KICAgIDxvcHRpb24gbmFtZT0iaW50ZWxsaWpBcGlDb250YWluaW5nTGlicmFyaWVzIj4NCiAgICAgIDxsaXN0Pg0KICAgICAgICA8TGlicmFyeUNvb3JkaW5hdGVzU3RhdGU+DQogICAgICAgICAgPG9wdGlvbiBuYW1lPSJhcnRpZmFjdElkIiB2YWx1ZT0iaWRlYUlVIiAvPg0KICAgICAgICAgIDxvcHRpb24gbmFtZT0iZ3JvdXBJZCIgdmFsdWU9ImNvbS5qZXRicmFpbnMuaW50ZWxsaWouaWRlYSIgLz4NCiAgICAgICAgPC9MaWJyYXJ5Q29vcmRpbmF0ZXNTdGF0ZT4NCiAgICAgICAgPExpYnJhcnlDb29yZGluYXRlc1N0YXRlPg0KICAgICAgICAgIDxvcHRpb24gbmFtZT0iYXJ0aWZhY3RJZCIgdmFsdWU9ImlkZWFJVSIgLz4NCiAgICAgICAgICA8b3B0aW9uIG5hbWU9Imdyb3VwSWQiIHZhbHVlPSJjb20uamV0YnJhaW5zIiAvPg0KICAgICAgICA8L0xpYnJhcnlDb29yZGluYXRlc1N0YXRlPg0KICAgICAgICA8TGlicmFyeUNvb3JkaW5hdGVzU3RhdGU+DQogICAgICAgICAgPG9wdGlvbiBuYW1lPSJhcnRpZmFjdElkIiB2YWx1ZT0iaWRlYUlDIiAvPg0KICAgICAgICAgIDxvcHRpb24gbmFtZT0iZ3JvdXBJZCIgdmFsdWU9ImNvbS5qZXRicmFpbnMuaW50ZWxsaWouaWRlYSIgLz4NCiAgICAgICAgPC9MaWJyYXJ5Q29vcmRpbmF0ZXNTdGF0ZT4NCiAgICAgICAgPExpYnJhcnlDb29yZGluYXRlc1N0YXRlPg0KICAgICAgICAgIDxvcHRpb24gbmFtZT0iYXJ0aWZhY3RJZCIgdmFsdWU9ImlkZWFJQyIgLz4NCiAgICAgICAgICA8b3B0aW9uIG5hbWU9Imdyb3VwSWQiIHZhbHVlPSJjb20uamV0YnJhaW5zIiAvPg0KICAgICAgICA8L0xpYnJhcnlDb29yZGluYXRlc1N0YXRlPg0KICAgICAgICA8TGlicmFyeUNvb3JkaW5hdGVzU3RhdGU+DQogICAgICAgICAgPG9wdGlvbiBuYW1lPSJhcnRpZmFjdElkIiB2YWx1ZT0icHljaGFybVBZIiAvPg0KICAgICAgICAgIDxvcHRpb24gbmFtZT0iZ3JvdXBJZCIgdmFsdWU9ImNvbS5qZXRicmFpbnMuaW50ZWxsaWoucHljaGFybSIgLz4NCiAgICAgICAgPC9MaWJyYXJ5Q29vcmRpbmF0ZXNTdGF0ZT4NCiAgICAgICAgPExpYnJhcnlDb29yZGluYXRlc1N0YXRlPg0KICAgICAgICAgIDxvcHRpb24gbmFtZT0iYXJ0aWZhY3RJZCIgdmFsdWU9InB5Y2hhcm1QWSIgLz4NCiAgICAgICAgICA8b3B0aW9uIG5hbWU9Imdyb3VwSWQiIHZhbHVlPSJjb20uamV0YnJhaW5zIiAvPg0KICAgICAgICA8L0xpYnJhcnlDb29yZGluYXRlc1N0YXRlPg0KICAgICAgICA8TGlicmFyeUNvb3JkaW5hdGVzU3RhdGU+DQogICAgICAgICAgPG9wdGlvbiBuYW1lPSJhcnRpZmFjdElkIiB2YWx1ZT0icHljaGFybVBDIiAvPg0KICAgICAgICAgIDxvcHRpb24gbmFtZT0iZ3JvdXBJZCIgdmFsdWU9ImNvbS5qZXRicmFpbnMuaW50ZWxsaWoucHljaGFybSIgLz4NCiAgICAgICAgPC9MaWJyYXJ5Q29vcmRpbmF0ZXNTdGF0ZT4NCiAgICAgICAgPExpYnJhcnlDb29yZGluYXRlc1N0YXRlPg0KICAgICAgICAgIDxvcHRpb24gbmFtZT0iYXJ0aWZhY3RJZCIgdmFsdWU9InB5Y2hhcm1QQyIgLz4NCiAgICAgICAgICA8b3B0aW9uIG5hbWU9Imdyb3VwSWQiIHZhbHVlPSJjb20uamV0YnJhaW5zIiAvPg0KICAgICAgICA8L0xpYnJhcnlDb29yZGluYXRlc1N0YXRlPg0KICAgICAgICA8TGlicmFyeUNvb3JkaW5hdGVzU3RhdGU+DQogICAgICAgICAgPG9wdGlvbiBuYW1lPSJhcnRpZmFjdElkIiB2YWx1ZT0iY2xpb24iIC8+DQogICAgICAgICAgPG9wdGlvbiBuYW1lPSJncm91cElkIiB2YWx1ZT0iY29tLmpldGJyYWlucy5pbnRlbGxpai5jbGlvbiIgLz4NCiAgICAgICAgPC9MaWJyYXJ5Q29vcmRpbmF0ZXNTdGF0ZT4NCiAgICAgICAgPExpYnJhcnlDb29yZGluYXRlc1N0YXRlPg0KICAgICAgICAgIDxvcHRpb24gbmFtZT0iYXJ0aWZhY3RJZCIgdmFsdWU9ImNsaW9uIiAvPg0KICAgICAgICAgIDxvcHRpb24gbmFtZT0iZ3JvdXBJZCIgdmFsdWU9ImNvbS5qZXRicmFpbnMiIC8+DQogICAgICAgIDwvTGlicmFyeUNvb3JkaW5hdGVzU3RhdGU+DQogICAgICAgIDxMaWJyYXJ5Q29vcmRpbmF0ZXNTdGF0ZT4NCiAgICAgICAgICA8b3B0aW9uIG5hbWU9ImFydGlmYWN0SWQiIHZhbHVlPSJyaWRlclJEIiAvPg0KICAgICAgICAgIDxvcHRpb24gbmFtZT0iZ3JvdXBJZCIgdmFsdWU9ImNvbS5qZXRicmFpbnMuaW50ZWxsaWoucmlkZXIiIC8+DQogICAgICAgIDwvTGlicmFyeUNvb3JkaW5hdGVzU3RhdGU+DQogICAgICAgIDxMaWJyYXJ5Q29vcmRpbmF0ZXNTdGF0ZT4NCiAgICAgICAgICA8b3B0aW9uIG5hbWU9ImFydGlmYWN0SWQiIHZhbHVlPSJyaWRlclJEIiAvPg0KICAgICAgICAgIDxvcHRpb24gbmFtZT0iZ3JvdXBJZCIgdmFsdWU9ImNvbS5qZXRicmFpbnMiIC8+DQogICAgICAgIDwvTGlicmFyeUNvb3JkaW5hdGVzU3RhdGU+DQogICAgICAgIDxMaWJyYXJ5Q29vcmRpbmF0ZXNTdGF0ZT4NCiAgICAgICAgICA8b3B0aW9uIG5hbWU9ImFydGlmYWN0SWQiIHZhbHVlPSJnb2xhbmQiIC8+DQogICAgICAgICAgPG9wdGlvbiBuYW1lPSJncm91cElkIiB2YWx1ZT0iY29tLmpldGJyYWlucy5pbnRlbGxpai5nb2xhbmQiIC8+DQogICAgICAgIDwvTGlicmFyeUNvb3JkaW5hdGVzU3RhdGU+DQogICAgICAgIDxMaWJyYXJ5Q29vcmRpbmF0ZXNTdGF0ZT4NCiAgICAgICAgICA8b3B0aW9uIG5hbWU9ImFydGlmYWN0SWQiIHZhbHVlPSJnb2xhbmQiIC8+DQogICAgICAgICAgPG9wdGlvbiBuYW1lPSJncm91cElkIiB2YWx1ZT0iY29tLmpldGJyYWlucyIgLz4NCiAgICAgICAgPC9MaWJyYXJ5Q29vcmRpbmF0ZXNTdGF0ZT4NCiAgICAgIDwvbGlzdD4NCiAgICA8L29wdGlvbj4NCiAgPC9jb21wb25lbnQ+DQo8L3Byb2plY3Q+"}, response: {"metadata":{"result":"ok"},"data":null,"is_error":false,"error":""}, error:<nil>	{"source": "sync.down"}
2021-06-26T13:14:12.685+0300	INFO	request: {"metadata":{"filename":"GrpcClient.java","method":"save","path":"java/kubemq-java/kubemq-java-sdk/src/main/java/io/kubemq/sdk/basic"},"data":""}, response: {"metadata":{"result":"ok"},"data":null,"is_error":false,"error":""}, error:<nil>	{"source": "sync.down"}
2021-06-26T13:14:12.911+0300	INFO	request: {"metadata":{"filename":"workspace.xml","method":"save","path":"java/poc/test/.idea"},"data":"PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0iVVRGLTgiPz4NCjxwcm9qZWN0IHZlcnNpb249IjQiPg0KICA8Y29tcG9uZW50IG5hbWU9IkNoYW5nZUxpc3RNYW5hZ2VyIj4NCiAgICA8bGlzdCBkZWZhdWx0PSJ0cnVlIiBpZD0iOTY4N2I4NzUtNjMwOS00NzBkLTk1Y2ItYTI0ZjljMzIyMzVkIiBuYW1lPSJEZWZhdWx0IENoYW5nZWxpc3QiIGNvbW1lbnQ9IiIgLz4NCiAgICA8b3B0aW9uIG5hbWU9IlNIT1dfRElBTE9HIiB2YWx1ZT0iZmFsc2UiIC8+DQogICAgPG9wdGlvbiBuYW1lPSJISUdITElHSFRfQ09ORkxJQ1RTIiB2YWx1ZT0idHJ1ZSIgLz4NCiAgICA8b3B0aW9uIG5hbWU9IkhJR0hMSUdIVF9OT05fQUNUSVZFX0NIQU5HRUxJU1QiIHZhbHVlPSJmYWxzZSIgLz4NCiAgICA8b3B0aW9uIG5hbWU9IkxBU1RfUkVTT0xVVElPTiIgdmFsdWU9IklHTk9SRSIgLz4NCiAgPC9jb21wb25lbnQ+DQogIDxjb21wb25lbnQgbmFtZT0iS3ViZXJuZXRlc0FwaVBlcnNpc3RlbmNlIj4NCiAgICA8b3B0aW9uIG5hbWU9ImNvbnRleHQiIHZhbHVlPSJrM2QtazNzLWRlZmF1bHQiIC8+DQogICAgPG9wdGlvbiBuYW1lPSJuYW1lc3BhY2UiIHZhbHVlPSJkZWZhdWx0IiAvPg0KICA8L2NvbXBvbmVudD4NCiAgPGNvbXBvbmVudCBuYW1lPSJQcm9qZWN0SWQiIGlkPSIxcjdsYjRqNG9RdHVJcWVaUTByRmx1djRvUTkiIC8+DQogIDxjb21wb25lbnQgbmFtZT0iUHJvamVjdFZpZXciPg0KICAgIDxuYXZpZ2F0b3IgY3VycmVudFZpZXc9IlByb2plY3RQYW5lIiBwcm9wb3J0aW9ucz0iIiB2ZXJzaW9uPSIxIiBzcGxpdHRlclByb3BvcnRpb249IjAuNSI+DQogICAgICA8ZmxhdHRlblBhY2thZ2VzIC8+DQogICAgICA8c2hvd01lbWJlcnMgLz4NCiAgICAgIDxzaG93TW9kdWxlcyAvPg0KICAgICAgPHNob3dMaWJyYXJ5Q29udGVudHMgLz4NCiAgICAgIDxoaWRlRW1wdHlQYWNrYWdlcyAvPg0KICAgICAgPGFiYnJldmlhdGVQYWNrYWdlTmFtZXMgLz4NCiAgICAgIDxhdXRvc2Nyb2xsVG9Tb3VyY2UgLz4NCiAgICAgIDxhdXRvc2Nyb2xsRnJvbVNvdXJjZSAvPg0KICAgICAgPHNvcnRCeVR5cGUgLz4NCiAgICA8L25hdmlnYXRvcj4NCiAgICA8cGFuZXM+DQogICAgICA8cGFuZSBpZD0iU2NvcGUiIC8+DQogICAgICA8cGFuZSBpZD0iUGFja2FnZXNQYW5lIiAvPg0KICAgICAgPHBhbmUgaWQ9IlByb2plY3RQYW5lIj4NCiAgICAgICAgPHN1YlBhbmU+DQogICAgICAgICAgPFBBVEg+DQogICAgICAgICAgICA8UEFUSF9FTEVNRU5UPg0KICAgICAgICAgICAgICA8b3B0aW9uIG5hbWU9Im15SXRlbUlkIiB2YWx1ZT0idW50aXRsZWQxMDQiIC8+DQogICAgICAgICAgICAgIDxvcHRpb24gbmFtZT0ibXlJdGVtVHlwZSIgdmFsdWU9ImNvbS5pbnRlbGxpai5pZGUucHJvamVjdFZpZXcuaW1wbC5ub2Rlcy5Qcm9qZWN0Vmlld1Byb2plY3ROb2RlIiAvPg0KICAgICAgICAgICAgPC9QQVRIX0VMRU1FTlQ+DQogICAgICAgICAgPC9QQVRIPg0KICAgICAgICAgIDxQQVRIPg0KICAgICAgICAgICAgPFBBVEhfRUxFTUVOVD4NCiAgICAgICAgICAgICAgPG9wdGlvbiBuYW1lPSJteUl0ZW1JZCIgdmFsdWU9InVudGl0bGVkMTA0IiAvPg0KICAgICAgICAgICAgICA8b3B0aW9uIG5hbWU9Im15SXRlbVR5cGUiIHZhbHVlPSJjb20uaW50ZWxsaWouaWRlLnByb2plY3RWaWV3LmltcGwubm9kZXMuUHJvamVjdFZpZXdQcm9qZWN0Tm9kZSIgLz4NCiAgICAgICAgICAgIDwvUEFUSF9FTEVNRU5UPg0KICAgICAgICAgICAgPFBBVEhfRUxFTUVOVD4NCiAgICAgICAgICAgICAgPG9wdGlvbiBuYW1lPSJteUl0ZW1JZCIgdmFsdWU9InVudGl0bGVkMTA0IiAvPg0KICAgICAgICAgICAgICA8b3B0aW9uIG5hbWU9Im15SXRlbVR5cGUiIHZhbHVlPSJjb20uaW50ZWxsaWouaWRlLnByb2plY3RWaWV3LmltcGwubm9kZXMuUHNpRGlyZWN0b3J5Tm9kZSIgLz4NCiAgICAgICAgICAgIDwvUEFUSF9FTEVNRU5UPg0KICAgICAgICAgIDwvUEFUSD4NCiAgICAgICAgICA8UEFUSD4NCiAgICAgICAgICAgIDxQQVRIX0VMRU1FTlQ+DQogICAgICAgICAgICAgIDxvcHRpb24gbmFtZT0ibXlJdGVtSWQiIHZhbHVlPSJ1bnRpdGxlZDEwNCIgLz4NCiAgICAgICAgICAgICAgPG9wdGlvbiBuYW1lPSJteUl0ZW1UeXBlIiB2YWx1ZT0iY29tLmludGVsbGlqLmlkZS5wcm9qZWN0Vmlldy5pbXBsLm5vZGVzLlByb2plY3RWaWV3UHJvamVjdE5vZGUiIC8+DQogICAgICAgICAgICA8L1BBVEhfRUxFTUVOVD4NCiAgICAgICAgICAgIDxQQVRIX0VMRU1FTlQ+DQogICAgICAgICAgICAgIDxvcHRpb24gbmFtZT0ibXlJdGVtSWQiIHZhbHVlPSJ1bnRpdGxlZDEwNCIgLz4NCiAgICAgICAgICAgICAgPG9wdGlvbiBuYW1lPSJteUl0ZW1UeXBlIiB2YWx1ZT0iY29tLmludGVsbGlqLmlkZS5wcm9qZWN0Vmlldy5pbXBsLm5vZGVzLlBzaURpcmVjdG9yeU5vZGUiIC8+DQogICAgICAgICAgICA8L1BBVEhfRUxFTUVOVD4NCiAgICAgICAgICAgIDxQQVRIX0VMRU1FTlQ+DQogICAgICAgICAgICAgIDxvcHRpb24gbmFtZT0ibXlJdGVtSWQiIHZhbHVlPSJzcmMiIC8+DQogICAgICAgICAgICAgIDxvcHRpb24gbmFtZT0ibXlJdGVtVHlwZSIgdmFsdWU9ImNvbS5pbnRlbGxpai5pZGUucHJvamVjdFZpZXcuaW1wbC5ub2Rlcy5Qc2lEaXJlY3RvcnlOb2RlIiAvPg0KICAgICAgICAgICAgPC9QQVRIX0VMRU1FTlQ+DQogICAgICAgICAgICA8UEFUSF9FTEVNRU5UPg0KICAgICAgICAgICAgICA8b3B0aW9uIG5hbWU9Im15SXRlbUlkIiB2YWx1ZT0iY29tcGFueSIgLz4NCiAgICAgICAgICAgICAgPG9wdGlvbiBuYW1lPSJteUl0ZW1UeXBlIiB2YWx1ZT0iY29tLmludGVsbGlqLmlkZS5wcm9qZWN0Vmlldy5pbXBsLm5vZGVzLlBzaURpcmVjdG9yeU5vZGUiIC8+DQogICAgICAgICAgICA8L1BBVEhfRUxFTUVOVD4NCiAgICAgICAgICA8L1BBVEg+DQogICAgICAgIDwvc3ViUGFuZT4NCiAgICAgIDwvcGFuZT4NCiAgICA8L3BhbmVzPg0KICA8L2NvbXBvbmVudD4NCiAgPGNvbXBvbmVudCBuYW1lPSJQcm9qZWN0Vmlld1N0YXRlIj4NCiAgICA8b3B0aW9uIG5hbWU9ImhpZGVFbXB0eU1pZGRsZVBhY2thZ2VzIiB2YWx1ZT0idHJ1ZSIgLz4NCiAgICA8b3B0aW9uIG5hbWU9InNob3dMaWJyYXJ5Q29udGVudHMiIHZhbHVlPSJ0cnVlIiAvPg0KICA8L2NvbXBvbmVudD4NCiAgPGNvbXBvbmVudCBuYW1lPSJQcm9wZXJ0aWVzQ29tcG9uZW50Ij4NCiAgICA8cHJvcGVydHkgbmFtZT0iQUNUSVZFX0NMT1VEX1BST0pFQ1RfQUNDT1VOVCIgdmFsdWU9Imxpb3IubmFiYXRAa3ViZW1xLmlvIiAvPg0KICAgIDxwcm9wZXJ0eSBuYW1lPSJBQ1RJVkVfQ0xPVURfUFJPSkVDVF9JRCIgdmFsdWU9Imt1YmVtcSIgLz4NCiAgICA8cHJvcGVydHkgbmFtZT0iQUNUSVZFX0NMT1VEX1BST0pFQ1RfTkFNRSIgdmFsdWU9Imt1YmVtcSIgLz4NCiAgICA8cHJvcGVydHkgbmFtZT0iQUNUSVZFX0NMT1VEX1BST0pFQ1RfTlVNQkVSIiB2YWx1ZT0iOTY4MjMxNTQ5NjYyIiAvPg0KICAgIDxwcm9wZXJ0eSBuYW1lPSJXZWJTZXJ2ZXJUb29sV2luZG93RmFjdG9yeVN0YXRlIiB2YWx1ZT0iZmFsc2UiIC8+DQogICAgPHByb3BlcnR5IG5hbWU9ImNvbS5nb29nbGUuY2xvdWRjb2RlLmlkZV9zZXNzaW9uX2luZGV4IiB2YWx1ZT0iMjAyMTA0MTRfMDAxMCIgLz4NCiAgICA8cHJvcGVydHkgbmFtZT0iZ28uaW1wb3J0LnNldHRpbmdzLm1pZ3JhdGVkIiB2YWx1ZT0idHJ1ZSIgLz4NCiAgICA8cHJvcGVydHkgbmFtZT0ibGFzdF9vcGVuZWRfZmlsZV9wYXRoIiB2YWx1ZT0iJFBST0pFQ1RfRElSJC8uLi8uLi9rdWJlbXEtSmF2YSIgLz4NCiAgICA8cHJvcGVydHkgbmFtZT0icHJvamVjdC5zdHJ1Y3R1cmUubGFzdC5lZGl0ZWQiIHZhbHVlPSJQcm9qZWN0IiAvPg0KICAgIDxwcm9wZXJ0eSBuYW1lPSJwcm9qZWN0LnN0cnVjdHVyZS5wcm9wb3J0aW9uIiB2YWx1ZT0iMC4xNSIgLz4NCiAgICA8cHJvcGVydHkgbmFtZT0icHJvamVjdC5zdHJ1Y3R1cmUuc2lkZS5wcm9wb3J0aW9uIiB2YWx1ZT0iMC4wIiAvPg0KICAgIDxwcm9wZXJ0eSBuYW1lPSJzZXR0aW5ncy5lZGl0b3Iuc2VsZWN0ZWQuY29uZmlndXJhYmxlIiB2YWx1ZT0icHJlZmVyZW5jZXMubG9va0ZlZWwiIC8+DQogIDwvY29tcG9uZW50Pg0KICA8Y29tcG9uZW50IG5hbWU9IlJ1bk1hbmFnZXIiPg0KICAgIDxjb25maWd1cmF0aW9uIG5hbWU9Ik1haW4iIHR5cGU9IkFwcGxpY2F0aW9uIiBmYWN0b3J5TmFtZT0iQXBwbGljYXRpb24iIHRlbXBvcmFyeT0idHJ1ZSI+DQogICAgICA8b3B0aW9uIG5hbWU9Ik1BSU5fQ0xBU1NfTkFNRSIgdmFsdWU9ImNvbS5jb21wYW55Lk1haW4iIC8+DQogICAgICA8bW9kdWxlIG5hbWU9InRlc3QiIC8+DQogICAgICA8b3B0aW9uIG5hbWU9IldPUktJTkdfRElSRUNUT1JZIiB2YWx1ZT0iZmlsZTovLyRQUk9KRUNUX0RJUiQiIC8+DQogICAgICA8UnVubmVyU2V0dGluZ3MgUnVubmVySWQ9IlJ1biIgLz4NCiAgICAgIDxDb25maWd1cmF0aW9uV3JhcHBlciBSdW5uZXJJZD0iUnVuIiAvPg0KICAgICAgPG1ldGhvZCB2PSIyIj4NCiAgICAgICAgPG9wdGlvbiBuYW1lPSJNYWtlIiBlbmFibGVkPSJ0cnVlIiAvPg0KICAgICAgPC9tZXRob2Q+DQogICAgPC9jb25maWd1cmF0aW9uPg0KICAgIDxyZWNlbnRfdGVtcG9yYXJ5Pg0KICAgICAgPGxpc3Q+DQogICAgICAgIDxpdGVtIGl0ZW12YWx1ZT0iQXBwbGljYXRpb24uTWFpbiIgLz4NCiAgICAgIDwvbGlzdD4NCiAgICA8L3JlY2VudF90ZW1wb3Jhcnk+DQogIDwvY29tcG9uZW50Pg0KICA8Y29tcG9uZW50IG5hbWU9IlNwZWxsQ2hlY2tlclNldHRpbmdzIiBSdW50aW1lRGljdGlvbmFyaWVzPSIwIiBGb2xkZXJzPSIwIiBDdXN0b21EaWN0aW9uYXJpZXM9IjAiIERlZmF1bHREaWN0aW9uYXJ5PSJhcHBsaWNhdGlvbi1sZXZlbCIgVXNlU2luZ2xlRGljdGlvbmFyeT0idHJ1ZSIgdHJhbnNmZXJyZWQ9InRydWUiIC8+DQogIDxjb21wb25lbnQgbmFtZT0iVGFza01hbmFnZXIiPg0KICAgIDx0YXNrIGFjdGl2ZT0idHJ1ZSIgaWQ9IkRlZmF1bHQiIHN1bW1hcnk9IkRlZmF1bHQgdGFzayI+DQogICAgICA8Y2hhbmdlbGlzdCBpZD0iOTY4N2I4NzUtNjMwOS00NzBkLTk1Y2ItYTI0ZjljMzIyMzVkIiBuYW1lPSJEZWZhdWx0IENoYW5nZWxpc3QiIGNvbW1lbnQ9IiIgLz4NCiAgICAgIDxjcmVhdGVkPjE2MTgzMzUwNzc5Mzk8L2NyZWF0ZWQ+DQogICAgICA8b3B0aW9uIG5hbWU9Im51bWJlciIgdmFsdWU9IkRlZmF1bHQiIC8+DQogICAgICA8b3B0aW9uIG5hbWU9InByZXNlbnRhYmxlSWQiIHZhbHVlPSJEZWZhdWx0IiAvPg0KICAgICAgPHVwZGF0ZWQ+MTYxODMzNTA3NzkzOTwvdXBkYXRlZD4NCiAgICAgIDx3b3JrSXRlbSBmcm9tPSIxNjE4MzM1MDc5NDA1IiBkdXJhdGlvbj0iMjQ1NDAwMCIgLz4NCiAgICAgIDx3b3JrSXRlbSBmcm9tPSIxNjE4MzczMzUyNzMwIiBkdXJhdGlvbj0iNzIwMDAiIC8+DQogICAgICA8d29ya0l0ZW0gZnJvbT0iMTYxODM3MzQ0ODQ3MiIgZHVyYXRpb249IjM2MDAwIiAvPg0KICAgIDwvdGFzaz4NCiAgICA8c2VydmVycyAvPg0KICA8L2NvbXBvbmVudD4NCiAgPGNvbXBvbmVudCBuYW1lPSJUeXBlU2NyaXB0R2VuZXJhdGVkRmlsZXNNYW5hZ2VyIj4NCiAgICA8b3B0aW9uIG5hbWU9InZlcnNpb24iIHZhbHVlPSIzIiAvPg0KICA8L2NvbXBvbmVudD4NCjwvcHJvamVjdD4="}, response: {"metadata":{"result":"ok"},"data":null,"is_error":false,"error":""}, error:<nil>	{"source": "sync.down"}
2021-06-26T13:14:12.918+0300	INFO	request: {"metadata":{"filename":"kubemqGrpc.javax","method":"save","path":"java/kubemq-java/kubemq-java-sdk/src/main/java/io/kubemq/sdk/grpc"},"data":""}, response: {"metadata":{"result":"ok"},"data":null,"is_error":false,"error":""}, error:<nil>	{"source": "sync.down"}
2021-06-26T13:14:12.967+0300	INFO	request: {"metadata":{"filename":"test.iml","method":"save","path":"java/poc/test"},"data":"PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0iVVRGLTgiPz4NCjxtb2R1bGUgdHlwZT0iSkFWQV9NT0RVTEUiIHZlcnNpb249IjQiPg0KICA8Y29tcG9uZW50IG5hbWU9Ik5ld01vZHVsZVJvb3RNYW5hZ2VyIiBpbmhlcml0LWNvbXBpbGVyLW91dHB1dD0idHJ1ZSI+DQogICAgPGV4Y2x1ZGUtb3V0cHV0IC8+DQogICAgPGNvbnRlbnQgdXJsPSJmaWxlOi8vJE1PRFVMRV9ESVIkIj4NCiAgICAgIDxzb3VyY2VGb2xkZXIgdXJsPSJmaWxlOi8vJE1PRFVMRV9ESVIkL3NyYyIgaXNUZXN0U291cmNlPSJmYWxzZSIgLz4NCiAgICA8L2NvbnRlbnQ+DQogICAgPG9yZGVyRW50cnkgdHlwZT0iaW5oZXJpdGVkSmRrIiAvPg0KICAgIDxvcmRlckVudHJ5IHR5cGU9InNvdXJjZUZvbGRlciIgZm9yVGVzdHM9ImZhbHNlIiAvPg0KICA8L2NvbXBvbmVudD4NCjwvbW9kdWxlPg=="}, response: {"metadata":{"result":"ok"},"data":null,"is_error":false,"error":""}, error:<nil>	{"source": "sync.down"}
2021-06-26T13:14:13.066+0300	INFO	request: {"metadata":{"filename":"ReceiveMessagesResponse.java","method":"save","path":"java/kubemq-java/kubemq-java-sdk/src/main/java/io/kubemq/sdk/queue"},"data":"LyoNCiAqIE1JVCBMaWNlbnNlDQogKg0KICogQ29weXJpZ2h0IChjKSAyMDE4IEt1YmVNUQ0KICoNCiAqIFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhIGNvcHkNCiAqIG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlICJTb2Z0d2FyZSIpLCB0byBkZWFsDQogKiBpbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzDQogKiB0byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsDQogKiBjb3BpZXMgb2YgdGhlIFNvZnR3YXJlLCBhbmQgdG8gcGVybWl0IHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXMNCiAqIGZ1cm5pc2hlZCB0byBkbyBzbywgc3ViamVjdCB0byB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnM6DQogKg0KICogVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWQgaW4gYWxsDQogKiBjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLg0KICoNCiAqIFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCAiQVMgSVMiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTIE9SDQogKiBJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWSwNCiAqIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOIE5PIEVWRU5UIFNIQUxMIFRIRQ0KICogQVVUSE9SUyBPUiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSwgREFNQUdFUyBPUiBPVEhFUg0KICogTElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUiBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSwNCiAqIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRSBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU4gVEhFDQogKiBTT0ZUV0FSRS4NCiAqLw0KcGFja2FnZSBpby5rdWJlbXEuc2RrLnF1ZXVlOw0KDQppbXBvcnQgamF2YS51dGlsLkFycmF5TGlzdDsNCmltcG9ydCBqYXZhLnV0aWwuQ29sbGVjdGlvbjsNCg0KaW1wb3J0IGlvLmt1YmVtcS5zZGsuZ3JwYy5LdWJlbXEuUXVldWVNZXNzYWdlOw0KaW1wb3J0IGlvLmt1YmVtcS5zZGsuZ3JwYy5LdWJlbXEuUmVjZWl2ZVF1ZXVlTWVzc2FnZXNSZXNwb25zZTsNCg0KLyoqDQogKiBRdWV1ZSByZXNwb25zZS4NCiAqLw0KcHVibGljIGNsYXNzIFJlY2VpdmVNZXNzYWdlc1Jlc3BvbnNlIHsNCg0KICAgIHByaXZhdGUgUmVjZWl2ZVF1ZXVlTWVzc2FnZXNSZXNwb25zZSByZWNlaXZlUXVldWVNZXNzYWdlc1Jlc3BvbnNlOw0KDQogICAgcHJvdGVjdGVkIFJlY2VpdmVNZXNzYWdlc1Jlc3BvbnNlKFJlY2VpdmVRdWV1ZU1lc3NhZ2VzUmVzcG9uc2UgcmVjKSB7DQogICAgICAgIHJlY2VpdmVRdWV1ZU1lc3NhZ2VzUmVzcG9uc2UgPSByZWM7DQogICAgfQ0KDQogICAgLyoqDQogICAgICogVW5pcXVlIGZvciBSZXF1ZXN0DQogICAgICogDQogICAgICogQHJldHVybiBSZXF1ZXN0IElELg0KICAgICAqLw0KICAgIHB1YmxpYyBTdHJpbmcgZ2V0UmVxdWVzdElEKCkgew0KICAgICAgICByZXR1cm4gdGhpcy5yZWNlaXZlUXVldWVNZXNzYWdlc1Jlc3BvbnNlLmdldFJlcXVlc3RJRCgpOw0KICAgIH0NCg0KICAgIC8qKg0KICAgICAqIFJldHVybmVkIGZyb20gS3ViZU1RLCBmYWxzZSBpZiBubyBlcnJvci4NCiAgICAgKiANCiAgICAgKiBAcmV0dXJuIEZhbHNlIGlmIG5vIGVycm9yLg0KICAgICAqLw0KICAgIHB1YmxpYyBCb29sZWFuIGdldElzRXJyb3IoKSB7DQogICAgICAgIHJldHVybiB0aGlzLnJlY2VpdmVRdWV1ZU1lc3NhZ2VzUmVzcG9uc2UuZ2V0SXNFcnJvcigpOw0KICAgIH0NCg0KICAgIC8qKg0KICAgICAqIEVycm9yIG1lc3NhZ2UsIHZhbGlkIG9ubHkgaWYgSXNFcnJvciB0cnVlLg0KICAgICAqIA0KICAgICAqIEByZXR1cm4gRXJyb3IgbWVzc2FnZS4NCiAgICAgKi8NCiAgICBwdWJsaWMgU3RyaW5nIGdldEVycm9yKCkgew0KICAgICAgICByZXR1cm4gdGhpcy5yZWNlaXZlUXVldWVNZXNzYWdlc1Jlc3BvbnNlLmdldEVycm9yKCk7DQogICAgfQ0KDQogICAgLyoqDQogICAgICogSW5kaWNhdGUgaWYgdGhlIHJlcXVlc3Qgd2FzIHBlZWssIHRydWUgaWYgcGVlay4NCiAgICAgKiANCiAgICAgKiBAcmV0dXJuIFRydWUgaWYgcGVlay4NCiAgICAgKi8NCiAgICBwdWJsaWMgQm9vbGVhbiBnZXRJc1BlZWsoKSB7DQogICAgICAgIHJldHVybiB0aGlzLnJlY2VpdmVRdWV1ZU1lc3NhZ2VzUmVzcG9uc2UuZ2V0SXNQZWFrKCk7DQogICAgfQ0KDQogICAgLyoqDQogICAgICogQ29sbGVjdGlvbiBvZiBNZXNzYWdlcy4NCiAgICAgKiANCiAgICAgKiBAcmV0dXJuIENvbGxlY3Rpb24gb2YgTWVzc2FnZXMuDQogICAgICovDQogICAgcHVibGljIEl0ZXJhYmxlPD8gZXh0ZW5kcyBNZXNzYWdlPiBnZXRNZXNzYWdlcygpIHsNCg0KICAgICAgICBDb2xsZWN0aW9uPE1lc3NhZ2U+IGNsdG4gPSBuZXcgQXJyYXlMaXN0PE1lc3NhZ2U+KCk7IA0KICAgICAgICBmb3IgKFF1ZXVlTWVzc2FnZSBxdWV1ZU1lc3NhZ2UgOiB0aGlzLnJlY2VpdmVRdWV1ZU1lc3NhZ2VzUmVzcG9uc2UuZ2V0TWVzc2FnZXNMaXN0KCkpIHsNCiAgICAgICAgICAgIGNsdG4uYWRkKG5ldyBNZXNzYWdlKHF1ZXVlTWVzc2FnZSkpOw0KICAgICAgICB9DQogICAgICAgIHJldHVybiBjbHRuOw0KICAgIH0NCg0KICAgIC8qKg0KICAgICAqIENvdW50IG9mIG1lc3NhZ2VzIGV4cGlyZWQuDQogICAgICogDQogICAgICogQHJldHVybiBOdW1iZXIgb2YgbWVzc2FnZXMgZXhwaXJlZC4NCiAgICAgKi8NCiAgICBwdWJsaWMgaW50IGdldE1lc3NhZ2VzRXhwaXJlZCgpIHsNCiAgICAgICAgcmV0dXJuIHRoaXMucmVjZWl2ZVF1ZXVlTWVzc2FnZXNSZXNwb25zZS5nZXRNZXNzYWdlc0V4cGlyZWQoKTsNCiAgICB9DQoNCiAgICAvKioNCiAgICAgKiBDb3VudCBvZiByZWNlaXZlZCBtZXNzYWdlcy4NCiAgICAgKiANCiAgICAgKiBAcmV0dXJuIE51bWJlciBvZiByZWNlaXZlZCBtZXNzYWdlcy4NCiAgICAgKi8NCiAgICBwdWJsaWMgaW50IGdldE1lc3NhZ2VzUmVjZWl2ZWQoKSB7DQogICAgICAgIHJldHVybiB0aGlzLnJlY2VpdmVRdWV1ZU1lc3NhZ2VzUmVzcG9uc2UuZ2V0TWVzc2FnZXNSZWNlaXZlZCgpOw0KICAgIH0NCg0KfQ=="}, response: {"metadata":{"result":"ok"},"data":null,"is_error":false,"error":""}, error:<nil>	{"source": "sync.down"}
2021-06-26T13:14:13.221+0300	INFO	request: {"metadata":{"filename":"Program.java","method":"save","path":"java/kubemq-java/examples/src/main/java/io/kubemq/sdk/examples/get_Started/queue_Send_a_Message"},"data":"LyoNCiAqIE1JVCBMaWNlbnNlDQogKg0KICogQ29weXJpZ2h0IChjKSAyMDE4IEt1YmVNUQ0KICoNCiAqIFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhIGNvcHkNCiAqIG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlICJTb2Z0d2FyZSIpLCB0byBkZWFsDQogKiBpbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzDQogKiB0byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsDQogKiBjb3BpZXMgb2YgdGhlIFNvZnR3YXJlLCBhbmQgdG8gcGVybWl0IHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXMNCiAqIGZ1cm5pc2hlZCB0byBkbyBzbywgc3ViamVjdCB0byB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnM6DQogKg0KICogVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWQgaW4gYWxsDQogKiBjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLg0KICoNCiAqIFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCAiQVMgSVMiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTIE9SDQogKiBJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWSwNCiAqIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOIE5PIEVWRU5UIFNIQUxMIFRIRQ0KICogQVVUSE9SUyBPUiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSwgREFNQUdFUyBPUiBPVEhFUg0KICogTElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUiBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSwNCiAqIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRSBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU4gVEhFDQogKiBTT0ZUV0FSRS4NCiAqLw0KcGFja2FnZSBpby5rdWJlbXEuc2RrLmV4YW1wbGVzLmdldF9TdGFydGVkLnF1ZXVlX1NlbmRfYV9NZXNzYWdlOw0KDQppbXBvcnQgaW8ua3ViZW1xLnNkay5xdWV1ZS5NZXNzYWdlOw0KaW1wb3J0IGlvLmt1YmVtcS5zZGsucXVldWUuUXVldWU7DQppbXBvcnQgaW8ua3ViZW1xLnNkay5xdWV1ZS5TZW5kTWVzc2FnZVJlc3VsdDsNCmltcG9ydCBpby5rdWJlbXEuc2RrLmJhc2ljLlNlcnZlckFkZHJlc3NOb3RTdXBwbGllZEV4Y2VwdGlvbjsNCmltcG9ydCBpby5rdWJlbXEuc2RrLmdycGMuS3ViZW1xOw0KaW1wb3J0IGlvLmt1YmVtcS5zZGsudG9vbHMuQ29udmVydGVyOw0KDQppbXBvcnQgamF2YXgubmV0LnNzbC5TU0xFeGNlcHRpb247DQppbXBvcnQgamF2YS5pby5JT0V4Y2VwdGlvbjsNCg0KcHVibGljIGNsYXNzIFByb2dyYW0gew0KDQogICAgcHVibGljIHN0YXRpYyB2b2lkIG1haW4oU3RyaW5nW10gYXJncykgdGhyb3dzIFNlcnZlckFkZHJlc3NOb3RTdXBwbGllZEV4Y2VwdGlvbiwgSU9FeGNlcHRpb24gew0KDQogICAgICAgIFN0cmluZyBxdWV1ZU5hbWUgPSAiaGVsbG8td29ybGQtcXVldWUiLCBjbGllbnRJRCA9ICJ0ZXN0LXF1ZXVlLWNsaWVudC1pZDIiLA0KICAgICAgICAgICAgICAgIGt1YmVNUVNlcnZlckFkZHJlc3MgPSAibG9jYWxob3N0OjUwMDAwIjsNCg0KICAgICAgICBRdWV1ZSBxdWV1ZSA9IG51bGw7DQogICAgICAgIHRyeSB7DQogICAgICAgICAgICBxdWV1ZSA9IG5ldyBpby5rdWJlbXEuc2RrLnF1ZXVlLlF1ZXVlKHF1ZXVlTmFtZSwgY2xpZW50SUQsIGt1YmVNUVNlcnZlckFkZHJlc3MpOw0KICAgICAgICAgICAgcXVldWUuc2V0TWF4TnVtYmVyT2ZNZXNzYWdlc1F1ZXVlTWVzc2FnZXMoMik7DQogICAgICAgICAgICBxdWV1ZS5zZXRXYWl0VGltZVNlY29uZHNRdWV1ZU1lc3NhZ2VzKDEpOw0KICAgICAgICB9IGNhdGNoIChTZXJ2ZXJBZGRyZXNzTm90U3VwcGxpZWRFeGNlcHRpb24gZSkgew0KICAgICAgICAgICAgU3lzdGVtLm91dC5wcmludGxuKCJFcnJvcjogQ2FuIG5vdCBkZXRlcm1pbmUgS3ViZU1RIHNlcnZlciBhZGRyZXNzLiIpOw0KICAgICAgICB9IGNhdGNoIChTU0xFeGNlcHRpb24gZSkgew0KICAgICAgICAgICAgU3lzdGVtLm91dC5wcmludGxuKCJFcnJvcjogZXJyb3IgZGV0ZWN0ZWQgYnkgYW4gU1NMIHN1YnN5c3RlbSIpOw0KICAgICAgICB9DQoNCiAgICAgICAgTWVzc2FnZSBtc2cgPSBuZXcgTWVzc2FnZSgpLnNldEJvZHkoQ29udmVydGVyLlRvQnl0ZUFycmF5KCJzb21lLXNpbXBsZV9xdWV1ZS1xdWV1ZS1tZXNzYWdlIikpDQogICAgICAgICAgICAgICAgLnNldE1ldGFkYXRhKCJlbXB0eSIpOw0KICAgICAgICBTZW5kTWVzc2FnZVJlc3VsdCByZXM7DQogICAgICAgIHRyeSB7DQogICAgICAgICAgICByZXMgPSBxdWV1ZS5TZW5kUXVldWVNZXNzYWdlKG1zZyk7DQogICAgICAgICAgICBpZihyZXMuZ2V0SXNFcnJvcigpICApICAgICAgIHsNCiAgICAgICAgICAgICAgICBTeXN0ZW0ub3V0LnByaW50bG4oIm1lc3NhZ2UgZW5xdWV1ZSBlcnJvciwgZXJyb3I6e3Jlcy5FcnJvcn0iKTsNCiAgICAgICAgICAgICAgfSBlbHNlew0KICAgICAgICAgICAgICAgIFN5c3RlbS5vdXQucHJpbnRsbigibWVzc2FnZSBzZW50IGF0LCB7cmVzLlNlbnRBdH0iKTsNCiAgICAgICAgICAgICAgfQ0KICAgICAgICB9IGNhdGNoIChTU0xFeGNlcHRpb24gIGUpIHsNCiAgICAgICAgICAgIC8vIFRPRE8gQXV0by1nZW5lcmF0ZWQgY2F0Y2ggYmxvY2sNCiAgICAgICAgICAgIGUucHJpbnRTdGFja1RyYWNlKCk7DQogICAgICAgIH0NCiAgICB9DQp9DQo="}, response: {"metadata":{"result":"ok"},"data":null,"is_error":false,"error":""}, error:<nil>	{"source": "sync.down"}
2021-06-26T13:14:13.374+0300	INFO	request: {"metadata":{"filename":"Request.java","method":"save","path":"java/kubemq-java/kubemq-java-sdk/src/main/java/io/kubemq/sdk/commandquery/lowlevel"},"data":""}, response: {"metadata":{"result":"ok"},"data":null,"is_error":false,"error":""}, error:<nil>	{"source": "sync.down"}
2021-06-26T13:14:13.425+0300	INFO	request: {"metadata":{"filename":"post-update.sample","method":"save","path":"java/kubemq-java/.git/hooks"},"data":"IyEvYmluL3NoCiMKIyBBbiBleGFtcGxlIGhvb2sgc2NyaXB0IHRvIHByZXBhcmUgYSBwYWNrZWQgcmVwb3NpdG9yeSBmb3IgdXNlIG92ZXIKIyBkdW1iIHRyYW5zcG9ydHMuCiMKIyBUbyBlbmFibGUgdGhpcyBob29rLCByZW5hbWUgdGhpcyBmaWxlIHRvICJwb3N0LXVwZGF0ZSIuCgpleGVjIGdpdCB1cGRhdGUtc2VydmVyLWluZm8K"}, response: {"metadata":{"result":"ok"},"data":null,"is_error":false,"error":""}, error:<nil>	{"source": "sync.down"}
2021-06-26T13:14:13.449+0300	INFO	request: {"metadata":{"filename":"fileHashes.lock","method":"save","path":"java/kubemq-java/.gradle/4.8/fileHashes"},"data":"A0kwD0b/2kb5AAAAAAAAAA4="}, response: {"metadata":{"result":"ok"},"data":null,"is_error":false,"error":""}, error:<nil>	{"source": "sync.down"}
2021-06-26T13:14:13.577+0300	INFO	request: {"metadata":{"filename":"HEAD","method":"save","path":"java/kubemq-java/.git/logs"},"data":"MDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMCA0MjllNWUyODMzNDg0MzkwMDJkZjAxNTRmNDIxZDExZjVlMTk0YzBkIGt1YmVtcSA8bGlvci5uYWJhdEBrdWJlbXEuaW8+IDE2MTgzODUyNjkgKzAzMDAJY2xvbmU6IGZyb20gaHR0cHM6Ly9naXRodWIuY29tL2t1YmVtcS1pby9rdWJlbXEtSmF2YS5naXQK"}, response: {"metadata":{"result":"ok"},"data":null,"is_error":false,"error":""}, error:<nil>	{"source": "sync.down"}
2021-06-26T13:14:13.844+0300	INFO	request: {"metadata":{"filename":"pre-receive.sample","method":"save","path":"java/kubemq-java/.git/hooks"},"data":"IyEvYmluL3NoCiMKIyBBbiBleGFtcGxlIGhvb2sgc2NyaXB0IHRvIG1ha2UgdXNlIG9mIHB1c2ggb3B0aW9ucy4KIyBUaGUgZXhhbXBsZSBzaW1wbHkgZWNob2VzIGFsbCBwdXNoIG9wdGlvbnMgdGhhdCBzdGFydCB3aXRoICdlY2hvYmFjaz0nCiMgYW5kIHJlamVjdHMgYWxsIHB1c2hlcyB3aGVuIHRoZSAicmVqZWN0IiBwdXNoIG9wdGlvbiBpcyB1c2VkLgojCiMgVG8gZW5hYmxlIHRoaXMgaG9vaywgcmVuYW1lIHRoaXMgZmlsZSB0byAicHJlLXJlY2VpdmUiLgoKaWYgdGVzdCAtbiAiJEdJVF9QVVNIX09QVElPTl9DT1VOVCIKdGhlbgoJaT0wCgl3aGlsZSB0ZXN0ICIkaSIgLWx0ICIkR0lUX1BVU0hfT1BUSU9OX0NPVU5UIgoJZG8KCQlldmFsICJ2YWx1ZT1cJEdJVF9QVVNIX09QVElPTl8kaSIKCQljYXNlICIkdmFsdWUiIGluCgkJZWNob2JhY2s9KikKCQkJZWNobyAiZWNobyBmcm9tIHRoZSBwcmUtcmVjZWl2ZS1ob29rOiAke3ZhbHVlIyo9fSIgPiYyCgkJCTs7CgkJcmVqZWN0KQoJCQlleGl0IDEKCQllc2FjCgkJaT0kKChpICsgMSkpCglkb25lCmZpCg=="}, response: {"metadata":{"result":"ok"},"data":null,"is_error":false,"error":""}, error:<nil>	{"source": "sync.down"}
2021-06-26T13:14:13.884+0300	INFO	request: {"metadata":{"filename":"SubscribeType.java","method":"save","path":"java/kubemq-java/kubemq-java-sdk/src/main/java/io/kubemq/sdk/subscription"},"data":"LyoNCiAqIE1JVCBMaWNlbnNlDQogKg0KICogQ29weXJpZ2h0IChjKSAyMDE4IEt1YmVNUQ0KICoNCiAqIFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhIGNvcHkNCiAqIG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlICJTb2Z0d2FyZSIpLCB0byBkZWFsDQogKiBpbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzDQogKiB0byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsDQogKiBjb3BpZXMgb2YgdGhlIFNvZnR3YXJlLCBhbmQgdG8gcGVybWl0IHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXMNCiAqIGZ1cm5pc2hlZCB0byBkbyBzbywgc3ViamVjdCB0byB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnM6DQogKg0KICogVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWQgaW4gYWxsDQogKiBjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLg0KICoNCiAqIFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCAiQVMgSVMiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTIE9SDQogKiBJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWSwNCiAqIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOIE5PIEVWRU5UIFNIQUxMIFRIRQ0KICogQVVUSE9SUyBPUiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSwgREFNQUdFUyBPUiBPVEhFUg0KICogTElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUiBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSwNCiAqIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRSBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU4gVEhFDQogKiBTT0ZUV0FSRS4NCiAqLw0KcGFja2FnZSBpby5rdWJlbXEuc2RrLnN1YnNjcmlwdGlvbjsNCg0KLyoqDQogKiBUeXBlIG9mIHN1YnNjcmlwdGlvbiBvcGVyYXRpb24gcGF0dGVybg0KICovDQpwdWJsaWMgZW51bSBTdWJzY3JpYmVUeXBlIHsNCg0KICAgIC8qKg0KICAgICAqIERlZmF1bHQNCiAgICAgKi8NCiAgICBTdWJzY3JpYmVUeXBlVW5kZWZpbmVkKDApLA0KDQogICAgLyoqDQogICAgICogUHViU3ViIGV2ZW50DQogICAgICovDQogICAgRXZlbnRzKDEpLA0KDQogICAgLyoqDQogICAgICogUHViU3ViIGV2ZW50IHdpdGggcGVyc2lzdGVuY2UNCiAgICAgKi8NCiAgICBFdmVudHNTdG9yZSgyKSwNCg0KICAgIC8qKg0KICAgICAqIFJlcVJlcCBwZXJmb3JtIGFjdGlvbg0KICAgICAqLw0KICAgIENvbW1hbmRzKDMpLA0KDQogICAgLyoqDQogICAgICogUmVxUmVwIHJldHVybiBkYXRhDQogICAgICovDQogICAgUXVlcmllcyg0KTsNCg0KICAgIHByaXZhdGUgaW50IHZhbHVlOw0KDQogICAgcHJpdmF0ZSBTdWJzY3JpYmVUeXBlKGludCB2YWx1ZSkgew0KICAgICAgICB0aGlzLnZhbHVlID0gdmFsdWU7DQogICAgfQ0KDQogICAgcHVibGljIGludCBnZXRWYWx1ZSgpIHsNCiAgICAgICAgcmV0dXJuIHZhbHVlOw0KICAgIH0NCn0NCg=="}, response: {"metadata":{"result":"ok"},"data":null,"is_error":false,"error":""}, error:<nil>	{"source": "sync.down"}
2021-06-26T13:14:13.911+0300	INFO	request: {"metadata":{"filename":"EventReceive.java","method":"save","path":"java/kubemq-java/kubemq-java-sdk/src/main/java/io/kubemq/sdk/event"},"data":"LyoNCiAqIE1JVCBMaWNlbnNlDQogKg0KICogQ29weXJpZ2h0IChjKSAyMDE4IEt1YmVNUQ0KICoNCiAqIFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhIGNvcHkNCiAqIG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlICJTb2Z0d2FyZSIpLCB0byBkZWFsDQogKiBpbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzDQogKiB0byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsDQogKiBjb3BpZXMgb2YgdGhlIFNvZnR3YXJlLCBhbmQgdG8gcGVybWl0IHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXMNCiAqIGZ1cm5pc2hlZCB0byBkbyBzbywgc3ViamVjdCB0byB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnM6DQogKg0KICogVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWQgaW4gYWxsDQogKiBjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLg0KICoNCiAqIFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCAiQVMgSVMiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTIE9SDQogKiBJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWSwNCiAqIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOIE5PIEVWRU5UIFNIQUxMIFRIRQ0KICogQVVUSE9SUyBPUiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSwgREFNQUdFUyBPUiBPVEhFUg0KICogTElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUiBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSwNCiAqIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRSBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU4gVEhFDQogKiBTT0ZUV0FSRS4NCiAqLw0KcGFja2FnZSBpby5rdWJlbXEuc2RrLmV2ZW50Ow0KDQppbXBvcnQgamF2YS51dGlsLkhhc2hNYXA7DQppbXBvcnQgamF2YS51dGlsLk1hcDsNCg0KaW1wb3J0IGlvLmt1YmVtcS5zZGsuZ3JwYy5LdWJlbXE7DQoNCnB1YmxpYyBjbGFzcyBFdmVudFJlY2VpdmUgew0KDQogICAgcHJpdmF0ZSBTdHJpbmcgZXZlbnRJZDsNCiAgICBwcml2YXRlIFN0cmluZyBjaGFubmVsOw0KICAgIHByaXZhdGUgU3RyaW5nIG1ldGFkYXRhOw0KICAgIHByaXZhdGUgYnl0ZVtdIGJvZHk7DQogICAgcHJpdmF0ZSBsb25nIHRpbWVzdGFtcDsNCiAgICBwcml2YXRlIGxvbmcgc2VxdWVuY2U7DQoJcHJpdmF0ZSBNYXA8U3RyaW5nLCBTdHJpbmc+IHRhZ3M7DQoNCiAgICBwdWJsaWMgRXZlbnRSZWNlaXZlKCkgew0KICAgIH0NCg0KICAgIHB1YmxpYyBFdmVudFJlY2VpdmUoS3ViZW1xLkV2ZW50UmVjZWl2ZSBpbm5lcikgew0KICAgICAgICBldmVudElkID0gaW5uZXIuZ2V0RXZlbnRJRCgpOw0KICAgICAgICBjaGFubmVsID0gaW5uZXIuZ2V0Q2hhbm5lbCgpOw0KICAgICAgICBtZXRhZGF0YSA9IGlubmVyLmdldE1ldGFkYXRhKCk7DQogICAgICAgIGJvZHkgPSBpbm5lci5nZXRCb2R5KCkudG9CeXRlQXJyYXkoKTsNCiAgICAgICAgdGltZXN0YW1wID0gaW5uZXIuZ2V0VGltZXN0YW1wKCk7DQogICAgICAgIHNlcXVlbmNlID0gaW5uZXIuZ2V0U2VxdWVuY2UoKTsNCiAgICAgICAgdGFncyA9IGlubmVyLmdldFRhZ3NNYXAoKTsNCiAgICB9DQoNCiAgICBwdWJsaWMgU3RyaW5nIGdldEV2ZW50SWQoKSB7DQogICAgICAgIHJldHVybiBldmVudElkOw0KICAgIH0NCg0KICAgIHB1YmxpYyB2b2lkIHNldEV2ZW50SWQoU3RyaW5nIGV2ZW50SWQpIHsNCiAgICAgICAgdGhpcy5ldmVudElkID0gZXZlbnRJZDsNCiAgICB9DQoNCiAgICBwdWJsaWMgU3RyaW5nIGdldENoYW5uZWwoKSB7DQogICAgICAgIHJldHVybiBjaGFubmVsOw0KICAgIH0NCg0KICAgIHB1YmxpYyB2b2lkIHNldENoYW5uZWwoU3RyaW5nIGNoYW5uZWwpIHsNCiAgICAgICAgdGhpcy5jaGFubmVsID0gY2hhbm5lbDsNCiAgICB9DQoNCiAgICBwdWJsaWMgU3RyaW5nIGdldE1ldGFkYXRhKCkgew0KICAgICAgICByZXR1cm4gbWV0YWRhdGE7DQogICAgfQ0KDQogICAgcHVibGljIHZvaWQgc2V0TWV0YWRhdGEoU3RyaW5nIG1ldGFkYXRhKSB7DQogICAgICAgIHRoaXMubWV0YWRhdGEgPSBtZXRhZGF0YTsNCiAgICB9DQoNCiAgICBwdWJsaWMgYnl0ZVtdIGdldEJvZHkoKSB7DQogICAgICAgIHJldHVybiBib2R5Ow0KICAgIH0NCg0KICAgIHB1YmxpYyB2b2lkIHNldEJvZHkoYnl0ZVtdIGJvZHkpIHsNCiAgICAgICAgdGhpcy5ib2R5ID0gYm9keTsNCiAgICB9DQoNCiAgICBwdWJsaWMgbG9uZyBnZXRUaW1lc3RhbXAoKSB7DQogICAgICAgIHJldHVybiB0aW1lc3RhbXA7DQogICAgfQ0KDQogICAgcHVibGljIHZvaWQgc2V0VGltZXN0YW1wKGxvbmcgdGltZXN0YW1wKSB7DQogICAgICAgIHRoaXMudGltZXN0YW1wID0gdGltZXN0YW1wOw0KICAgIH0NCg0KICAgIHB1YmxpYyBsb25nIGdldFNlcXVlbmNlKCkgew0KICAgICAgICByZXR1cm4gc2VxdWVuY2U7DQogICAgfQ0KDQogICAgcHVibGljIHZvaWQgc2V0U2VxdWVuY2UobG9uZyBzZXF1ZW5jZSkgew0KICAgICAgICB0aGlzLnNlcXVlbmNlID0gc2VxdWVuY2U7DQogICAgfQ0KDQogICAgcHVibGljIE1hcDxTdHJpbmcsIFN0cmluZz4gZ2V0VGFncygpIHsNCiAgICAgICAgcmV0dXJuIHRoaXMudGFnczsNCiAgICB9DQogICAgcHVibGljIHZvaWQgc2V0VGFnKFN0cmluZyBrZXksIFN0cmluZyB2YWx1ZSl7DQogICAgICAgIGlmICh0YWdzPT1udWxsKXsNCiAgICAgICAgICAgIHRhZ3MgPSAgbmV3IEhhc2hNYXA8U3RyaW5nLFN0cmluZz4oKTsNCiAgICAgICAgfQ0KICAgICAgICB0aGlzLnRhZ3MucHV0SWZBYnNlbnQoa2V5LCB2YWx1ZSk7DQogICAgfQ0KDQp9DQo="}, response: {"metadata":{"result":"ok"},"data":null,"is_error":false,"error":""}, error:<nil>	{"source": "sync.down"}
2021-06-26T13:14:14.049+0300	INFO	request: {"metadata":{"filename":"ChannelParameters.java","method":"save","path":"java/kubemq-java/kubemq-java-sdk/src/main/java/io/kubemq/sdk/commandquery"},"data":"LyoNCiAqIE1JVCBMaWNlbnNlDQogKg0KICogQ29weXJpZ2h0IChjKSAyMDE4IEt1YmVNUQ0KICoNCiAqIFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhIGNvcHkNCiAqIG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlICJTb2Z0d2FyZSIpLCB0byBkZWFsDQogKiBpbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzDQogKiB0byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsDQogKiBjb3BpZXMgb2YgdGhlIFNvZnR3YXJlLCBhbmQgdG8gcGVybWl0IHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXMNCiAqIGZ1cm5pc2hlZCB0byBkbyBzbywgc3ViamVjdCB0byB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnM6DQogKg0KICogVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWQgaW4gYWxsDQogKiBjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLg0KICoNCiAqIFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCAiQVMgSVMiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTIE9SDQogKiBJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWSwNCiAqIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOIE5PIEVWRU5UIFNIQUxMIFRIRQ0KICogQVVUSE9SUyBPUiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSwgREFNQUdFUyBPUiBPVEhFUg0KICogTElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUiBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSwNCiAqIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRSBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU4gVEhFDQogKiBTT0ZUV0FSRS4NCiAqLw0KcGFja2FnZSBpby5rdWJlbXEuc2RrLmNvbW1hbmRxdWVyeTsNCg0KcHVibGljIGNsYXNzIENoYW5uZWxQYXJhbWV0ZXJzIHsNCg0KICAgIC8qKg0KICAgICAqIFJlcHJlc2VudHMgdGhlIHR5cGUgb2YgcmVxdWVzdCBvcGVyYXRpb24gdXNpbmcgUmVxdWVzdFR5cGUuDQogICAgICovDQogICAgcHJpdmF0ZSBSZXF1ZXN0VHlwZSByZXF1ZXN0VHlwZTsNCg0KICAgIC8qKg0KICAgICAqIFJlcHJlc2VudHMgVGhlIGNoYW5uZWwgbmFtZSB0byBzZW5kIHRvIHVzaW5nIHRoZSBLdWJlTVENCiAgICAgKi8NCiAgICBwcml2YXRlIFN0cmluZyBjaGFubmVsTmFtZTsNCiAgICAvKioNCiAgICAgKiBSZXByZXNlbnRzIHRoZSBzZW5kZXIgSUQgdGhhdCB0aGUgbWVzc2FnZXMgd2lsbCBiZSBzZW5kIHVuZGVyDQogICAgICovDQogICAgcHJpdmF0ZSBTdHJpbmcgY2xpZW50SUQ7DQogICAgLyoqDQogICAgICogUmVwcmVzZW50cyB0aGUgbGltaXQgZm9yIHdhaXRpbmcgZm9yIHJlc3BvbnNlIChNaWxsaXNlY29uZHMpDQogICAgICovDQogICAgcHJpdmF0ZSBpbnQgdGltZW91dDsNCiAgICAvKioNCiAgICAgKiBSZXByZXNlbnRzIGlmIHRoZSByZXF1ZXN0IHNob3VsZCBiZSBzYXZlZCBmcm9tIENhY2hlIGFuZCB1bmRlciB3aGF0ICJLZXkiKFN0cmluZykgdG8gc2F2ZSBpdA0KICAgICAqLw0KICAgIHByaXZhdGUgU3RyaW5nIGNhY2hlS2V5Ow0KICAgIC8qKg0KICAgICAqIENhY2hlIHRpbWUgdG8gbGl2ZSA6IGZvciBob3cgbG9uZyBkb2VzIHRoZSByZXF1ZXN0IHNob3VsZCBiZSBzYXZlZCBpbiBDYWNoZQ0KICAgICAqLw0KICAgIHByaXZhdGUgaW50IGNhY2hlVFRMOw0KICAgIC8qKg0KICAgICAqIFJlcHJlc2VudHMgVGhlIGFkZHJlc3Mgb2YgdGhlIEt1YmVNUSBzZXJ2ZXINCiAgICAgKi8NCiAgICBwcml2YXRlIFN0cmluZyBrdWJlTVFBZGRyZXNzOw0KICAgIC8qKg0KICAgICAqIFJlcHJlc2VudHMgSldUIHRva2VuIHRvIGJlIHVzZWQgZm9yIEt1YmVNUSBhdXRoZW50aWNhdGlvbi4NCiAgICAgKi8NCiAgICBwcml2YXRlIFN0cmluZyBhdXRoVG9rZW47DQoNCg0KICAgIC8qKg0KICAgICAqIEluaXRpYWxpemVzIGEgbmV3IGluc3RhbmNlIG9mIHRoZSBpby5rdWJlbXEuc2RrLmNvbW1hbmRxdWVyeS5SZXF1ZXN0Q2hhbm5lbFBhcmFtZXRlcnMgY2xhc3MNCiAgICAgKi8NCiAgICBwdWJsaWMgQ2hhbm5lbFBhcmFtZXRlcnMoKSB7DQogICAgfQ0KDQogICAgLyoqDQogICAgICogSW5pdGlhbGl6ZXMgYSBuZXcgaW5zdGFuY2Ugb2YgdGhlIGlvLmt1YmVtcS5zZGsuY29tbWFuZHF1ZXJ5LlJlcXVlc3RDaGFubmVsUGFyYW1ldGVycyBjbGFzcw0KICAgICAqIHdpdGggc2V0IHBhcmFtZXRlcnMNCiAgICAgKg0KICAgICAqIEBwYXJhbSByZXF1ZXN0VHlwZSAgIFJlcHJlc2VudHMgdGhlIHR5cGUgb2YgcmVxdWVzdCBvcGVyYXRpb24gdXNpbmcgUmVxdWVzdFR5cGUuDQogICAgICogQHBhcmFtIGNoYW5uZWxOYW1lICAgUmVwcmVzZW50cyBUaGUgY2hhbm5lbCBuYW1lIHRvIHNlbmQgdG8gdXNpbmcgdGhlIEt1YmVNUQ0KICAgICAqIEBwYXJhbSBjbGllbnRJRCAgICAgIFJlcHJlc2VudHMgdGhlIHNlbmRlciBJRCB0aGF0IHRoZSBtZXNzYWdlcyB3aWxsIGJlIHNlbmQgdW5kZXINCiAgICAgKiBAcGFyYW0gdGltZW91dCAgICAgICBSZXByZXNlbnRzIHRoZSBsaW1pdCBmb3Igd2FpdGluZyBmb3IgcmVzcG9uc2UgKE1pbGxpc2Vjb25kcykNCiAgICAgKiBAcGFyYW0gY2FjaGVLZXkgICAgICBDYWNoZSB0aW1lIHRvIGxpdmUgOiBmb3IgaG93IGxvbmcgZG9lcyB0aGUgcmVxdWVzdCBzaG91bGQgYmUgc2F2ZWQgaW4gQ2FjaGUNCiAgICAgKiBAcGFyYW0gY2FjaGVUVEwgICAgICBSZXByZXNlbnRzIFRoZSBhZGRyZXNzIG9mIHRoZSBLdWJlTVEgc2VydmVyDQogICAgICogQHBhcmFtIGt1YmVNUUFkZHJlc3MgUmVwcmVzZW50cyBUaGUgYWRkcmVzcyBvZiB0aGUgS3ViZU1RIHNlcnZlcg0KICAgICAqIEBwYXJhbSBhdXRoVG9rZW4gUmVwcmVzZW50cyBKV1QgdG9rZW4gdG8gYmUgdXNlZCBmb3IgS3ViZU1RIGF1dGhlbnRpY2F0aW9uLg0KICAgICAqLw0KICAgIHB1YmxpYyBDaGFubmVsUGFyYW1ldGVycyhSZXF1ZXN0VHlwZSByZXF1ZXN0VHlwZSwgU3RyaW5nIGNoYW5uZWxOYW1lLCBTdHJpbmcgY2xpZW50SUQsIGludCB0aW1lb3V0LCBTdHJpbmcgY2FjaGVLZXksIGludCBjYWNoZVRUTCwgU3RyaW5nIGt1YmVNUUFkZHJlc3MsIFN0cmluZyBhdXRoVG9rZW4pIHsNCiAgICAgICAgdGhpcy5yZXF1ZXN0VHlwZSA9IHJlcXVlc3RUeXBlOw0KICAgICAgICB0aGlzLmNoYW5uZWxOYW1lID0gY2hhbm5lbE5hbWU7DQogICAgICAgIHRoaXMuY2xpZW50SUQgPSBjbGllbnRJRDsNCiAgICAgICAgdGhpcy50aW1lb3V0ID0gdGltZW91dDsNCiAgICAgICAgdGhpcy5jYWNoZUtleSA9IGNhY2hlS2V5Ow0KICAgICAgICB0aGlzLmNhY2hlVFRMID0gY2FjaGVUVEw7DQogICAgICAgIHRoaXMua3ViZU1RQWRkcmVzcyA9IGt1YmVNUUFkZHJlc3M7DQogICAgICAgIHRoaXMuYXV0aFRva2VuID0gYXV0aFRva2VuOw0KICAgIH0NCg0KICAgIHB1YmxpYyBSZXF1ZXN0VHlwZSBnZXRSZXF1ZXN0VHlwZSgpIHsNCiAgICAgICAgcmV0dXJuIHJlcXVlc3RUeXBlOw0KICAgIH0NCg0KICAgIHB1YmxpYyB2b2lkIHNldFJlcXVlc3RUeXBlKFJlcXVlc3RUeXBlIHJlcXVlc3RUeXBlKSB7DQogICAgICAgIHRoaXMucmVxdWVzdFR5cGUgPSByZXF1ZXN0VHlwZTsNCiAgICB9DQoNCiAgICBwdWJsaWMgU3RyaW5nIGdldENoYW5uZWxOYW1lKCkgew0KICAgICAgICByZXR1cm4gY2hhbm5lbE5hbWU7DQogICAgfQ0KDQogICAgcHVibGljIHZvaWQgc2V0Q2hhbm5lbE5hbWUoU3RyaW5nIGNoYW5uZWxOYW1lKSB7DQogICAgICAgIHRoaXMuY2hhbm5lbE5hbWUgPSBjaGFubmVsTmFtZTsNCiAgICB9DQoNCiAgICBwdWJsaWMgU3RyaW5nIGdldENsaWVudElEKCkgew0KICAgICAgICByZXR1cm4gY2xpZW50SUQ7DQogICAgfQ0KDQogICAgcHVibGljIHZvaWQgc2V0Q2xpZW50SUQoU3RyaW5nIGNsaWVudElEKSB7DQogICAgICAgIHRoaXMuY2xpZW50SUQgPSBjbGllbnRJRDsNCiAgICB9DQoNCiAgICBwdWJsaWMgaW50IGdldFRpbWVvdXQoKSB7DQogICAgICAgIHJldHVybiB0aW1lb3V0Ow0KICAgIH0NCg0KICAgIHB1YmxpYyB2b2lkIHNldFRpbWVvdXQoaW50IHRpbWVvdXQpIHsNCiAgICAgICAgdGhpcy50aW1lb3V0ID0gdGltZW91dDsNCiAgICB9DQoNCiAgICBwdWJsaWMgU3RyaW5nIGdldENhY2hlS2V5KCkgew0KICAgICAgICByZXR1cm4gY2FjaGVLZXk7DQogICAgfQ0KDQogICAgcHVibGljIHZvaWQgc2V0Q2FjaGVLZXkoU3RyaW5nIGNhY2hlS2V5KSB7DQogICAgICAgIHRoaXMuY2FjaGVLZXkgPSBjYWNoZUtleTsNCiAgICB9DQoNCiAgICBwdWJsaWMgaW50IGdldENhY2hlVFRMKCkgew0KICAgICAgICByZXR1cm4gY2FjaGVUVEw7DQogICAgfQ0KDQogICAgcHVibGljIHZvaWQgc2V0Q2FjaGVUVEwoaW50IGNhY2hlVFRMKSB7DQogICAgICAgIHRoaXMuY2FjaGVUVEwgPSBjYWNoZVRUTDsNCiAgICB9DQoNCiAgICBwdWJsaWMgU3RyaW5nIGdldEt1YmVNUUFkZHJlc3MoKSB7DQogICAgICAgIHJldHVybiBrdWJlTVFBZGRyZXNzOw0KICAgIH0NCg0KICAgIHB1YmxpYyB2b2lkIHNldEt1YmVNUUFkZHJlc3MoU3RyaW5nIGt1YmVNUUFkZHJlc3MpIHsNCiAgICAgICAgdGhpcy5rdWJlTVFBZGRyZXNzID0ga3ViZU1RQWRkcmVzczsNCiAgICB9DQoNCiAgICBwdWJsaWMgU3RyaW5nIGdldEF1dGhUb2tlbigpew0KICAgICAgICByZXR1cm4gdGhpcy5hdXRoVG9rZW47DQogICAgfQ0KDQogICAgcHVibGljIHZvaWQgc2V0QXV0aFRva2VuKFN0cmluZyBhdXRoVG9rZW4pew0KICAgICAgICB0aGlzLmF1dGhUb2tlbiA9IGF1dGhUb2tlbjsNCiAgICB9DQogIA0KDQp9DQo="}, response: {"metadata":{"result":"ok"},"data":null,"is_error":false,"error":""}, error:<nil>	{"source": "sync.down"}
2021-06-26T13:14:14.309+0300	INFO	request: {"metadata":{"filename":"org.eclipse.buildship.core.prefs","method":"save","path":"java/kubemq-java/examples/.settings"},"data":"Y29ubmVjdGlvbi5wcm9qZWN0LmRpcj0uLg0KZWNsaXBzZS5wcmVmZXJlbmNlcy52ZXJzaW9uPTENCg=="}, response: {"metadata":{"result":"ok"},"data":null,"is_error":false,"error":""}, error:<nil>	{"source": "sync.down"}
2021-06-26T13:14:14.319+0300	INFO	request: {"metadata":{"filename":"logback.xml","method":"save","path":"java/kubemq-java/examples/bin/main"},"data":"PGNvbmZpZ3VyYXRpb24+DQogICAgPGFwcGVuZGVyIG5hbWU9IlNURE9VVCIgY2xhc3M9ImNoLnFvcy5sb2diYWNrLmNvcmUuQ29uc29sZUFwcGVuZGVyIj4NCiAgICAgICAgPGVuY29kZXIgY2xhc3M9ImNoLnFvcy5sb2diYWNrLmNsYXNzaWMuZW5jb2Rlci5QYXR0ZXJuTGF5b3V0RW5jb2RlciI+DQogICAgICAgICAgICA8cGF0dGVybj4lZHtISDptbTpzcy5TU1N9IFsldGhyZWFkXSAlLTVsZXZlbCAlbG9nZ2VyezM2fSAtICVtc2clbjwvcGF0dGVybj4NCiAgICAgICAgPC9lbmNvZGVyPg0KICAgIDwvYXBwZW5kZXI+DQogICAgPGxvZ2dlciBuYW1lPSJpby5rdWJlbXEiIGxldmVsPSJUUkFDRSIvPg0KICAgIDxyb290IGxldmVsPSJpbmZvIj4NCiAgICAgICAgPGFwcGVuZGVyLXJlZiByZWY9IlNURE9VVCIvPg0KICAgIDwvcm9vdD4NCjwvY29uZmlndXJhdGlvbj4="}, response: {"metadata":{"result":"ok"},"data":null,"is_error":false,"error":""}, error:<nil>	{"source": "sync.down"}
2021-06-26T13:14:14.343+0300	INFO	request: {"metadata":{"filename":".name","method":"save","path":"java/kubemq-java/.idea"},"data":"a3ViZW1xLXNkay1qYXZh"}, response: {"metadata":{"result":"ok"},"data":null,"is_error":false,"error":""}, error:<nil>	{"source": "sync.down"}
2021-06-26T13:14:14.376+0300	INFO	request: {"metadata":{"filename":"Program.java","method":"save","path":"java/kubemq-java/examples/src/main/java/io/kubemq/sdk/examples/get_Started/pubSub_Subscribe_to_a_Channel"},"data":"LyoNCiAqIE1JVCBMaWNlbnNlDQogKg0KICogQ29weXJpZ2h0IChjKSAyMDE4IEt1YmVNUQ0KICoNCiAqIFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhIGNvcHkNCiAqIG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlICJTb2Z0d2FyZSIpLCB0byBkZWFsDQogKiBpbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzDQogKiB0byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsDQogKiBjb3BpZXMgb2YgdGhlIFNvZnR3YXJlLCBhbmQgdG8gcGVybWl0IHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXMNCiAqIGZ1cm5pc2hlZCB0byBkbyBzbywgc3ViamVjdCB0byB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnM6DQogKg0KICogVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWQgaW4gYWxsDQogKiBjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLg0KICoNCiAqIFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCAiQVMgSVMiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTIE9SDQogKiBJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWSwNCiAqIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOIE5PIEVWRU5UIFNIQUxMIFRIRQ0KICogQVVUSE9SUyBPUiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSwgREFNQUdFUyBPUiBPVEhFUg0KICogTElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUiBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSwNCiAqIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRSBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU4gVEhFDQogKiBTT0ZUV0FSRS4NCiAqLw0KcGFja2FnZSBpby5rdWJlbXEuc2RrLmV4YW1wbGVzLmdldF9TdGFydGVkLnB1YlN1Yl9TdWJzY3JpYmVfdG9fYV9DaGFubmVsOw0KDQppbXBvcnQgamF2YS5pby5JT0V4Y2VwdGlvbjsNCg0KaW1wb3J0IGphdmF4Lm5ldC5zc2wuU1NMRXhjZXB0aW9uOw0KDQppbXBvcnQgaW8uZ3JwYy5zdHViLlN0cmVhbU9ic2VydmVyOw0KaW1wb3J0IGlvLmt1YmVtcS5zZGsuYmFzaWMuU2VydmVyQWRkcmVzc05vdFN1cHBsaWVkRXhjZXB0aW9uOw0KaW1wb3J0IGlvLmt1YmVtcS5zZGsuZXZlbnQuRXZlbnRSZWNlaXZlOw0KaW1wb3J0IGlvLmt1YmVtcS5zZGsuZXZlbnQuU3Vic2NyaWJlcjsNCmltcG9ydCBpby5rdWJlbXEuc2RrLnN1YnNjcmlwdGlvbi5TdWJzY3JpYmVSZXF1ZXN0Ow0KaW1wb3J0IGlvLmt1YmVtcS5zZGsuc3Vic2NyaXB0aW9uLlN1YnNjcmliZVR5cGU7DQppbXBvcnQgaW8ua3ViZW1xLnNkay50b29scy5Db252ZXJ0ZXI7DQoNCnB1YmxpYyBjbGFzcyBQcm9ncmFtIHsNCiAgICBwcml2YXRlIGZpbmFsIHN0YXRpYyBPYmplY3QgbG9jayA9IG5ldyBPYmplY3QoKTsNCiAgDQogICAgcHVibGljIHN0YXRpYyB2b2lkIG1haW4oU3RyaW5nW10gYXJncykgdGhyb3dzIEludGVycnVwdGVkRXhjZXB0aW9uLCBJT0V4Y2VwdGlvbiB7DQoNCiAgICAgICAgU3RyaW5nIGNoYW5uZWxOYW1lID0gInRlc3RpbmdfZXZlbnRfY2hhbm5lbCIsIGNsaWVudElEID0gImhlbGxvLXdvcmxkLXN1YnNjcmliZXIiLA0KICAgICAgICAgICAgICAgIGt1YmVNUUFkZHJlc3MgPSAibG9jYWxob3N0OjUwMDAwIjsNCiAgICAgICAgU3Vic2NyaWJlciBzdWJzY3JpYmVyID0gbmV3IFN1YnNjcmliZXIoa3ViZU1RQWRkcmVzcyk7DQogICAgICAgIFN1YnNjcmliZVJlcXVlc3Qgc3Vic2NyaWJlUmVxdWVzdCA9IG5ldyBTdWJzY3JpYmVSZXF1ZXN0KCk7DQogICAgICAgIHN1YnNjcmliZVJlcXVlc3Quc2V0Q2hhbm5lbChjaGFubmVsTmFtZSk7DQogICAgICAgIHN1YnNjcmliZVJlcXVlc3Quc2V0Q2xpZW50SUQoY2xpZW50SUQpOw0KICAgICAgICBzdWJzY3JpYmVSZXF1ZXN0LnNldFN1YnNjcmliZVR5cGUoU3Vic2NyaWJlVHlwZS5FdmVudHMpOw0KDQogICAgICAgIFN0cmVhbU9ic2VydmVyPEV2ZW50UmVjZWl2ZT4gc3RyZWFtT2JzZXJ2ZXIgPSBuZXcgU3RyZWFtT2JzZXJ2ZXI8RXZlbnRSZWNlaXZlPigpIHsNCg0KICAgICAgICAgICAgQE92ZXJyaWRlDQogICAgICAgICAgICBwdWJsaWMgdm9pZCBvbk5leHQoRXZlbnRSZWNlaXZlIHZhbHVlKSB7DQogICAgICAgICAgICAgICAgdHJ5IHsNCiAgICAgICAgICAgICAgICAgICAgU3lzdGVtLm91dC5wcmludGYoIkV2ZW50IFJlY2VpdmVkOiBFdmVudElEOiAlcywgQ2hhbm5lbDogJXMsIE1ldGFkYXRhOiAlcywgQm9keTogJXMiLA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlLmdldEV2ZW50SWQoKSwgdmFsdWUuZ2V0Q2hhbm5lbCgpLCB2YWx1ZS5nZXRNZXRhZGF0YSgpLA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIENvbnZlcnRlci5Gcm9tQnl0ZUFycmF5KHZhbHVlLmdldEJvZHkoKSkpOw0KICAgICAgICAgICAgICAgIH0gY2F0Y2ggKENsYXNzTm90Rm91bmRFeGNlcHRpb24gZSkgew0KICAgICAgICAgICAgICAgICAgICBTeXN0ZW0ub3V0LnByaW50ZigiQ2xhc3NOb3RGb3VuZEV4Y2VwdGlvbjogJXMiLCBlLmdldE1lc3NhZ2UoKSk7DQogICAgICAgICAgICAgICAgICAgIGUucHJpbnRTdGFja1RyYWNlKCk7DQogICAgICAgICAgICAgICAgfSBjYXRjaCAoSU9FeGNlcHRpb24gZSkgew0KICAgICAgICAgICAgICAgICAgICBTeXN0ZW0ub3V0LnByaW50ZigiSU9FeGNlcHRpb246ICAlcyIsIGUuZ2V0TWVzc2FnZSgpKTsNCiAgICAgICAgICAgICAgICAgICAgZS5wcmludFN0YWNrVHJhY2UoKTsNCiAgICAgICAgICAgICAgICB9DQoNCiAgICAgICAgICAgIH0NCg0KICAgICAgICAgICAgQE92ZXJyaWRlDQogICAgICAgICAgICBwdWJsaWMgdm9pZCBvbkVycm9yKFRocm93YWJsZSB0KSB7DQogICAgICAgICAgICAgICAgU3lzdGVtLm91dC5wcmludGYoIkV2ZW50IFJlY2VpdmVkIEVycm9yOiAlcyIsIHQuZ2V0TWVzc2FnZSgpKTsNCiAgICAgICAgICAgICAgICBvbkNvbXBsZXRlZCgpOw0KICAgICAgICAgICAgfQ0KDQogICAgICAgICAgICBAT3ZlcnJpZGUNCiAgICAgICAgICAgIHB1YmxpYyB2b2lkIG9uQ29tcGxldGVkKCkgew0KICAgICAgICAgICAgICAgIHN5bmNocm9uaXplZCAobG9jaykgew0KICAgICAgICAgICAgICAgICAgICBsb2NrLm5vdGlmeSgpOw0KICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgIH0NCiAgICAgICAgfTsNCg0KICAgICAgIA0KICAgICAgICB0cnkgew0KICAgICAgICAgICAgU3Vic2NyaWJlKHN1YnNjcmliZXIsIHN1YnNjcmliZVJlcXVlc3QsIHN0cmVhbU9ic2VydmVyKTsNCiAgICAgICAgfSBjYXRjaCAoU2VydmVyQWRkcmVzc05vdFN1cHBsaWVkRXhjZXB0aW9uIGUpIHsNCiAgICAgICAgICAgIC8vIFRPRE8gQXV0by1nZW5lcmF0ZWQgY2F0Y2ggYmxvY2sNCiAgICAgICAgICAgIGUucHJpbnRTdGFja1RyYWNlKCk7DQogICAgICAgIH0NCiAgICAgIA0KICAgIH0NCg0KICAgIA0KDQogICAgcHJpdmF0ZSBzdGF0aWMgdm9pZCBTdWJzY3JpYmUoU3Vic2NyaWJlciBzdWJzY3JpYmVyLFN1YnNjcmliZVJlcXVlc3Qgc3Vic2NyaWJlUmVxdWVzdCwgU3RyZWFtT2JzZXJ2ZXI8RXZlbnRSZWNlaXZlPiBzdHJlYW1PYnNlcnZlcikNCiAgICAgICAgICAgIHRocm93cyBJbnRlcnJ1cHRlZEV4Y2VwdGlvbiwgU1NMRXhjZXB0aW9uLCBTZXJ2ZXJBZGRyZXNzTm90U3VwcGxpZWRFeGNlcHRpb24gew0KICAgICAgICBzeW5jaHJvbml6ZWQgKGxvY2spIHsNCiAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICBzdWJzY3JpYmVyLlN1YnNjcmliZVRvRXZlbnRzKHN1YnNjcmliZVJlcXVlc3QsIHN0cmVhbU9ic2VydmVyKTsNCiAgICAgICAgICAgICAgICBsb2NrLndhaXQoKTsNCiAgICAgICAgICAgICAgICBTdWJzY3JpYmUoc3Vic2NyaWJlciwgc3Vic2NyaWJlUmVxdWVzdCwgc3RyZWFtT2JzZXJ2ZXIpOw0KICAgICAgICAgICANCg0KDQogICAgICAgIH0NCiAgICB9DQp9DQo="}, response: {"metadata":{"result":"ok"},"data":null,"is_error":false,"error":""}, error:<nil>	{"source": "sync.down"}
2021-06-26T13:14:14.521+0300	INFO	request: {"metadata":{"filename":"Sender.java","method":"save","path":"java/kubemq-java/kubemq-java-sdk/src/main/java/io/kubemq/sdk/event/lowlevel"},"data":""}, response: {"metadata":{"result":"ok"},"data":null,"is_error":false,"error":""}, error:<nil>	{"source": "sync.down"}
2021-06-26T13:14:14.785+0300	INFO	request: {"metadata":{"filename":"Program.java","method":"save","path":"java/kubemq-java/examples/src/main/java/io/kubemq/sdk/examples/commandqueryresponder"},"data":"LyoNCiAqIE1JVCBMaWNlbnNlDQogKg0KICogQ29weXJpZ2h0IChjKSAyMDE4IEt1YmVNUQ0KICoNCiAqIFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhIGNvcHkNCiAqIG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlICJTb2Z0d2FyZSIpLCB0byBkZWFsDQogKiBpbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzDQogKiB0byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsDQogKiBjb3BpZXMgb2YgdGhlIFNvZnR3YXJlLCBhbmQgdG8gcGVybWl0IHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXMNCiAqIGZ1cm5pc2hlZCB0byBkbyBzbywgc3ViamVjdCB0byB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnM6DQogKg0KICogVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWQgaW4gYWxsDQogKiBjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLg0KICoNCiAqIFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCAiQVMgSVMiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTIE9SDQogKiBJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWSwNCiAqIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOIE5PIEVWRU5UIFNIQUxMIFRIRQ0KICogQVVUSE9SUyBPUiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSwgREFNQUdFUyBPUiBPVEhFUg0KICogTElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUiBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSwNCiAqIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRSBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU4gVEhFDQogKiBTT0ZUV0FSRS4NCiAqLw0KcGFja2FnZSBpby5rdWJlbXEuc2RrLmV4YW1wbGVzLmNvbW1hbmRxdWVyeXJlc3BvbmRlcjsNCg0KaW1wb3J0IGlvLmt1YmVtcS5zZGsuYmFzaWMuU2VydmVyQWRkcmVzc05vdFN1cHBsaWVkRXhjZXB0aW9uOw0KDQppbXBvcnQgamF2YXgubmV0LnNzbC5TU0xFeGNlcHRpb247DQppbXBvcnQgamF2YS5pby5JT0V4Y2VwdGlvbjsNCg0KcHVibGljIGNsYXNzIFByb2dyYW0gew0KICAgIHB1YmxpYyBzdGF0aWMgdm9pZCBtYWluKFN0cmluZ1tdIGFyZ3MpICB7DQogICAgICAgIFN5c3RlbS5vdXQucHJpbnRsbigpOw0KICAgICAgICBTeXN0ZW0ub3V0LnByaW50bG4oIlN0YXJ0aW5nIFJlcVJlcFJlc3BvbmRlci4uLiIpOw0KICAgICAgICBTeXN0ZW0ub3V0LnByaW50bG4oKTsNCiAgICAgICAgU3lzdGVtLm91dC5wcmludGxuKCJQcmVzcyAnRW50ZXInIHRvIHN0b3AgdGhlIGFwcGxpY2F0aW9uLi4uIik7DQogICAgICAgIFN5c3RlbS5vdXQucHJpbnRsbigpOw0KDQogICAgICAgIHRyeSB7DQogICAgICAgICAgICBuZXcgQ29tbWFuZFF1ZXJ5UmVzcG9uZGVyKCk7DQogICAgICAgIH0NCiAgICAgICAgDQogICAgICAgIGNhdGNoIChTZXJ2ZXJBZGRyZXNzTm90U3VwcGxpZWRFeGNlcHRpb24gZSkgew0KICAgICAgICAgICAgU3lzdGVtLm91dC5wcmludGxuKCJFcnJvcjogQ2FuIG5vdCBkZXRlcm1pbmUgS3ViZU1RIHNlcnZlciBhZGRyZXNzLiIpOw0KICAgICAgICB9IGNhdGNoIChTU0xFeGNlcHRpb24gZSkgew0KICAgICAgICAgICAgU3lzdGVtLm91dC5wcmludGxuKCJFcnJvcjogZXJyb3IgZGV0ZWN0ZWQgYnkgYW4gU1NMIHN1YnN5c3RlbSIpOw0KICAgICAgICB9DQoNCiAgICAgICAgdHJ5IHsNCiAgICAgICAgICAgIGludCByZWFkID0gU3lzdGVtLmluLnJlYWQoKTsNCiAgICAgICAgfSBjYXRjaCAoSU9FeGNlcHRpb24gZSkgew0KICAgICAgICAgICAgU3lzdGVtLm91dC5wcmludGxuKCJFcnJvcjogIEkvTyBlcnJvciBvY2N1cnJlZC4iKTsNCiAgICAgICAgfQ0KICAgIH0NCn0NCg=="}, response: {"metadata":{"result":"ok"},"data":null,"is_error":false,"error":""}, error:<nil>	{"source": "sync.down"}
2021-06-26T13:14:14.787+0300	INFO	request: {"metadata":{"filename":"packed-refs","method":"save","path":"java/kubemq-java/.git"},"data":"IyBwYWNrLXJlZnMgd2l0aDogcGVlbGVkIGZ1bGx5LXBlZWxlZCBzb3J0ZWQgCjRkNDE3MGU0MTVjMzFlNGM0ZjAyODRlNWE2ZWMyOTA3Mjc1OWIzYjYgcmVmcy9yZW1vdGVzL29yaWdpbi9GaXhUcmFuc2FjdGlvbgo0MjllNWUyODMzNDg0MzkwMDJkZjAxNTRmNDIxZDExZjVlMTk0YzBkIHJlZnMvcmVtb3Rlcy9vcmlnaW4vbWFzdGVyCjM5MzllNmY2OTI0ZWVlZTE1YTUwYTFlZmM5ZjRkMjY2MDM4MTRiMjAgcmVmcy9yZW1vdGVzL29yaWdpbi92Mgo="}, response: {"metadata":{"result":"ok"},"data":null,"is_error":false,"error":""}, error:<nil>	{"source": "sync.down"}
2021-06-26T13:14:14.807+0300	INFO	request: {"metadata":{"filename":"prepare-commit-msg.sample","method":"save","path":"java/kubemq-java/.git/hooks"},"data":"IyEvYmluL3NoCiMKIyBBbiBleGFtcGxlIGhvb2sgc2NyaXB0IHRvIHByZXBhcmUgdGhlIGNvbW1pdCBsb2cgbWVzc2FnZS4KIyBDYWxsZWQgYnkgImdpdCBjb21taXQiIHdpdGggdGhlIG5hbWUgb2YgdGhlIGZpbGUgdGhhdCBoYXMgdGhlCiMgY29tbWl0IG1lc3NhZ2UsIGZvbGxvd2VkIGJ5IHRoZSBkZXNjcmlwdGlvbiBvZiB0aGUgY29tbWl0CiMgbWVzc2FnZSdzIHNvdXJjZS4gIFRoZSBob29rJ3MgcHVycG9zZSBpcyB0byBlZGl0IHRoZSBjb21taXQKIyBtZXNzYWdlIGZpbGUuICBJZiB0aGUgaG9vayBmYWlscyB3aXRoIGEgbm9uLXplcm8gc3RhdHVzLAojIHRoZSBjb21taXQgaXMgYWJvcnRlZC4KIwojIFRvIGVuYWJsZSB0aGlzIGhvb2ssIHJlbmFtZSB0aGlzIGZpbGUgdG8gInByZXBhcmUtY29tbWl0LW1zZyIuCgojIFRoaXMgaG9vayBpbmNsdWRlcyB0aHJlZSBleGFtcGxlcy4gVGhlIGZpcnN0IG9uZSByZW1vdmVzIHRoZQojICIjIFBsZWFzZSBlbnRlciB0aGUgY29tbWl0IG1lc3NhZ2UuLi4iIGhlbHAgbWVzc2FnZS4KIwojIFRoZSBzZWNvbmQgaW5jbHVkZXMgdGhlIG91dHB1dCBvZiAiZ2l0IGRpZmYgLS1uYW1lLXN0YXR1cyAtciIKIyBpbnRvIHRoZSBtZXNzYWdlLCBqdXN0IGJlZm9yZSB0aGUgImdpdCBzdGF0dXMiIG91dHB1dC4gIEl0IGlzCiMgY29tbWVudGVkIGJlY2F1c2UgaXQgZG9lc24ndCBjb3BlIHdpdGggLS1hbWVuZCBvciB3aXRoIHNxdWFzaGVkCiMgY29tbWl0cy4KIwojIFRoZSB0aGlyZCBleGFtcGxlIGFkZHMgYSBTaWduZWQtb2ZmLWJ5IGxpbmUgdG8gdGhlIG1lc3NhZ2UsIHRoYXQgY2FuCiMgc3RpbGwgYmUgZWRpdGVkLiAgVGhpcyBpcyByYXJlbHkgYSBnb29kIGlkZWEuCgpDT01NSVRfTVNHX0ZJTEU9JDEKQ09NTUlUX1NPVVJDRT0kMgpTSEExPSQzCgovdXNyL2Jpbi9wZXJsIC1pLmJhayAtbmUgJ3ByaW50IHVubGVzcyhtL14uIFBsZWFzZSBlbnRlciB0aGUgY29tbWl0IG1lc3NhZ2UvLi5tL14jJC8pJyAiJENPTU1JVF9NU0dfRklMRSIKCiMgY2FzZSAiJENPTU1JVF9TT1VSQ0UsJFNIQTEiIGluCiMgICx8dGVtcGxhdGUsKQojICAgIC91c3IvYmluL3BlcmwgLWkuYmFrIC1wZSAnCiMgICAgICAgcHJpbnQgIlxuIiAuIGBnaXQgZGlmZiAtLWNhY2hlZCAtLW5hbWUtc3RhdHVzIC1yYAojIAkgaWYgL14jLyAmJiAkZmlyc3QrKyA9PSAwJyAiJENPTU1JVF9NU0dfRklMRSIgOzsKIyAgKikgOzsKIyBlc2FjCgojIFNPQj0kKGdpdCB2YXIgR0lUX0NPTU1JVFRFUl9JREVOVCB8IHNlZCAtbiAncy9eXCguKj5cKS4qJC9TaWduZWQtb2ZmLWJ5OiBcMS9wJykKIyBnaXQgaW50ZXJwcmV0LXRyYWlsZXJzIC0taW4tcGxhY2UgLS10cmFpbGVyICIkU09CIiAiJENPTU1JVF9NU0dfRklMRSIKIyBpZiB0ZXN0IC16ICIkQ09NTUlUX1NPVVJDRSIKIyB0aGVuCiMgICAvdXNyL2Jpbi9wZXJsIC1pLmJhayAtcGUgJ3ByaW50ICJcbiIgaWYgISRmaXJzdF9saW5lKysnICIkQ09NTUlUX01TR19GSUxFIgojIGZpCg=="}, response: {"metadata":{"result":"ok"},"data":null,"is_error":false,"error":""}, error:<nil>	{"source": "sync.down"}
2021-06-26T13:14:14.838+0300	INFO	request: {"metadata":{"filename":"HEAD","method":"save","path":"java/kubemq-java/.git/logs/refs/remotes/origin"},"data":"MDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMCA0MjllNWUyODMzNDg0MzkwMDJkZjAxNTRmNDIxZDExZjVlMTk0YzBkIGt1YmVtcSA8bGlvci5uYWJhdEBrdWJlbXEuaW8+IDE2MTgzODUyNjkgKzAzMDAJY2xvbmU6IGZyb20gaHR0cHM6Ly9naXRodWIuY29tL2t1YmVtcS1pby9rdWJlbXEtSmF2YS5naXQK"}, response: {"metadata":{"result":"ok"},"data":null,"is_error":false,"error":""}, error:<nil>	{"source": "sync.down"}
2021-06-26T13:14:14.989+0300	INFO	request: {"metadata":{"filename":"kubemq.proto","method":"save","path":"java/kubemq-java/kubemq-java-sdk/src/main/proto"},"data":""}, response: {"metadata":{"result":"ok"},"data":null,"is_error":false,"error":""}, error:<nil>	{"source": "sync.down"}
2021-06-26T13:14:15.265+0300	INFO	request: {"metadata":{"filename":"ServerAddressNotSuppliedException.java","method":"save","path":"java/kubemq-java/kubemq-java-sdk/src/main/java/io/kubemq/sdk/basic"},"data":"LyoNCiAqIE1JVCBMaWNlbnNlDQogKg0KICogQ29weXJpZ2h0IChjKSAyMDE4IEt1YmVNUQ0KICoNCiAqIFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhIGNvcHkNCiAqIG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlICJTb2Z0d2FyZSIpLCB0byBkZWFsDQogKiBpbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzDQogKiB0byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsDQogKiBjb3BpZXMgb2YgdGhlIFNvZnR3YXJlLCBhbmQgdG8gcGVybWl0IHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXMNCiAqIGZ1cm5pc2hlZCB0byBkbyBzbywgc3ViamVjdCB0byB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnM6DQogKg0KICogVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWQgaW4gYWxsDQogKiBjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLg0KICoNCiAqIFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCAiQVMgSVMiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTIE9SDQogKiBJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWSwNCiAqIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOIE5PIEVWRU5UIFNIQUxMIFRIRQ0KICogQVVUSE9SUyBPUiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSwgREFNQUdFUyBPUiBPVEhFUg0KICogTElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUiBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSwNCiAqIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRSBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU4gVEhFDQogKiBTT0ZUV0FSRS4NCiAqLw0KcGFja2FnZSBpby5rdWJlbXEuc2RrLmJhc2ljOw0KDQpwdWJsaWMgY2xhc3MgU2VydmVyQWRkcmVzc05vdFN1cHBsaWVkRXhjZXB0aW9uIGV4dGVuZHMgRXhjZXB0aW9uIHsNCiAgICAvKioNCiAgICAgKg0KICAgICAqLw0KICAgIHByaXZhdGUgc3RhdGljIGZpbmFsIGxvbmcgc2VyaWFsVmVyc2lvblVJRCA9IDFMOw0KDQogICAgU2VydmVyQWRkcmVzc05vdFN1cHBsaWVkRXhjZXB0aW9uKCkgew0KICAgICAgICBzdXBlcigiU2VydmVyIEFkZHJlc3Mgd2FzIG5vdCBzdXBwbGllZCIpOw0KICAgIH0NCn0NCg=="}, response: {"metadata":{"result":"ok"},"data":null,"is_error":false,"error":""}, error:<nil>	{"source": "sync.down"}
2021-06-26T13:14:15.268+0300	INFO	request: {"metadata":{"filename":"pre-applypatch.sample","method":"save","path":"java/kubemq-java/.git/hooks"},"data":"IyEvYmluL3NoCiMKIyBBbiBleGFtcGxlIGhvb2sgc2NyaXB0IHRvIHZlcmlmeSB3aGF0IGlzIGFib3V0IHRvIGJlIGNvbW1pdHRlZAojIGJ5IGFwcGx5cGF0Y2ggZnJvbSBhbiBlLW1haWwgbWVzc2FnZS4KIwojIFRoZSBob29rIHNob3VsZCBleGl0IHdpdGggbm9uLXplcm8gc3RhdHVzIGFmdGVyIGlzc3VpbmcgYW4KIyBhcHByb3ByaWF0ZSBtZXNzYWdlIGlmIGl0IHdhbnRzIHRvIHN0b3AgdGhlIGNvbW1pdC4KIwojIFRvIGVuYWJsZSB0aGlzIGhvb2ssIHJlbmFtZSB0aGlzIGZpbGUgdG8gInByZS1hcHBseXBhdGNoIi4KCi4gZ2l0LXNoLXNldHVwCnByZWNvbW1pdD0iJChnaXQgcmV2LXBhcnNlIC0tZ2l0LXBhdGggaG9va3MvcHJlLWNvbW1pdCkiCnRlc3QgLXggIiRwcmVjb21taXQiICYmIGV4ZWMgIiRwcmVjb21taXQiICR7MSsiJEAifQo6Cg=="}, response: {"metadata":{"result":"ok"},"data":null,"is_error":false,"error":""}, error:<nil>	{"source": "sync.down"}
2021-06-26T13:14:15.305+0300	INFO	request: {"metadata":{"filename":"kubemq-java.iml","method":"save","path":"java/kubemq-java/.idea/modules"},"data":"PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0iVVRGLTgiPz4NCjxtb2R1bGUgdHlwZT0iSkFWQV9NT0RVTEUiIHZlcnNpb249IjQiPg0KICA8Y29tcG9uZW50IG5hbWU9Ik5ld01vZHVsZVJvb3RNYW5hZ2VyIiBpbmhlcml0LWNvbXBpbGVyLW91dHB1dD0idHJ1ZSI+DQogICAgPGV4Y2x1ZGUtb3V0cHV0IC8+DQogICAgPGNvbnRlbnQgdXJsPSJmaWxlOi8vJE1PRFVMRV9ESVIkLy4uLy4uIiAvPg0KICAgIDxvcmRlckVudHJ5IHR5cGU9InNvdXJjZUZvbGRlciIgZm9yVGVzdHM9ImZhbHNlIiAvPg0KICA8L2NvbXBvbmVudD4NCjwvbW9kdWxlPg=="}, response: {"metadata":{"result":"ok"},"data":null,"is_error":false,"error":""}, error:<nil>	{"source": "sync.down"}
2021-06-26T13:14:15.305+0300	INFO	request: {"metadata":{"filename":".gitignore","method":"save","path":"java/kubemq-java"},"data":"LmdyYWRsZQ0KDQpidWlsZC8NCiMgQ29tcGlsZWQgY2xhc3MgZmlsZQ0KKi5jbGFzcw0KDQojIExvZyBmaWxlDQoqLmxvZw0KDQojIEJsdWVKIGZpbGVzDQoqLmN0eHQNCg0KIyBNb2JpbGUgVG9vbHMgZm9yIEphdmEgKEoyTUUpDQoubXRqLnRtcC8NCg0KIyBQYWNrYWdlIEZpbGVzICMNCiouamFyDQoqLndhcg0KKi5uYXINCiouZWFyDQoqLnppcA0KKi50YXIuZ3oNCioucmFyDQoNCiMgdmlydHVhbCBtYWNoaW5lIGNyYXNoIGxvZ3MsIHNlZSBodHRwOi8vd3d3LmphdmEuY29tL2VuL2Rvd25sb2FkL2hlbHAvZXJyb3JfaG90c3BvdC54bWwNCmhzX2Vycl9waWQqDQoNCg=="}, response: {"metadata":{"result":"ok"},"data":null,"is_error":false,"error":""}, error:<nil>	{"source": "sync.down"}
2021-06-26T13:14:15.748+0300	INFO	request: {"metadata":{"filename":"SendBatchMessageResult.java","method":"save","path":"java/kubemq-java/kubemq-java-sdk/src/main/java/io/kubemq/sdk/queue"},"data":"LyoNCiAqIE1JVCBMaWNlbnNlDQogKg0KICogQ29weXJpZ2h0IChjKSAyMDE4IEt1YmVNUQ0KICoNCiAqIFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhIGNvcHkNCiAqIG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlICJTb2Z0d2FyZSIpLCB0byBkZWFsDQogKiBpbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzDQogKiB0byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsDQogKiBjb3BpZXMgb2YgdGhlIFNvZnR3YXJlLCBhbmQgdG8gcGVybWl0IHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXMNCiAqIGZ1cm5pc2hlZCB0byBkbyBzbywgc3ViamVjdCB0byB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnM6DQogKg0KICogVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWQgaW4gYWxsDQogKiBjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLg0KICoNCiAqIFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCAiQVMgSVMiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTIE9SDQogKiBJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWSwNCiAqIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOIE5PIEVWRU5UIFNIQUxMIFRIRQ0KICogQVVUSE9SUyBPUiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSwgREFNQUdFUyBPUiBPVEhFUg0KICogTElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUiBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSwNCiAqIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRSBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU4gVEhFDQogKiBTT0ZUV0FSRS4NCiAqLw0KcGFja2FnZSBpby5rdWJlbXEuc2RrLnF1ZXVlOw0KDQppbXBvcnQgamF2YS51dGlsLkFycmF5TGlzdDsNCmltcG9ydCBqYXZhLnV0aWwuQ29sbGVjdGlvbjsNCmltcG9ydCBpby5rdWJlbXEuc2RrLmdycGMuS3ViZW1xLlF1ZXVlTWVzc2FnZXNCYXRjaFJlc3BvbnNlOw0KaW1wb3J0IGlvLmt1YmVtcS5zZGsuZ3JwYy5LdWJlbXEuU2VuZFF1ZXVlTWVzc2FnZVJlc3VsdDsNCg0KLyoqDQogKiBRdWV1ZSByZXF1ZXN0IGJhdGNoIGV4ZWN1dGlvbiByZXN1bHQuDQogKi8NCnB1YmxpYyBjbGFzcyBTZW5kQmF0Y2hNZXNzYWdlUmVzdWx0IHsNCg0KCXByaXZhdGUgUXVldWVNZXNzYWdlc0JhdGNoUmVzcG9uc2UgcXVldWVNZXNzYWdlc0JhdGNoUmVzcG9uc2U7DQoNCiAgICBwcm90ZWN0ZWQgU2VuZEJhdGNoTWVzc2FnZVJlc3VsdChRdWV1ZU1lc3NhZ2VzQmF0Y2hSZXNwb25zZSByZWMpIHsNCiAgICAgICAgcXVldWVNZXNzYWdlc0JhdGNoUmVzcG9uc2UgPXJlYzsNCiAgICB9ICANCiAgICANCiAgICAvKioNCiAgICAgKiBVbmlxdWUgZm9yIFJlcXVlc3QNCiAgICAgKiBAcmV0dXJuIEJhdGNoIElEDQogICAgICovDQogICAgcHVibGljIFN0cmluZyBnZXRCYXRjaElEKCl7DQogICAgICAgIHJldHVybiB0aGlzLnF1ZXVlTWVzc2FnZXNCYXRjaFJlc3BvbnNlLmdldEJhdGNoSUQoKTsNCiAgICB9DQoNCiAgICAvKioNCiAgICAgKiBSZXR1cm5lZCBpZiBvbmUgb3IgbW9yZSBtZXNzYWdlcyBwcm9jZXNzIGhhcyBlcnJvciwgZmFsc2UgaWYgbm8gZXJyb3IuDQogICAgICogQHJldHVybiBGYWxzZSBpZiBubyBlcnJvci4NCiAgICAgKi8NCiAgICBwdWJsaWMgQm9vbGVhbiBnZXRIYXZlRXJyb3JzKCl7DQogICAgICAgIHJldHVybiB0aGlzLnF1ZXVlTWVzc2FnZXNCYXRjaFJlc3BvbnNlLmdldEhhdmVFcnJvcnMoKTsNCiAgICB9DQoNCiAgICAvKioNCiAgICAgKiBDb2xsZWN0aW9uIG9mIGJhdGNoIGluZGl2aWR1YWwgZXhlY3V0aW9uIHJlc3VsdC4NCiAgICAgKiBAcmV0dXJuIGV4ZWN1dGlvbiByZXN1bHRzLiANCiAgICAgKi8NCglwdWJsaWMgSXRlcmFibGU8U2VuZE1lc3NhZ2VSZXN1bHQ+IGdldFJlc3VsdHMoKSB7DQogICAgICAgIENvbGxlY3Rpb248U2VuZE1lc3NhZ2VSZXN1bHQ+IGJhdGNoID0gbmV3IEFycmF5TGlzdDxTZW5kTWVzc2FnZVJlc3VsdD4oKTsNCiAgICAgICAgZm9yIChTZW5kUXVldWVNZXNzYWdlUmVzdWx0IHZhciA6ICB0aGlzLnF1ZXVlTWVzc2FnZXNCYXRjaFJlc3BvbnNlLmdldFJlc3VsdHNMaXN0KCkpIHsNCiAgICAgICAgICAgIGJhdGNoLmFkZChuZXcgU2VuZE1lc3NhZ2VSZXN1bHQodmFyKSk7ICAgICAgICAgICAgDQogICAgICAgIH0NCiAgICAgICAgcmV0dXJuIGJhdGNoOyAgICAgICANCgl9DQogICAgDQoNCg0KDQoNCg0KICAgIA0KfQ=="}, response: {"metadata":{"result":"ok"},"data":null,"is_error":false,"error":""}, error:<nil>	{"source": "sync.down"}
2021-06-26T13:14:15.765+0300	INFO	request: {"metadata":{"filename":"SubscribeRequest.java","method":"save","path":"java/kubemq-java/kubemq-java-sdk/src/main/java/io/kubemq/sdk/subscription"},"data":""}, response: {"metadata":{"result":"ok"},"data":null,"is_error":false,"error":""}, error:<nil>	{"source": "sync.down"}
2021-06-26T13:14:15.774+0300	INFO	request: {"metadata":{"filename":"description","method":"save","path":"java/kubemq-java/.git"},"data":"VW5uYW1lZCByZXBvc2l0b3J5OyBlZGl0IHRoaXMgZmlsZSAnZGVzY3JpcHRpb24nIHRvIG5hbWUgdGhlIHJlcG9zaXRvcnkuCg=="}, response: {"metadata":{"result":"ok"},"data":null,"is_error":false,"error":""}, error:<nil>	{"source": "sync.down"}
2021-06-26T13:14:15.914+0300	INFO	request: {"metadata":{"filename":"pack-f562c702dbfc68ffd2ef9223d3d4e98d89850f51.idx","method":"save","path":"java/kubemq-java/.git/objects/pack"},"data":""}, response: {"metadata":{"result":"ok"},"data":null,"is_error":false,"error":""}, error:<nil>	{"source": "sync.down"}
